================================================================================
FILE: Bot\config.py
================================================================================
# bot/config.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import datetime
from dataclasses import dataclass
from pathlib import Path
from dotenv import load_dotenv
from zoneinfo import ZoneInfo

load_dotenv()
__all__ = [
    "Settings", "get_settings", "Course", "get_course", "COURSES",
    "tzinfo", "now_utc_str", "local_dt_str", "format_deadline_text"
]

# <<< –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞ >>>
@dataclass
class Course:
    code: str
    title: str
    price: int
    free_lessons: int

# <<< "–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤" >>>
COURSES = {
    "course_general": Course(
        code="course_general",
        title="–û–±—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        price=4999,
        free_lessons=3
    ),
    "course_five_songs": Course(
        code="course_five_songs",
        title="–ü—Ä–æ—Å—Ç—ã–µ –∞–∫–∫–æ—Ä–¥—ã –∏ 5 –ø–µ—Å–µ–Ω",
        price=1999,
        free_lessons=1
    ),
}

def get_course(code: str) -> Course | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –ø–æ –µ–≥–æ –∫–æ–¥—É."""
    return COURSES.get(code)

def _clean(s: str | None) -> str:
    return (s or "").strip().strip('"').strip("'")

def _parse_admins() -> tuple[int, ...]:
    ids: set[int] = set()
    one = _clean(os.getenv("ADMIN_ID"))
    many = _clean(os.getenv("ADMIN_IDS"))
    if one.isdigit():
        ids.add(int(one))
    if many:
        for part in many.split(","):
            p = _clean(part)
            if p.isdigit():
                ids.add(int(p))
    return tuple(sorted(ids))

# bot/config.py

# ... (–≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å @dataclass, Course, COURSES –∏ —Ç.–¥.) ...

@dataclass
class Settings:
    bot_token: str
    admin_ids: tuple[int, ...]
    db_path: str
    lessons_path: Path
    assets_path: Path
    timezone: str
    payment_link: str
    # <<< –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Ä–æ–∫–æ–≤ >>>
    course_general_path: Path
    by_code_path: Path

def get_settings() -> Settings:
    token = _clean(os.getenv("BOT_TOKEN"))
    if not token:
        raise RuntimeError("BOT_TOKEN is required in .env")
    db_path = _clean(os.getenv("DB_PATH") or "./data/bot.db")
    lessons = Path(_clean(os.getenv("LESSONS_PATH") or "./LESSONS_root")).resolve()
    assets = Path(_clean(os.getenv("ASSETS_PATH") or "./assets")).resolve()
    tz = _clean(os.getenv("TIMEZONE") or "Asia/Aqtobe")
    link = _clean(os.getenv("PAYMENT_LINK") or "")
    admin_ids = _parse_admins()

    # <<< –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–æ–¥–ø–∞–ø–∫–∞–º —Å —É—Ä–æ–∫–∞–º–∏ >>>
    course_general = lessons / "course_general"
    by_code = lessons / "by_code"

    if not lessons.exists():
        print(f"[WARN] LESSONS_PATH={lessons} does not exist. Using demo './LESSONS_root'.")
        lessons = Path("./LESSONS_root").resolve()

    return Settings(
        bot_token=token,
        admin_ids=admin_ids,
        db_path=db_path,
        lessons_path=lessons,
        assets_path=assets,
        timezone=tz,
        payment_link=link,
        # <<< –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ >>>
        course_general_path=course_general,
        by_code_path=by_code,
    )


def tzinfo() -> ZoneInfo:
    return ZoneInfo(get_settings().timezone)

def now_utc_str() -> str:
    return datetime.datetime.now(datetime.timezone.utc).replace(microsecond=0).isoformat().replace("+00:00", "Z")

def local_dt_str(utc_iso: str, tz: str) -> str:
    """Format UTC ISO to local time string"""
    try:
        dt = datetime.datetime.fromisoformat(utc_iso.replace("Z", "+00:00")).astimezone(ZoneInfo(tz))
        return dt.strftime("%d %B %Y, %H:%M")
    except Exception:
        return utc_iso

def _pluralize(number, one, few, many):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ –¥–ª—è —á–∏—Å–ª–∞."""
    num = number % 100
    if 11 <= num <= 19:
        return many
    num = number % 10
    if num == 1:
        return one
    if 2 <= num <= 4:
        return few
    return many

def format_deadline_text(utc_iso: str | None, tz: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if not utc_iso:
        return "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    try:
        now = datetime.datetime.now(datetime.timezone.utc)
        deadline_dt = datetime.datetime.fromisoformat(utc_iso.replace("Z", "+00:00"))
        local_deadline = deadline_dt.astimezone(ZoneInfo(tz))
        date_str = local_deadline.strftime("%d %B")
        time_left = deadline_dt - now

        if time_left.total_seconds() <= 0:
            return f"–¥–æ {date_str} (–¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª)"

        days = time_left.days
        if days > 0:
            days_str = _pluralize(days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            return f"–¥–æ {date_str} (–æ—Å—Ç–∞–ª–æ—Å—å {days} {days_str})"

        hours = int(time_left.total_seconds() / 3600)
        if hours > 0:
            hours_str = _pluralize(hours, "—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤")
            return f"–¥–æ {date_str} (–æ—Å—Ç–∞–ª–æ—Å—å {hours} {hours_str})"

        return f"–¥–æ {date_str} (–æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–∞—Å–∞)"
    except Exception:
        return utc_iso

================================================================================
FILE: Bot\main.py
================================================================================
# bot/main.py
import asyncio
import logging
from contextlib import suppress
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from bot.config import get_settings
from bot.middlewares.block_until_done import BlockUntilDoneMiddleware
from bot.routers.onboarding import router as onboarding_router
from bot.routers.student import router as student_router
from bot.routers.lesson_flow import router as lesson_flow_router
from bot.routers.admin import router as admin_router
from bot.routers.admin_reply import router as admin_reply_router
from bot.services.reminder_worker import reminder_loop
from bot.services.db import DB_PATH
import logging
from bot.routers.fallback import router as fallback_router
from bot.routers.debug import router as debug_router
from aiogram import Dispatcher
from bot.routers.tests.entry import router as tests_entry_router
from bot.routers.tests.engine import router as tests_engine_router
from bot.routers.tests.deeplink import router as deeplink_router
from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode

settings = get_settings()
logging.warning("ADMINS -> %s", settings.admin_ids)

logging.basicConfig(
    level=logging.INFO,  # –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)

# —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
logger = logging.getLogger("maestro")
logger.setLevel(logging.INFO)

async def on_startup(bot: Bot) -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –∫–∞–∫ task_of(bot)
    bot.reminder_task = asyncio.create_task(reminder_loop(bot), name="reminder_loop")
    logging.warning("Reminder loop started")

async def on_shutdown(bot: Bot) -> None:
    # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    if (task := getattr(bot, "reminder_task", None)):
        task.cancel()
        with suppress(asyncio.CancelledError):
            await task
    logging.warning("Reminder loop stopped")


async def main() -> None:
    logging.basicConfig(level=logging.INFO)
    settings = get_settings()
    logging.warning("DB in use -> %s", DB_PATH)

    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –†–æ—É—Ç–µ—Ä—ã
    dp.include_router(onboarding_router)
    dp.include_router(tests_entry_router)
    dp.include_router(tests_engine_router)
    dp.include_router(lesson_flow_router)
    dp.include_router(admin_router)
    dp.include_router(admin_reply_router)
    dp.include_router(student_router)

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: fallback –ª–æ–≤–∏—Ç "–ø–æ–Ω—è—Ç–Ω—ã–µ" –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ –¥—Ä—É–≥–∏—Ö
    dp.include_router(fallback_router)

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: debug –ª–æ–≤–∏—Ç –í–û–û–ë–©–ï –í–°–Å –û–°–¢–ê–õ–¨–ù–û–ï. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º.
    dp.include_router(debug_router)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –≤–∏—Å—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã –¥–æ —Å—Ç–∞—Ä—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)

    try:
        # –†–æ–≤–Ω–æ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())

================================================================================
FILE: Bot\keyboards\admin.py
================================================================================
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def _b(n: int) -> str:
    return f" ({n})" if n else ""

def admin_main_reply_kb(queue: int = 0, pay_pending: int = 0, onb_pending: int = 0, students_total: int = 0) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text=f"üóÇ –û—á–µ—Ä–µ–¥—å{_b(queue)}")],
            [KeyboardButton(text=f"üë• –£—á–µ–Ω–∏–∫–∏{_b(students_total)}")],  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ —Å—á—ë—Ç—á–∏–∫ –∑–¥–µ—Å—å
            [KeyboardButton(text="üí≥ –ü–ª–∞—Ç–µ–∂–∏")],
            [KeyboardButton(text=f"üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É{_b(pay_pending)}")],
            [KeyboardButton(text=f"üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è){_b(onb_pending)}")],
            [KeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ê–¥–º–∏–Ω-–º–µ–Ω—é",
        selective=True,
    )


================================================================================
FILE: Bot\keyboards\student.py
================================================================================
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup,InlineKeyboardMarkup



def student_main_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    # <<< –ù–û–í–û–ï –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ >>>
    kb.button(text="üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è")
    kb.button(text="üéµ –£—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É")
    kb.button(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
    kb.button(text="üÜò –ü–æ–º–æ—â—å")
    kb.button(text="‚ÑπÔ∏è –û –∫—É—Ä—Å–µ")
    kb.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å") # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–æ–≤
    kb.adjust(2, 2, 2) # –ù–æ–≤–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞
    return kb.as_markup(resize_keyboard=True)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º course_code_to_pay >>>
def payment_inline(payment_link: str, course_code_to_pay: str, include_i_paid: bool = True, student_id: int | None = None) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    if payment_link:
        ib.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_link)
    if include_i_paid and student_id is not None:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—à–∏–≤–∞–µ–º –∫–æ–¥ –∫—É—Ä—Å–∞ –≤ callback_data >>>
        ib.button(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_ipaid:{course_code_to_pay}:{student_id}")
    ib.adjust(1)
    return ib.as_markup()

def next_t_inline(progress_id: int, has_next: bool):
    kb = InlineKeyboardBuilder()
    if has_next:
        kb.button(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª", callback_data=f"next_t:{progress_id}")
    else:
        kb.button(text="‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", callback_data=f"submit_start:{progress_id}")
    kb.adjust(1)
    return kb.as_markup()




================================================================================
FILE: Bot\middlewares\block_until_done.py
================================================================================
# bot/middlewares/block_until_done.py
from aiogram.types import Message
from aiogram.dispatcher.middlewares.base import BaseMiddleware  # aiogram v3
from typing import Callable, Dict, Any, Awaitable
from bot.services.db import get_db
from aiogram.fsm.context import FSMContext


# –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
ALLOWED_TEXTS = {
    "üÜò –ü–æ–º–æ—â—å", "SOS", "–°–û–°",
    "üèÖ –ú–æ–π —Ä–∞–Ω–≥", "ü•á –ú–æ–π —Ä–∞–Ω–≥", "–ú–æ–π —Ä–∞–Ω–≥",
    "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ", "–û –∫—É—Ä—Å–µ",
    "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "–û–ø–ª–∞—Ç–∏—Ç—å",
    "‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", "–°–¥–∞—Ç—å —É—Ä–æ–∫",
    "üìö –ù–æ–≤—ã–π —É—Ä–æ–∫",
}

class BlockUntilDoneMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        msg: Message = event

        # 0) –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–¥–∞—á–∏ (FSM SubmitForm.waiting_work) ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        state: FSMContext | None = data.get("state")
        if state is not None:
            try:
                cur_state = await state.get_state()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –∫–ª–∞—Å—Å SubmitForm (–±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
                if cur_state and cur_state.endswith("SubmitForm:waiting_work"):
                    return await handler(event, data)
            except Exception:
                pass

        state: FSMContext | None = data.get("state")
        if state:
            cur = await state.get_state()
            if cur:
                return await handler(event, data)

        # 1) –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if msg.text and msg.text.startswith(("/", ".")):
            return await handler(event, data)

        # 2) –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if msg.text and msg.text.strip() in ALLOWED_TEXTS:
            return await handler(event, data)

        # 3) –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —É—Ä–æ–∫ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ
        async with get_db() as db:
            cur = await db.execute(
                """
                SELECT p.id, p.task_code
                FROM progress p
                JOIN students s ON s.id = p.student_id
                WHERE s.tg_id=? AND p.status IN ('sent','returned')
                ORDER BY p.id DESC
                LIMIT 1
                """,
                (msg.from_user.id,),
            )
            prow = await cur.fetchone()

        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not prow:
            return await handler(event, data)

        # –ê–∫—Ç–∏–≤–Ω—ã–π –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω (–Ω–µ DONE) ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
        if (prow["task_code"] or "") != "DONE":
            await msg.answer(
                "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è, –Ω–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫¬ª. "
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –∂–º–∏ ¬´üÜò –ü–æ–º–æ—â—å¬ª."
            )
            return

        # –£—Ä–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ DONE (–∑–∞–≤–µ—Ä—à—ë–Ω) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
        return await handler(event, data)


================================================================================
FILE: Bot\routers\admin.py
================================================================================
from __future__ import annotations

import random
import asyncio
import re
from typing import List

from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config import get_settings, now_utc_str, local_dt_str
from bot.keyboards.admin import admin_main_reply_kb
from bot.services import points
from bot.services.db import get_db
from bot.services.ranks import get_rank_by_points

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.keyboards.student import student_main_kb
from bot.services.db import get_db, DB_PATH
from aiogram import Router, types, F
from aiogram.filters import StateFilter, Command


class BroadcastForm(StatesGroup):
    waiting_text = State()


router = Router(name="admin")


_admins = set(get_settings().admin_ids or [])
router.message.filter(F.from_user.id.in_(_admins), StateFilter("*"))
router.callback_query.filter(F.from_user.id.in_(_admins), StateFilter("*"))


# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º–µ–Ω–Ω–æ)
@router.message(Command("ping"))
async def admin_ping(m: types.Message):
    await m.answer("admin ok")

# –ü—Ä–∏–º–µ—Ä –ª–æ–≤–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ —ç–º–æ–¥–∑–∏/–ø—Ä–µ—Ñ–∏–∫—Å—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.message(F.text.func(lambda t: t and t.startswith("üìä")))
async def admin_stats(m: types.Message):
    await m.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–∫")  # —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞

MOTIVATION_TEXTS = [
    "–ö—Ä–∞—Å–∞–≤—á–∏–∫! –î–µ—Ä–∂–∏–º —Ç–µ–º–ø üí™",
    "–° –∫–∞–∂–¥—ã–º —É—Ä–æ–∫–æ–º —Ç—ã —Å–∏–ª—å–Ω–µ–µ üé∏",
    "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –µ–¥–µ–º –¥–∞–ª—å—à–µ! üöÄ",
]

# ----------------- –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã -----------------

def render_broadcast(tpl: str, srow) -> str:
    first = (srow["first_name"] or "").strip()
    last = (srow["last_name"] or "").strip()
    username = (srow["username"] or "").strip()
    name = first or (username and f"@{username}") or "–¥—Ä—É–≥"

    vars = {
        "id": srow["id"],
        "tg_id": srow["tg_id"],
        "username": username,
        "first_name": first,
        "last_name": last,
        "name": name,
    }
    def repl(m: re.Match):
        key = m.group(1)
        return str(vars.get(key, ""))
    # –∑–∞–º–µ–Ω—è–µ–º {key} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è; –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ ‚Üí –ø—É—Å—Ç–æ
    return re.sub(r"\{(\w+)\}", repl, tpl)

def _is_admin(uid: int) -> bool:
    return uid in get_settings().admin_ids

async def _send_chunked(bot: Bot, chat_id: int, lines: List[str], limit: int = 4000):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚â§ limit (TG ~4096)."""
    if not lines:
        return
    chunk, total = [], 0
    for line in lines:
        add = len(line) + 1
        if total + add > limit:
            await bot.send_message(chat_id, "\n".join(chunk))
            chunk, total = [line], add
        else:
            chunk.append(line); total += add
    if chunk:
        await bot.send_message(chat_id, "\n".join(chunk))

# –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –±–µ–π–¥–∂–µ–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
async def _admin_counts():
    """
    queue=submitted —Ä–∞–±–æ—Ç, pay_pending=–æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç,
    onb_pending=–∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, students_total=–≤—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
    """
    async with get_db() as db:
        # –æ—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='submitted'")
        queue = (await cur.fetchone())["c"]

        # –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É (pending)
        cur = await db.execute("SELECT COUNT(*) AS c FROM payment_requests WHERE status='pending'")
        pay_pending = (await cur.fetchone())["c"]

        # –∞–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM students WHERE onboarding_done=1 AND COALESCE(approved,0)=0"
        )
        onb_pending = (await cur.fetchone())["c"]

        # –≤—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
        cur = await db.execute("SELECT COUNT(*) AS c FROM students")
        students_total = (await cur.fetchone())["c"]

    return queue, pay_pending, onb_pending, students_total


# ----------------- –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞ -----------------
@router.message(Command("admin"))
async def admin_mode_on(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    queue, pay_pending, onb_pending, students_total = await _admin_counts()
    await m.answer(
        "üîß –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω.",
        reply_markup=admin_main_reply_kb(queue, pay_pending, onb_pending, students_total),
    )

@router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")
async def admin_mode_off(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await m.answer("–ì–æ—Ç–æ–≤–æ. –ö–ª–∞–≤–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=ReplyKeyboardRemove())

# ----------------- ReplyKeyboard: –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å -----------------
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def msg_adm_stats(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("SELECT COUNT(*) AS c FROM students"); students = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status IN ('sent','returned','submitted')"); active = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='submitted'"); queued = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='approved' AND approved_at >= datetime('now','-7 day') || 'Z'"); approved7 = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COALESCE(SUM(amount),0) AS s FROM payments WHERE paid_at >= datetime('now','-30 day') || 'Z'"); sum30 = (await cur.fetchone())["s"]
    txt = ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
           f"‚Äî –£—á–µ–Ω–∏–∫–∏: {students}\n"
           f"‚Äî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active}\n"
           f"‚Äî –í –æ—á–µ—Ä–µ–¥–∏ (submitted): {queued}\n"
           f"‚Äî –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞ 7–¥: {approved7}\n"
           f"‚Äî –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ 30–¥: {sum30} ‚Ç∏")
    await m.answer(txt)

@router.message(F.text.startswith("üóÇ –û—á–µ—Ä–µ–¥—å"))
async def msg_adm_queue(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("""
            SELECT p.id, p.lesson_code, p.task_code, p.submitted_at, s.tg_id, s.username
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.status='submitted' ORDER BY p.submitted_at DESC
        """)
        rows = await cur.fetchall()
    if not rows:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è.")
        return
    await m.answer("–û—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç (submitted):")
    for r in rows:
        card = (f"PID: {r['id']}\n"
                f"–£—á–µ–Ω–∏–∫: @{r['username'] or 'no_username'} (id {r['tg_id']})\n"
                f"–£—Ä–æ–∫/—Ä–∞–∑–¥–µ–ª: {r['lesson_code']}/{r['task_code']}\n"
                f"–°–¥–∞–Ω–æ: {r['submitted_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"p_ok:{r['id']}")
        ik.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å", callback_data=f"p_back:{r['id']}")
        ik.adjust(2)
        await m.bot.send_message(m.chat.id, card, reply_markup=ik.as_markup())

@router.message(F.text.startswith("üë• –£—á–µ–Ω–∏–∫–∏"))
async def msg_adm_students(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name, onboarding_done, created_at
            FROM students ORDER BY id DESC LIMIT 30
        """)
        rows = await cur.fetchall()
    if not rows:
        await m.answer("–£—á–µ–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await m.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–µ–Ω–∏–∫–∏:")
    for r in rows:
        card = (f"id:{r['id']} ‚Ä¢ tg_id:{r['tg_id']} @{r['username'] or '‚Äî'}\n"
                f"{r['first_name'] or ''} {r['last_name'] or ''} ‚Ä¢ onb:{r['onboarding_done']} ‚Ä¢ {r['created_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚ÑπÔ∏è –ê–Ω–∫–µ—Ç–∞", callback_data=f"stu_info:{r['id']}")
        ik.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"stu_del:{r['id']}")
        ik.adjust(2)
        await m.bot.send_message(m.chat.id, card, reply_markup=ik.as_markup())

@router.message(F.text == "üí≥ –ü–ª–∞—Ç–µ–∂–∏")
async def msg_adm_payments(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_payments(m.bot, m.chat.id)

@router.message(F.text.startswith("üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"))
async def msg_adm_pay_pending(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_pay_requests(m.bot, m.chat.id)

@router.message(F.text.startswith("üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è)"))
async def msg_adm_onb_pending(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_onboarding_pending(m.bot, m.chat.id)

# ----------------- callbacks: –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é -----------------
@router.callback_query(F.data == "adm_payments")
async def cb_adm_payments(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üí≥ –ü–ª–∞—Ç–µ–∂–∏:")
    await _show_payments(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data == "adm_pay_pending")
async def cb_adm_pay_pending(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:")
    await _show_pay_requests(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data == "adm_onb_pending")
async def cb_adm_onb_pending(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è):")
    await _show_onboarding_pending(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data.startswith("stu_info:"))
async def stu_info(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    async with get_db() as db:
        cur = await db.execute("SELECT * FROM students WHERE id=?", (sid,))
        s = await cur.fetchone()
    if not s:
        await cb.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ"); return
    card = (
        "üë§ –ê–Ω–∫–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞\n"
        f"–ò–º—è: {s['first_name'] or ''} {s['last_name'] or ''}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {s['age'] or '‚Äî'} (—Ä–æ–∂–¥.: {s['birth_date'] or '‚Äî'})\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {s['phone'] or '‚Äî'}\n"
        f"–ì–∏—Ç–∞—Ä–∞: {'–µ—Å—Ç—å' if (s['has_guitar'] or 0) else '–Ω–µ—Ç'}\n"
        f"–û–ø—ã—Ç: {s['experience_months'] or 0} –º–µ—Å\n"
        f"–¶–µ–ª—å: {s['goal'] or '‚Äî'}\n"
        f"@{s['username'] or '‚Äî'} ‚Ä¢ tg_id: {s['tg_id']}\n"
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {s['created_at'] or '‚Äî'}"
    )
    await cb.message.edit_text(card)
    await cb.answer()

@router.callback_query(F.data.startswith("stu_del:"))
async def stu_del(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    ik = InlineKeyboardBuilder()
    ik.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"stu_del_go:{sid}")
    ik.button(text="–û—Ç–º–µ–Ω–∞", callback_data="adm_students")
    await cb.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ id:{sid}? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–ª–∞—Ç–µ–∂–∏.",
        reply_markup=ik.as_markup(),
    )
    await cb.answer()

@router.callback_query(F.data.startswith("stu_del_go:"))
async def stu_del_go(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    async with get_db() as db:
        await db.execute("DELETE FROM students WHERE id=?", (sid,))
        await db.commit()
    await cb.message.edit_text("–£–¥–∞–ª–µ–Ω–æ.")
    await cb.answer()

# ----- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç -----
@router.callback_query(F.data.startswith("p_ok:"))
async def p_ok(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])

    # ‚Üì‚Üì‚Üì –ù–ê–®–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1 ‚Üì‚Üì‚Üì
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    async with get_db() as db:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        cur = await db.execute("SELECT status, task_code FROM progress WHERE id=?", (pid,))
        prow = await cur.fetchone()
        if not prow:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–µ—Ä–Ω–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
            await cb.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # ... (–≤—Å—è –≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞)
        status = (prow["status"] or "")
        if status == "approved":
            await cb.message.edit_text(f"{original_text}\n\n‚úÖ –£–∂–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ.")
            await cb.answer("–£–∂–µ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ")
            return
        if status != "submitted":
            await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
            await cb.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
            return

        # –∞–ø—Ä—É–≤
        now = now_utc_str()
        await db.execute(
            "UPDATE progress SET status='approved', approved_at=?, updated_at=? WHERE id=?",
            (now, now, pid),
        )

        # —Å—Ç—É–¥–µ–Ω—Ç
        cur = await db.execute("""
            SELECT s.id AS sid, s.tg_id AS tg_id
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.id = ?
        """, (pid,))
        row = await cur.fetchone()
        if not row:
            await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        sid, tg_id = row["sid"], row["tg_id"]

        # +100 –±–∞–ª–ª–æ–≤ –∑–∞ —É—Ä–æ–∫ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
        try:
            await points.add(sid, f"lesson_approved:{pid}", 100)
        except Exception:
            pass

        # —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved'", (sid,))
        appr = (await cur.fetchone())["c"]

        bonus = None
        if appr == 8:
            bonus = ("module1_bonus:s{sid}", 500, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–¢—ã –∑–∞–∫—Ä—ã–ª 1-–π –º–æ–¥—É–ª—å ‚Äî 8 —É—Ä–æ–∫–æ–≤ üí™\n\nüéØ –ë–æ–Ω—É—Å: +500 –±–∞–ª–ª–æ–≤")
        elif appr == 16:
            bonus = ("module2_bonus:s{sid}", 500, "üèÜ –§–∏–Ω–∞–ª!\n–¢—ã –ø—Ä–æ—à—ë–ª 16 —É—Ä–æ–∫–æ–≤.\n\nüéØ –ë–æ–Ω—É—Å: +500 –±–∞–ª–ª–æ–≤\n–ë–µ–π–¥–∂: ¬´–í—ã–ø—É—Å–∫–Ω–∏–∫ Maestro¬ª üèÖ")
        if bonus:
            try:
                await points.add(sid, bonus[0], bonus[1])
            except Exception:
                pass

        await db.commit()

    # –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞–Ω–≥–∞
    total = await points.total(sid)
    async with get_db() as db:
        cur = await db.execute("SELECT rank FROM students WHERE id=?", (sid,))
        prev_rank = (await cur.fetchone())["rank"] or ""
    rank_name, next_thr = get_rank_by_points(total)

    now = now_utc_str()
    async with get_db() as db:
        if rank_name != prev_rank:
            await db.execute("UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
                             (rank_name, total, now, sid))
        else:
            await db.execute("UPDATE students SET rank_points=?, updated_at=? WHERE id=?",
                             (total, now, sid))
        await db.commit()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
    rank_up_text = (f"üèÖ –ù–æ–≤—ã–π —Ä–∞–Ω–≥: <b>{rank_name}</b>!\n–¢–≤–æ–∏ –±–∞–ª–ª—ã: <b>{total}</b>"
                    f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞: <b>{next_thr - total}</b>") if (rank_name != prev_rank and next_thr is not None) else None
    accept_text = "‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! +100 –±–∞–ª–ª–æ–≤ üéØ"
    if appr == 8 or appr == 16:
        accept_text += f"\n\n{bonus[2]}"
    accept_text += f"\n–¢–≤–æ–π —Å—á—ë—Ç: <b>{total}</b> –±–∞–ª–ª–æ–≤"
    final_text = f"{rank_up_text}\n\n{accept_text}" if rank_up_text else accept_text

    # ...
    try:  # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ try
        await cb.message.bot.send_message(tg_id, final_text)

        kb = InlineKeyboardBuilder()
        kb.button(text="üìö –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"stu:take_next:{sid}")
        kb.adjust(1)
        await cb.message.bot.send_message(tg_id, random.choice(MOTIVATION_TEXTS), reply_markup=kb.as_markup())

        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –£—á–µ–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        await cb.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ")

    except Exception as e:  # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É
        # –ï—Å–ª–∏ —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –∞–¥–º–∏–Ω—É
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É {tg_id}: {e}")
        await cb.message.edit_text(
            f"{original_text}\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. (–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
        await cb.answer("–ü—Ä–∏–Ω—è—Ç–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å", show_alert=True)


# –§–∞–π–ª: Bot/routers/admin.py

@router.callback_query(F.data.startswith("p_back:"))
async def p_back(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É...")

    async with get_db() as db:
        cur = await db.execute("SELECT status FROM progress WHERE id=?", (pid,))
        prow = await cur.fetchone()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    if not prow:
        await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
        await cb.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if prow["status"] == "returned":
        await cb.message.edit_text(f"{original_text}\n\n‚ö†Ô∏è –£–∂–µ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.")
        await cb.answer("–£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É ‚ö†Ô∏è")
        return
    if prow["status"] == "approved":
        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –†–∞–±–æ—Ç–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞.")
        await cb.answer("–†–∞–±–æ—Ç–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", show_alert=True)
        return
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à–Ω–µ–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–ª—è–µ–º
    if prow["status"] not in ("submitted", "returned"):
        await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
        await cb.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
        return

    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    async with get_db() as db:
        await db.execute("UPDATE progress SET status='returned', returned_at=?, updated_at=? WHERE id=?",
                         (now_utc_str(), now_utc_str(), pid))
        cur = await db.execute("""
            SELECT s.tg_id AS tg_id
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.id = ?
        """, (pid,))
        row = await cur.fetchone()
        await db.commit()

    if row and row["tg_id"]:
        await cb.message.bot.send_message(row["tg_id"], "‚Ü©Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ò—Å–ø—Ä–∞–≤—å –∏ —Å–¥–∞–≤–∞–π —Å–Ω–æ–≤–∞ üí™")

    # 4. –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    await cb.message.edit_text(f"{original_text}\n\n‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ. –£—á–µ–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await cb.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
# ----- –ø–ª–∞—Ç–µ–∂–∏ -----
async def _show_payments(bot: Bot, chat_id: int):
    settings = get_settings(); tz = settings.timezone
    async with get_db() as db:
        cur = await db.execute("""
            SELECT p.id, s.username, s.tg_id, p.amount, p.method, p.note, p.paid_at
            FROM payments p JOIN students s ON s.id = p.student_id
            ORDER BY COALESCE(p.paid_at,'') DESC, p.id DESC
            LIMIT 20
        """); pays = await cur.fetchall()
        cur = await db.execute("""
            SELECT pr.id, pr.amount, pr.created_at, s.username, s.tg_id
            FROM payment_requests pr JOIN students s ON s.id = pr.student_id
            WHERE pr.status='pending'
            ORDER BY pr.created_at DESC
        """); reqs = await cur.fetchall()
        cur = await db.execute("""
            SELECT COALESCE(SUM(amount),0) AS s
            FROM payments
            WHERE paid_at >= datetime('now','-30 day') || 'Z'
        """); sum30 = (await cur.fetchone())["s"]

    await bot.send_message(chat_id, f"üí≥ –ü–ª–∞—Ç–µ–∂–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)\n–ò—Ç–æ–≥–æ –∑–∞ 30 –¥–Ω–µ–π: {sum30} ‚Ç∏")

    if pays:
        lines = []
        for p in pays:
            paid = local_dt_str(p["paid_at"], tz) if p["paid_at"] else "‚Äî"
            user = p["username"] or "no_username"
            method = p["method"] or "manual"
            note = (f" ‚Ä¢ {p['note']}" if (p["note"] or "").strip() else "")
            lines.append(f"{paid} ‚Ä¢ @{user} ({p['tg_id']}) ‚Äî {p['amount']} ‚Ç∏ [{method}]{note}")
        await _send_chunked(bot, chat_id, lines)
    else:
        await bot.send_message(chat_id, "–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    if reqs:
        await bot.send_message(chat_id, "–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        for r in reqs:
            ik = InlineKeyboardBuilder()
            ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{r['tg_id']}")
            ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"adm_pay_no:{r['tg_id']}")
            ik.adjust(2)
            created = local_dt_str(r["created_at"], tz) if r["created_at"] else "‚Äî"
            await bot.send_message(
                chat_id,
                f"@{r['username'] or 'no_username'} ({r['tg_id']}) ‚Äî {r['amount']} ‚Ç∏, {created}",
                reply_markup=ik.as_markup(),
            )
    else:
        await bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")

async def _show_pay_requests(bot: Bot, chat_id: int):
    async with get_db() as db:
        cur = await db.execute("""
            SELECT pr.id, pr.amount, pr.created_at, s.username, s.tg_id
            FROM payment_requests pr JOIN students s ON s.id = pr.student_id
            WHERE pr.status='pending' ORDER BY pr.created_at ASC
        """); reqs = await cur.fetchall()
    if not reqs:
        await bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        return
    await bot.send_message(chat_id, "–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
    for r in reqs:
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{r['tg_id']}")
        ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"adm_pay_no:{r['tg_id']}")
        ik.adjust(2)
        await bot.send_message(chat_id,
            f"@{r['username'] or 'no_username'} ({r['tg_id']}) ‚Äî {r['amount']} ‚Ç∏, {r['created_at']}",
            reply_markup=ik.as_markup())

async def _show_onboarding_pending(bot: Bot, chat_id: int):
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name, created_at
            FROM students
            WHERE onboarding_done = 1 AND COALESCE(approved, 0) = 0
            ORDER BY created_at ASC
        """); rows = await cur.fetchall()
    if not rows:
        await bot.send_message(chat_id, "–ù–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return
    await bot.send_message(chat_id, "–ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:")
    for r in rows:
        card = (f"id:{r['id']} ‚Ä¢ tg_id:{r['tg_id']} @{r['username'] or '‚Äî'}\n"
                f"{r['first_name'] or ''} {r['last_name'] or ''} ‚Ä¢ {r['created_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"onb_ok:{r['id']}")
        ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"onb_rej:{r['id']}")
        ik.adjust(2)
        await bot.send_message(chat_id, card, reply_markup=ik.as_markup())

# ----- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã -----
@router.callback_query(F.data.startswith("adm_pay_ok:"))
async def adm_pay_ok(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    tg_id = int(cb.data.split(":")[1])
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ–ø–ª–∞—Ç—É...")

    settings = get_settings()

    # –Ω–∞–π–¥—ë–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        srow = await cur.fetchone()
    if not srow:
        await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
    sid = srow["id"]

    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –∞–Ω—Ç–∏–¥—É–±–ª—å
    async with get_db() as db:
        cur = await db.execute("SELECT COUNT(*) AS c FROM payments WHERE student_id=? AND COALESCE(paid_at,'')<>''", (sid,))
        paid_cnt = (await cur.fetchone())["c"]
    if paid_cnt > 0:
        await cb.answer("—Ç—ã –∂–µ –æ–ø–ª–∞—Ç–∏–ª —É–∂–µ, –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –∫—É—Ä—Å—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∞–º—è—Ç–∏) ‚úÖ", show_alert=True); return

    # –±–µ—Ä—ë–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é pending-–∑–∞—è–≤–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å), —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ—ë –∏ —Å—É–º–º—É
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, amount FROM payment_requests WHERE student_id=? AND status='pending' ORDER BY id ASC LIMIT 1",
            (sid,),
        )
        pr = await cur.fetchone()
        amount = pr["amount"] if pr else settings.payment_price
        if pr:
            await db.execute("UPDATE payment_requests SET status='confirmed', resolved_at=? WHERE id=?",
                             (now_utc_str(), pr["id"]))

        # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ
        now = now_utc_str()
        await db.execute(
            "INSERT INTO payments(student_id, amount, method, note, paid_at, created_at) VALUES(?,?,?,?,?,?)",
            (sid, amount, "manual", "confirmed by admin", now, now),
        )
        await db.commit()
        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    try:
        await cb.message.bot.send_message(tg_id,
                                          "‚úÖ –£–≥–æ–≤–æ—Ä–∏–ª, –∑–∞—Ö–æ–¥–∏, –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –∫—Å—Ç–∞—Ç–∏ :) –ñ–º–∏ ¬´üìö –ù–æ–≤—ã–π —É—Ä–æ–∫¬ª.")
    except Exception:
        pass
    await cb.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

@router.callback_query(F.data.startswith("adm_pay_no:"))
async def adm_pay_no(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    tg_id = int(cb.data.split(":")[1])

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û—Ç–∫–ª–æ–Ω—è—é –∑–∞—è–≤–∫—É...")

    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
    if not row:
        await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
    sid = row["id"]

    async with get_db() as db:
        cur = await db.execute(
            "SELECT id FROM payment_requests WHERE student_id=? AND status='pending' ORDER BY id ASC LIMIT 1",
            (sid,),
        )
        p = await cur.fetchone()
        if p:
            await db.execute("UPDATE payment_requests SET status='rejected', resolved_at=? WHERE id=?",
                             (now_utc_str(), p["id"]))
            await db.commit()
            await cb.message.edit_text(f"{original_text}\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    try:
        await cb.message.bot.send_message(tg_id, "‚ùóÔ∏è–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–∂–º–∏ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –µ—â—ë —Ä–∞–∑.")
    except Exception:
        pass
    await cb.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

# ----- –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ -----
@router.callback_query(F.data.startswith("onb_ok:"))
async def onb_ok(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return

    sid = int(cb.data.split(":")[1])
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û–¥–æ–±—Ä—è—é –∞–Ω–∫–µ—Ç—É...")

    # 1) –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –∏ –¥–æ—Å—Ç–∞—Ç—å tg_id
    async with get_db() as db:
        await db.execute("UPDATE students SET approved=1, updated_at=? WHERE id=?",
                         (now_utc_str(), sid))
        await db.commit()
        cur = await db.execute("SELECT tg_id, COALESCE(rank,'') AS rank FROM students WHERE id=?", (sid,))
        row = await cur.fetchone()

    if not row:
        await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return

    tg_id = row["tg_id"]
    prev_rank = row["rank"] or ""

    # 2) –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å +50 –∑–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –ø–æ UNIQUE(student_id, source))
    try:
        await points.add(sid, "onboarding_bonus", 50)
    except Exception:
        pass

    # 3) –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å rank/rank_points
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)
    async with get_db() as db:
        if rank_name != prev_rank:
            await db.execute(
                "UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
                (rank_name, total, now_utc_str(), sid),
            )
        else:
            await db.execute(
                "UPDATE students SET rank_points=?, updated_at=? WHERE id=?",
                (total, now_utc_str(), sid),
            )
        await db.commit()

    # 4) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await cb.message.edit_text(f"{original_text}\n\n‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    await cb.answer("–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ", show_alert=True)

    # —Å—Ç—É–¥–µ–Ω—Ç—É ‚Äî —Å—Ç–∞—Ç—É—Å, –±–∞–ª–ª—ã, —Ä–∞–Ω–≥ + –º–µ–Ω—é
    msg = f"‚úÖ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.\n–ù–∞—á–∏—Å–ª–µ–Ω–æ: +50 –±–∞–ª–ª–æ–≤.\n"
    msg += f"üèÖ –¢–≤–æ–π —Ä–∞–Ω–≥: <b>{rank_name}</b> ‚Ä¢ –ë–∞–ª–ª—ã: <b>{total}</b>"
    if next_thr is not None:
        msg += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞: <b>{next_thr - total}</b>"
    await cb.bot.send_message(tg_id, msg)
    await cb.bot.send_message(tg_id, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é üëá", reply_markup=student_main_kb())


@router.callback_query(F.data.startswith("onb_rej:"))
async def onb_rej(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    sid = int(cb.data.split(":")[1])
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û—Ç–∫–ª–æ–Ω—è—é –∞–Ω–∫–µ—Ç—É...")

    async with get_db() as db:
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ¬´–≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ¬ª: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        await db.execute(
            "UPDATE students SET approved=0, onboarding_done=0, updated_at=? WHERE id=?",
            (now_utc_str(), sid),
        )
        await db.commit()
        cur = await db.execute("SELECT tg_id FROM students WHERE id=?", (sid,))
        row = await cur.fetchone()

    await cb.message.edit_text(f"{original_text}\n\n‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await cb.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå", show_alert=True)

    if row and row["tg_id"]:
        # –º–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª ‚Äî –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π onb_go
        ik = InlineKeyboardBuilder()
        ik.button(text="üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", callback_data="onb_go")
        ik.adjust(1)
        await cb.bot.send_message(
            row["tg_id"],
            "‚ùå –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –µ—ë –∑–∞–Ω–æ–≤–æ ‚Äî –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç.",
            reply_markup=ik.as_markup(),
        )
@router.message(F.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞")
async def msg_broadcast_start(m: types.Message, state: FSMContext):
    if not _is_admin(m.from_user.id):
        return
    await state.set_state(BroadcastForm.waiting_text)
    await m.answer(
        "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã: {name}, {first_name}, {last_name}, {username}, {tg_id}.\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–ü—Ä–∏–≤–µ—Ç, {name}! –ó–∞–≤—Ç—Ä–∞ —É—Ä–æ–∫ –≤ 19:00¬ª\n\n"
        "–ù–∞–ø–∏—à–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
    )

@router.message(BroadcastForm.waiting_text, F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def msg_broadcast_cancel(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É.")

@router.message(BroadcastForm.waiting_text)
async def msg_broadcast_run(m: types.Message, state: FSMContext):
    if not _is_admin(m.from_user.id):
        return
    tpl = m.text.strip()
    if not tpl:
        await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return

    # –±–µ—Ä—ë–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name
            FROM students
            WHERE tg_id IS NOT NULL
        """)
        students = await cur.fetchall()

    ok = fail = 0
    await m.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({len(students)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)‚Ä¶")

    for s in students:
        try:
            text = render_broadcast(tpl, s)  # ‚Üê –ü–û–î–°–¢–ê–í–õ–Ø–ï–ú {name}, {first_name} –∏ —Ç.–¥.
            await m.bot.send_message(s["tg_id"], text)
            ok += 1
        except Exception:
            fail += 1
        await asyncio.sleep(0.05)

    await state.clear()
    await m.answer(f"–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}.")

@router.message(Command("db"))
async def db_health(m: types.Message):
    try:
        async with get_db() as db:
            tables = []
            for t in ("students","test_results","points"):
                try:
                    cur = await db.execute(f"SELECT COUNT(*) FROM {t}")
                    n = (await cur.fetchone())[0]
                    tables.append(f"{t}={n}")
                except Exception as e:
                    tables.append(f"{t}=ERR({e})")
        await m.answer(f"DB={DB_PATH}\n" + "\n".join(tables))
    except Exception as e:
        await m.answer(f"DB open failed: {e}")

================================================================================
FILE: Bot\routers\admin_reply.py
================================================================================
from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from bot.config import get_settings, now_utc_str
from bot.services.db import get_db

router = Router(name="admin_reply")

from aiogram.exceptions import (
    TelegramAPIError,
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNotFound,
)


class ReplyForm(StatesGroup):
    waiting_text = State()


@router.callback_query(F.data.startswith("adm_reply:"))
async def adm_reply_start(cb: types.CallbackQuery, state: FSMContext):
    # –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≥–∞—Å–∏–º –∫—Ä—É—Ç–∏–ª–∫—É
    try:
        await cb.answer()
    except Exception:
        pass

    # –ø–∞—Ä—Å–∏–º tg_id –∏–∑ callback_data
    try:
        tg_id = int(cb.data.split("adm_reply:", 1)[1])
    except Exception:
        await cb.message.answer("–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏.")
        return

    await state.set_state(ReplyForm.waiting_text)
    await state.update_data(tg_id=tg_id)
    await cb.message.answer(f"–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg_id {tg_id}).")

    # –æ—Ç–º–µ—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ 'answered'
    async with get_db() as db:
        await db.execute(
            """
            UPDATE help_requests
            SET status='answered', answered_at=?
            WHERE student_id = (SELECT id FROM students WHERE tg_id=?)
              AND status='open'
            """,
            (now_utc_str(), tg_id),
        )
        await db.commit()


@router.message(ReplyForm.waiting_text, F.text)
async def adm_reply_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("tg_id")
    if not tg_id:
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."); await state.clear(); return

    try:
        await message.bot.send_message(tg_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
    finally:
        await state.clear()

================================================================================
FILE: Bot\routers\debug.py
================================================================================
# bot/routers/debug.py
from __future__ import annotations
import logging, json
from aiogram import Router, types

router = Router(name="debug")

# 1) –õ–æ–≤–∏–º –õ–Æ–ë–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ —Ç–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã
@router.message()
async def debug_unhandled_message(message: types.Message):
    try:
        logging.warning("UNHANDLED MESSAGE: %s", message.model_dump_json())
    except Exception:
        logging.warning("UNHANDLED MESSAGE (fallback): %s", message)

# 2) –õ–æ–≤–∏–º –õ–Æ–ë–´–ï callback_query (–∫–Ω–æ–ø–∫–∏), –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ
@router.callback_query()
async def debug_unhandled_callback(cb: types.CallbackQuery):
    logging.warning("UNHANDLED CALLBACK: data=%r chat=%s from=%s",
                    cb.data, getattr(cb.message, 'chat', None), cb.from_user.id)
    await cb.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∂—É—Ä–Ω–∞–ª.", show_alert=False)

# 3) –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–∑ –ª—é–±—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ)
try:
    from aiogram.types.error_event import ErrorEvent

    @router.errors()
    async def debug_errors(event: ErrorEvent):
        logging.exception("HANDLER ERROR on update=%s", event.update, exc_info=event.exception)
        # –ú—è–≥–∫–æ —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, callback –±–µ–∑ message
        msg = getattr(event.update, "message", None)
        if isinstance(msg, types.Message):
            await msg.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –£–∂–µ —á–∏–Ω–∏–º üîß")
        # –≤–µ—Ä–Ω—É—Ç—å True/None ‚Äî —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ —Å—á–∏—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π
        return True
except Exception:
    # –ï—Å–ª–∏ –≤ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ aiogram –Ω–µ—Ç ErrorEvent ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç –±–ª–æ–∫.
    pass


================================================================================
FILE: Bot\routers\fallback.py
================================================================================
# bot/routers/fallback.py
import random
from aiogram import Router, types, F
from aiogram.filters import StateFilter
from bot.keyboards.student import student_main_kb

router = Router(name="fallback")

_fun_replies = [
    "–≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ —Å–∏–ª—å–Ω–æ... –Ω–æ –¥–∞–≤–∞–π –ø–æ –¥–µ–ª—É üòÖ",
    "–Ø –º—É–∑—ã–∫–∞–Ω—Ç - –µ–Ω–æ—Ç, –∞ –Ω–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç üôÉ",
    "–°–Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫ —Å–¥–∞–π, –ø–æ—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º üé∏",
    "–ï—Å–ª–∏ —ç—Ç–æ –∞–∫–∫–æ—Ä–¥ ‚Äî —è –µ–≥–æ –Ω–µ –∑–Ω–∞—é üòÇ",
    "–ù—É —Ç—ã –ø–æ–Ω—è–ª... –∂–º–∏ –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ —Å—é–¥–∞ –ø–∏—à–∏ üëá",
    "–ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ —É—Ä–æ–Ω–∏–ª –º–µ–¥–∏–∞—Ç–æ—Ä, –ø–æ–¥–æ–∂–¥–∏, —è –µ–≥–æ –Ω–∞–π–¥—É...",
    "–Ø –∂–µ –±–æ—Ç, –∞ –Ω–µ —Ç–≤–æ—è –±–∞–±—É—à–∫–∞ ü§®",
]

# --- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ù–ï–ü–û–ù–Ø–¢–ù–û–ì–û –¢–ï–ö–°–¢–ê ---
@router.message(StateFilter(None), F.text, ~F.text.startswith("/"))
async def unified_fallback_text(m: types.Message):
    # –û—Ç–≤–µ—á–∞–µ–º —à—É—Ç–∫–æ–π —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 35%
    if random.random() < 0.35:
        await m.answer(random.choice(_fun_replies))
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
        await m.answer("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=student_main_kb())

# --- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ù–ï–ê–ö–¢–ò–í–ù–´–• –ö–ù–û–ü–û–ö ---
@router.callback_query(StateFilter(None))
async def fallback_cb_unified(cb: types.CallbackQuery):
    # –ú—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ª–æ–≤–∏—Ç—å –í–°–ï –∫–æ–ª–±—ç–∫–∏ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
    # —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ "—Ä–∞–±–æ—á–∏–µ" –∫–æ–ª–±—ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö,
    # –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç —Ä–∞–Ω—å—à–µ –≤ main.py.
    # –≠—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ, —á–µ–º –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å –≤—Å–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã.
    await cb.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=False)

================================================================================
FILE: Bot\routers\forms.py
================================================================================
# bot/routers/forms.py
from aiogram.fsm.state import StatesGroup, State

class HelpForm(StatesGroup):
    waiting_text = State()

class SubmitForm(StatesGroup):
    waiting_work = State()

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Å—é–¥–∞
class LessonCodeForm(StatesGroup):
    waiting_code = State()

================================================================================
FILE: Bot\routers\lesson_flow.py
================================================================================
from __future__ import annotations

from pathlib import Path
from aiogram import Router, F, types, Bot
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.routers.forms import SubmitForm
from bot.services.db import get_db
from bot.services.lessons import list_t_blocks, sort_materials
from bot.keyboards.student import next_t_inline
from bot.config import get_settings, now_utc_str, local_dt_str
from bot.routers.forms import HelpForm
from aiogram import exceptions as tg_exc


import re


router = Router(name="lesson_flow")

TELEGRAM_LINK_RE = re.compile(
    r"^https?://t\.me/(?:(?P<user>[A-Za-z0-9_]+)/(?P<msg>\d+)|c/(?P<intid>\d+)/(?P<msg2>\d+))$"
)

def parse_tg_link(url: str):
    m = TELEGRAM_LINK_RE.match(url.strip())
    if not m:
        return None
    if m.group("user"):
        return ("@" + m.group("user"), int(m.group("msg")))
    return (-100 * int(m.group("intid")), int(m.group("msg2")))

# === (–ë–´–õ–û —É —Ç–µ–±—è –≤ –ø—Ä–æ–µ–∫—Ç–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–µ—Ä–∂–∏–º –∑–¥–µ—Å—å) ===
# –ö–Ω–æ–ø–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–∞—á–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def _final_submit_kb(pid: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"submit_start:{pid}")
    kb.button(text="üÜò –ü–æ–º–æ—â—å", callback_data=f"ask_help:{pid}")
    kb.button(text="üîÅ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"restart_lesson:{pid}")
    kb.adjust(1)
    return kb.as_markup()


# === NEW: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞) ===
def _resume_submit_kb(pid: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"submit_start:{pid}")   # —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–±—ç–∫
    kb.button(text="üÜò –ü–æ–º–æ—â—å", callback_data=f"ask_help:{pid}")                  # —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–±—ç–∫
    kb.button(text="üîÅ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"restart_lesson:{pid}")  # –Ω–æ–≤—ã–π –∫–æ–ª–±—ç–∫
    kb.adjust(1)
    return kb.as_markup()


def _is_video_url(url: str) -> bool:
    url = url.strip().lower()
    # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª (CDN/S3 –∏ —Ç.–ø.). –î–ª—è YouTube/TG-–ø–æ—Å—Ç–æ–≤ –≤–µ—Ä–Ω—ë—Ç False.
    VIDEO_EXTS = (".mp4", ".mov", ".m4v", ".mkv", ".avi")
    return url.startswith(("http://", "https://")) and url.split("?")[0].endswith(VIDEO_EXTS)


# === NEW: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π/–ø–æ—Å–ª–µ–¥–Ω–∏–π T-—Ä–∞–∑–¥–µ–ª —É—Ä–æ–∫–∞ –±–µ–∑ —Å–¥–≤–∏–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
async def send_current_t_view(bot: Bot, chat_id: int, progress_id: int):
    settings = get_settings()

    # 1) —á–∏—Ç–∞–µ–º progress -> lesson_code, task_code
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code, task_code FROM progress WHERE id=?",
            (progress_id,),
        )
        pr = await cur.fetchone()

    if not pr:
        await bot.send_message(chat_id, "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    lesson_code = (pr["lesson_code"] or "").strip()
    task_code = (pr["task_code"] or "").strip()

    # 2) —Å–ø–∏—Å–æ–∫ T-–±–ª–æ–∫–æ–≤
    try:
        course_code, lesson_folder = full_lesson_code.split(":", 1)
    except ValueError:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ —É—Ä–æ–∫–∞.")
        return

    # 3) –∫–∞–∫–æ–π T –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if task_code.startswith("T"):
        t_code = task_code               # –Ω–∞ —á—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    elif task_code == "DONE":
        t_code = t_list[-1]              # —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π T
    else:
        t_code = t_list[0]               # –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª ‚Üí –ø–µ—Ä–≤—ã–π T

    # 4) –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await bot.send_message(
        chat_id,
        f"üß© –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª <b>{t_code}</b> —É—Ä–æ–∫–∞ <b>{lesson_code}</b> üëá",
        parse_mode="HTML",
    )

    # 5) –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ä–∞–∑–¥–µ–ª–∞ (—Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ send_next_t_block)
    files = sort_materials(lesson_dir / t_code)
    for p in files:
        ext = p.suffix.lower()
        try:
            if ext in {".mp4", ".mov", ".m4v", ".avi", ".mkv"}:
                await bot.send_video(chat_id, video=FSInputFile(str(p)))
            elif ext in {".jpg", ".jpeg", ".png", ".webp", ".gif"}:
                await bot.send_photo(chat_id, photo=FSInputFile(str(p)))
            elif ext in {".txt", ".md"}:
                txt = p.read_text(encoding="utf-8", errors="ignore").strip()
            elif ext in {".docx", ".pdf", ".xlsx", ".pptx"}:
                await bot.send_document(chat_id, document=FSInputFile(str(p)))

                # –ï—Å–ª–∏ —ç—Ç–æ t.me-—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç ‚Äî –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
                if "\n" not in txt and " " not in txt:
                    tg = parse_tg_link(txt)
                    if tg:
                        from_chat_id, msg_id = tg
                        await bot.copy_message(chat_id=chat_id, from_chat_id=from_chat_id, message_id=msg_id)
                        continue
                    else:
                        await bot.send_message(chat_id, f"üì∫ –í–∏–¥–µ–æ: {txt}")
                else:
                    if len(txt) > 4000:
                        txt = txt[:3900] + "...\n(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
                    await bot.send_message(chat_id, txt)
            else:
                await bot.send_document(chat_id, document=FSInputFile(str(p)))
        except Exception as e:
            await bot.send_message(chat_id, f"(–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {p.name}: {e})")

    # 6) –¥–µ–π—Å—Ç–≤–∏—è: –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å/–ø–æ–º–æ—â—å/—Ä–µ—Å—Ç–∞—Ä—Ç
    await bot.send_message(
        chat_id,
        "–ì–æ—Ç–æ–≤ —Å–¥–∞–≤–∞—Ç—å ‚Äî –∂–º–∏ ¬´üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–∞–±–æ—Ç—É¬ª. –ó–∞–ø—É—Ç–∞–ª—Å—è ‚Äî ¬´üÜò –ü–æ–º–æ—â—å¬ª. "
        "–ù—É–∂–Ω–æ —Å –Ω—É–ª—è ‚Äî ¬´üîÅ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ¬ª.",
        reply_markup=_resume_submit_kb(progress_id),
    )


async def send_next_t_block(bot: Bot, chat_id: int, progress_id: int, first: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–õ–ï–î–£–Æ–©–ò–ô T-–±–ª–æ–∫ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É.
    –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –ø–æ–º–µ—á–∞–µ—Ç DONE –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è bot-–∏–Ω—Å—Ç–∞–Ω—Å (–Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π).
    """
    settings = get_settings()

    # 1) –î–æ—Å—Ç–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    async with get_db() as db:
        cur = await db.execute(
            """
            SELECT p.id, p.student_id, p.lesson_code, p.task_code, p.deadline_at
            FROM progress p
            WHERE p.id=?
            """,
            (progress_id,),
        )
        pr = await cur.fetchone()

    if not pr:
        await bot.send_message(chat_id, "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # ...
    full_lesson_code: str = pr["lesson_code"]
    task_code: str | None = pr["task_code"]

    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —É—Ä–æ–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏ >>>
    try:
        course_code, lesson_folder = full_lesson_code.split(":", 1)
    except ValueError:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ —É—Ä–æ–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –°—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —É—Ä–æ–∫–æ–º
    lesson_dir = settings.lessons_path / course_code / lesson_folder

    # 2) –°–ø–∏—Å–æ–∫ T-–±–ª–æ–∫–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞
    t_list = list_t_blocks(lesson_dir)
    if not t_list:
        await bot.send_message(chat_id, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # 3) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ T
    if task_code and task_code.startswith("T"):
        try:
            current_idx = t_list.index(task_code)
        except ValueError:
            current_idx = -1
    else:
        # –µ—â—ë –Ω–µ –±—ã–ª–æ T ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
        current_idx = -1

    next_idx = current_idx + 1

    # 4) –ï—Å–ª–∏ next_idx –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Äî —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Å–µ T —É–∂–µ –≤—ã–¥–∞–Ω—ã (–ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    if next_idx >= len(t_list):
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥—É–±–ª–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        async with get_db() as db:
            await db.execute(
                "UPDATE progress SET task_code='DONE', updated_at=? WHERE id=?",
                (now_utc_str(), progress_id),
            )
            await db.commit()

        dl = local_dt_str(pr["deadline_at"], settings.timezone) if pr["deadline_at"] else "‚Äî"
        await bot.send_message(
            chat_id,
            f"–£—Ä–æ–∫ –≥–æ—Ç–æ–≤ ‚úÖ\n–î–µ–¥–ª–∞–π–Ω: <b>{dl}</b>\nüéØ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—à—å: <b>100 –±–∞–ª–ª–æ–≤</b>\n\n"
            f"–°–¥–∞–π —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=_final_submit_kb(progress_id),
        )
        return

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¢–ï–ö–£–©–ï–ì–û next T-–±–ª–æ–∫–∞
    t_code = t_list[next_idx]
    t_dir = lesson_dir / t_code
    files = sort_materials(t_dir)

    if first:
        await bot.send_message(
            chat_id,
            f"üé∏ –£—Ä–æ–∫ <b>{lesson_code}</b>. –ó–∞–¥–∞–Ω–∏–µ <b>{t_code}</b>\n–°–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ üëá",
        )
    else:
        await bot.send_message(chat_id, f"–ó–∞–¥–∞–Ω–∏–µ <b>{t_code}</b> üëá")

    for p in files:
        ext = p.suffix.lower()
        try:
            if ext in {".mp4", ".mov", ".m4v", ".avi", ".mkv"}:
                await bot.send_video(chat_id, video=FSInputFile(str(p)))
            elif ext in {".jpg", ".jpeg", ".png", ".webp", ".gif"}:
                await bot.send_photo(chat_id, photo=FSInputFile(str(p)))
            elif ext in {".txt", ".md"}:
                txt = p.read_text(encoding="utf-8", errors="ignore").strip()

                # 1) –ï—Å–ª–∏ —ç—Ç–æ t.me-—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç ‚Üí –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∏–¥–µ–æ/–ø–æ—Å—Ç –ø—Ä–∏–¥—ë—Ç –∫–∞–∫ –µ—Å—Ç—å)
                if "\n" not in txt and " " not in txt:
                    tg = parse_tg_link(txt)
                    if tg:
                        from_chat_id, msg_id = tg
                        await bot.copy_message(chat_id=chat_id, from_chat_id=from_chat_id, message_id=msg_id)
                        continue

                # 2) –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª-–≤–∏–¥–µ–æ (mp4/mov/‚Ä¶) ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                if "\n" not in txt and " " not in txt and txt.lower().startswith(("http://", "https://")):
                    if txt.split("?")[0].lower().endswith((".mp4", ".mov", ".m4v", ".mkv", ".avi")):
                        await bot.send_video(chat_id, video=txt)
                    else:
                        # –ø—Ä–æ—á–∏–µ URL ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)
                        await bot.send_message(chat_id, f"üì∫ –í–∏–¥–µ–æ: {txt}")
                else:
                    # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                    if len(txt) > 4000:
                        txt = txt[:3900] + "...\n(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
                    await bot.send_message(chat_id, txt)

            else:
                await bot.send_document(chat_id, document=FSInputFile(str(p)))
        except Exception as e:
            await bot.send_message(chat_id, f"(–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {p.name}: {e})")

    # 6) –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ?
    has_next = (next_idx + 1) < len(t_list)

    if has_next:
        # –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø–µ—Ä–µ—Ö–æ–¥ –∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π T
        await bot.send_message(
            chat_id,
            "–ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É?",
            reply_markup=next_t_inline(progress_id, has_next=True),
        )
        async with get_db() as db:
            await db.execute(
                "UPDATE progress SET task_code=?, updated_at=? WHERE id=?",
                (t_code, now_utc_str(), progress_id),
            )
            await db.commit()
    else:
        # –≠—Ç–æ –±—ã–ª –ü–û–°–õ–ï–î–ù–ò–ô –±–ª–æ–∫ ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–æ—Å–∏–º —Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É
        async with get_db() as db:
            await db.execute(
                "UPDATE progress SET task_code='DONE', updated_at=? WHERE id=?",
                (now_utc_str(), progress_id),
            )
            await db.commit()

        dl = local_dt_str(pr["deadline_at"], settings.timezone) if pr["deadline_at"] else "‚Äî"
        await bot.send_message(
            chat_id,
            f"‚úÖ –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω \n–î–µ–¥–ª–∞–π–Ω: <b>{dl}</b>\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫.",
            reply_markup=_final_submit_kb(progress_id),
        )


@router.callback_query(F.data.startswith("next_t:"))
async def cb_next_t(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])
    await cb.answer()

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ

    await send_next_t_block(cb.message.bot, cb.message.chat.id, pid, first=False)


# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SubmitForm –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ forms.py
# from bot.routers.forms import SubmitForm

@router.callback_query(F.data.startswith("submit_start:"))
async def cb_submit_start(cb: types.CallbackQuery, state: FSMContext): # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ state
    pid = int(cb.data.split(":")[1])
    async with get_db() as db:
        await db.execute(
            "UPDATE progress SET status='sent', updated_at=? WHERE id=?",
            (now_utc_str(), pid),
        )
        await db.commit()

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    await state.set_state(SubmitForm.waiting_work)
    await state.update_data(progress_id=pid) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞

    await cb.answer()
    await cb.message.answer(
        "–ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–æ–º ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
    )

@router.callback_query(F.data.startswith("ask_help:"))
async def cb_ask_help(cb: types.CallbackQuery, state: FSMContext):
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —É—á–µ–Ω–∏–∫–∞ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(HelpForm.waiting_text)
    await cb.message.answer("–û–ø–∏—à–∏, —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∞–º.")
    await cb.answer()


# === NEW: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–∫–∞ —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º task_code –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–µ–π –ø–µ—Ä–≤–æ–≥–æ T ===
@router.callback_query(F.data.startswith("restart_lesson:"))
async def cb_restart_lesson(cb: types.CallbackQuery):
    try:
        pid = int(cb.data.split(":")[1])
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.", show_alert=True)
        return

    async with get_db() as db:
        await db.execute(
            "UPDATE progress SET task_code=NULL, status='sent', updated_at=? WHERE id=?",
            (now_utc_str(), pid),
        )
        await db.commit()

    await cb.answer("–£—Ä–æ–∫ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ.")
    # –≤—ã–¥–∞—ë–º –ø–µ—Ä–≤—ã–π T-–±–ª–æ–∫ —à—Ç–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    await send_next_t_block(cb.message.bot, cb.message.chat.id, pid, first=True)



================================================================================
FILE: Bot\routers\onboarding.py
================================================================================
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboards.student import student_main_kb
from bot.config import get_settings, now_utc_str
from bot.services.db import get_db
from bot.services import points

from bot.keyboards.admin import admin_main_reply_kb
from aiogram.types import ReplyKeyboardRemove
from logging import getLogger
logger = getLogger("maestro")



router = Router(name="onboarding")


class Onb(StatesGroup):
    waiting_start = State()
    first_name = State()
    last_name = State()
    birth_or_age = State()
    has_guitar = State()
    experience = State()
    goal = State()
    phone = State()
    rules = State()
    confirm = State()


WELCOME_TEXT = (
     "ü¶ù <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ</b>, –µ–Ω–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –≥–∏—Ç–∞—Ä–µ.\n"
    "–ó–¥–µ—Å—å –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏, –∑–∞–¥–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
    "–ê –º–æ–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏ ‚Äî –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¥–æ–º–∞—à–∫–∏ –∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –ì–æ—Ç–æ–≤?\n"
    "–ñ–º–∏ ¬´–ü–æ–≥–Ω–∞–ª–∏¬ª!"
)


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    settings = get_settings()

    # upsert student
    async with get_db() as db:
        await db.execute(
            "INSERT INTO students(tg_id, username, created_at, last_seen) "
            "VALUES(?,?,?,?) "
            "ON CONFLICT(tg_id) DO UPDATE SET "
            "username=excluded.username, last_seen=excluded.last_seen",
            (
                message.from_user.id,
                (message.from_user.username or ""),
                now_utc_str(),
                now_utc_str(),
            ),
        )
        await db.commit()


        # check admin
        if message.from_user.id in settings.admin_ids:
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_main_reply_kb())
            return

        # check onboarding_done
        cur = await db.execute(
            "SELECT onboarding_done, approved FROM students WHERE tg_id=?",
            (message.from_user.id,),
        )
        row = await cur.fetchone()
        if row and row["onboarding_done"]:
            if row["approved"]:
                await message.answer("–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é üëá", reply_markup=student_main_kb())
            else:
                await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –ú–æ–∏ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã —É–∂–µ –µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç, –ø–æ–¥–æ–∂–¥–¥–∏ –Ω–µ–º–Ω–æ–≥–æ")
            return

    # start onboarding
    ib = InlineKeyboardBuilder()
    ib.button(text="üëâ –ü–æ–≥–Ω–∞–ª–∏", callback_data="onb_go")
    ib.button(text="‚ÑπÔ∏è –ö—Ç–æ —Ç–∞–∫–∏–µ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã?", callback_data="about_maestroffs")
    await message.answer(WELCOME_TEXT, reply_markup=ib.as_markup())
    await state.set_state(Onb.waiting_start)

@router.callback_query(F.data == "about_maestroffs")
async def cb_about_maestroffs(cb: types.CallbackQuery):
    txt = (
        "ü¶ù –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–∞.\n"
        "–û–Ω–∏:\n"
        "‚Ä¢ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Ç–≤–æ—é –¥–æ–º–∞—à–∫—É –∏ –¥–∞—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏;\n"
        "‚Ä¢ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ ¬´–ü–æ–º–æ—â–∏¬ª;\n"
        "‚Ä¢ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—à–∫–∏.\n\n"
        "–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–µ—à—å—Å—è ‚Äî –∂–º–∏ ¬´üÜò –ü–æ–º–æ—â—å¬ª –≤ —É—Ä–æ–∫–µ, –æ–¥–∏–Ω –∏–∑ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–æ–≤ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è."
    )
    ib = InlineKeyboardBuilder()
    ib.button(text="üëâ –ü–æ–≥–Ω–∞–ª–∏", callback_data="onb_go")
    await cb.answer()
    await cb.message.answer(txt)


@router.callback_query(F.data == "onb_go")
async def onb_go(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (—Ç–æ–ª—å–∫–æ –∏–º—è)")
    await state.set_state(Onb.first_name)
    await cb.answer()


@router.message(Onb.first_name)
async def onb_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=(message.text or "").strip())
    await message.answer("–ö–ª–∞—Å—Å! –•–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤—å —Ñ–∞–º–∏–ª–∏—é (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´-¬ª)")
    await state.set_state(Onb.last_name)


@router.message(Onb.last_name)
async def onb_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=(message.text or "").strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12)")
    await state.set_state(Onb.birth_or_age)


@router.message(Onb.birth_or_age)
async def onb_birth(message: types.Message, state: FSMContext):
    await state.update_data(birth_or_age=(message.text or "").strip())
    kb = InlineKeyboardBuilder()
    kb.button(text="üé∏ –ï—Å—Ç—å", callback_data="g_has:1")
    kb.button(text="–ü–æ–∫–∞ –Ω–µ—Ç, –ø–ª–∞–Ω–∏—Ä—É—é", callback_data="g_has:0")
    kb.adjust(1)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≥–∏—Ç–∞—Ä–∞? üé∏", reply_markup=kb.as_markup())
    await state.set_state(Onb.has_guitar)


@router.callback_query(Onb.has_guitar, F.data.startswith("g_has:"))
async def onb_has_guitar(cb: types.CallbackQuery, state: FSMContext):
    has = int(cb.data.split(":")[1])
    await state.update_data(has_guitar=has)
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —É–∂–µ –∏–≥—Ä–∞–µ—à—å? (–º–æ–∂–Ω–æ 0)")
    await state.set_state(Onb.experience)
    await cb.answer()


@router.message(Onb.experience)
async def onb_experience(message: types.Message, state: FSMContext):
    txt = (message.text or "").strip()
    try:
        exp = int("".join(ch for ch in txt if (ch.isdigit() or ch == "-")))
    except Exception:
        exp = 0
    await state.update_data(experience_months=max(0, exp))
    await message.answer("–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –∑–∞ 1-3 –º–µ—Å—è—Ü–∞ ")
    await state.set_state(Onb.goal)


@router.message(Onb.goal)
async def onb_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=(message.text or "").strip())
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7 ‚Ä¶)")
    await state.set_state(Onb.phone)


@router.message(Onb.phone)
async def onb_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=(message.text or "").strip())
    rules = (
        "üìú –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ —Å—Ä–æ–∫;\n"
        "‚Äî —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–∞–µ–º—Å—è;\n"
        "‚Äî –∫–∞–π—Ñ—É–µ–º –æ—Ç –º—É–∑—ã–∫–∏ üé∂\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, –∏ –ø–æ–ª–µ—Ç–µ–ª–∏!\n"
        "_ –ù–∞–º –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É, –±—É–∫–≤–∞–ª—å–Ω–æ 2-5 –º–∏–Ω—É—Ç –∏ –æ—Ç–∫—Ä–æ–µ–º –¥–æ—Å—Ç—É–ø"
    )

    ib = InlineKeyboardBuilder()
    ib.button(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data="rules_ok")
    await message.answer(rules, reply_markup=ib.as_markup())
    await state.set_state(Onb.rules)


@router.callback_query(Onb.rules, F.data == "rules_ok")
async def onb_rules_ok(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # persist
    async with get_db() as db:
        # parse age / birth_date
        age = None
        birth_date = None
        txt = (data.get("birth_or_age") or "").strip()
        if txt.isdigit():
            age = int(txt)
        else:
            birth_date = txt or None

        await db.execute(
            "UPDATE students SET first_name=?, last_name=?, birth_date=?, age=?, has_guitar=?, "
            "experience_months=?, goal=?, phone=?, onboarding_done=1, consent=1, last_seen=? "
            "WHERE tg_id=?",
            (
                data.get("first_name"),
                data.get("last_name"),
                birth_date,
                age,
                int(data.get("has_guitar") or 0),
                int(data.get("experience_months") or 0),
                data.get("goal"),
                data.get("phone"),
                now_utc_str(),
                cb.from_user.id,
            ),
        )
        await db.commit()

        # Fetch student id
        cur = await db.execute(
            "SELECT id FROM students WHERE tg_id=?", (cb.from_user.id,)
        )
        row = await cur.fetchone()
        student_id = row["id"] if row else None

        # award onboarding bonus (+50), idempotent via UNIQUE(student_id, source)
        # +50 –∑–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
        if student_id:
            try:
                await points.add(student_id, "onboarding_bonus", 50)
            except Exception:
                pass

        # --- –†–∞—Å—Å—á—ë—Ç —Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ --- #
        #total = await points.total(student_id)
        #rank_name, next_thr = get_rank_by_points(total)

        #async with get_db() as db:
         #   await db.execute(
          #      "UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
           #     (rank_name, total, now_utc_str(), student_id),
            #)
            #await db.commit()

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ —Ä–∞–Ω–≥
            #msg = f"üèÖ –¢–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞–Ω–≥: <b>{rank_name}</b>\n–ë–∞–ª–ª—ã: <b>{total}</b>"
           # if next_thr is not None:
           #     msg += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: <b>{next_thr - total}</b>"
          #  await cb.message.answer(msg)



    await cb.message.answer(
        "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã –¥–∞–¥–∏–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()
    # (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ onb_ok/onb_rej ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)

    # Notify admins
    settings = get_settings()
    if settings.admin_ids:
        card = (
            "üÜï –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞\n"
            f"–ò–º—è: {data.get('first_name','')} {data.get('last_name','')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç/—Ä–æ–∂–¥.: {data.get('birth_or_age','')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}\n"
            f"–ì–∏—Ç–∞—Ä–∞: {'–µ—Å—Ç—å' if int(data.get('has_guitar') or 0) else '–Ω–µ—Ç'}\n"
            f"–û–ø—ã—Ç: {int(data.get('experience_months') or 0)} –º–µ—Å\n"
            f"–¶–µ–ª—å: {data.get('goal','')}\n"
            f"@{cb.from_user.username or 'no_username'} ‚Ä¢ tg_id: {cb.from_user.id}\n"
        )
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
        for admin_id in settings.admin_ids:
            try:
                ik = InlineKeyboardBuilder()

                ik.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"onb_ok:{student_id}")
                ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"onb_rej:{student_id}")
                ik.adjust(2)
                await cb.bot.send_message(admin_id, card, reply_markup=ik.as_markup())
            except Exception:
                pass

================================================================================
FILE: Bot\routers\student.py
================================================================================
from __future__ import annotations

import os
import random

from pathlib import Path

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.routers.lesson_flow import send_next_t_block

from bot.keyboards.student import student_main_kb, payment_inline, next_t_inline
from bot.config import get_settings, now_utc_str, local_dt_str
from bot.services.lessons import (
    list_l_lessons,
    next_l_after,
    list_t_blocks,
    sort_materials,
    parse_l_num,
)

from bot.services.lessons import list_l_lessons
from bot.config import get_course
from bot.services.admin_cards import render_submission_card
from bot.services import points
from bot.services.ranks import get_rank_by_points
from bot.routers.forms import HelpForm, SubmitForm, LessonCodeForm # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï

from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from bot.services.admin_cards import help_reply_kb
from aiogram import Router , types, F, Bot
from bot.services.db import get_db
from aiogram.types import FSInputFile
from aiogram.filters import StateFilter
from bot.keyboards.student import student_main_kb
from bot.config import COURSES

router = Router(name="student")


def _cancel_kb() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞")
    return kb.as_markup(resize_keyboard=True)


KNOWN_BUTTONS = {
    "üìö –ù–æ–≤—ã–π —É—Ä–æ–∫", "üîë –£—Ä–æ–∫ –ø–æ –∫–æ–¥—É", "‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", "üÜò –ü–æ–º–æ—â—å",
    "üèÖ –ú–æ–π —Ä–∞–Ω–≥", "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ", "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
}


async def _submit_active(message: types.Message) -> bool:
    """–ü–æ–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ submitted –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∞–¥–º–∏–Ω–∞–º + –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # 1) –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    async with get_db() as db:
        cur = await db.execute(
            "SELECT s.id as sid, p.id as pid FROM students s "
            "LEFT JOIN progress p ON p.student_id=s.id AND p.status IN ('sent','returned','submitted') "
            "WHERE s.tg_id=?",
            (message.from_user.id,),
        )
        row = await cur.fetchone()
        if not row or row["pid"] is None:
            return False  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä

        pid = row["pid"]

        # 2) –æ—Ç–º–µ—Ç–∏—Ç—å submitted
        now = now_utc_str()
        await db.execute(
            "UPDATE progress SET status='submitted', submitted_at=?, updated_at=? WHERE id=?",
            (now, now, pid),
        )
        await db.commit()

        # 3) –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code, task_code, submitted_at FROM progress WHERE id=?",
            (pid,),
        )
        prow = await cur.fetchone()

    from bot.services.admin_cards import render_submission_card
    settings = get_settings()

    card_text, kb = render_submission_card(
        pid,
        message.from_user,
        lesson_code=prow["lesson_code"],
        task_code=prow["task_code"],
        submitted_at_utc=prow["submitted_at"],
    )

    # –ö–∞—Ä—Ç–æ—á–∫–∞ + –∫–æ–ø–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
    for admin_id in settings.admin_ids:
        try:
            await message.bot.send_message(admin_id, card_text, reply_markup=kb)
            await message.copy_to(admin_id)
        except Exception:
            pass

    # 5) –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É
    await message.answer("–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ –ø–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å")
    return True

# bot/routers/student.py

# ... (–∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞) ...
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç:


# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ú–ï–ù–Æ –ö–£–†–°–û–í >>>
@router.message(F.text == "üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è")
async def training_program_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Inline-–∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞."""
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:")

    kb = InlineKeyboardBuilder()
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–∞—à–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –∫—É—Ä—Å–æ–≤ –∏–∑ config.py
    for course_code, course in COURSES.items():
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        kb.button(text=course.title, callback_data=f"show_course:{course_code}")

    kb.adjust(1) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ

    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
        reply_markup=kb.as_markup()
    )

# --- —Å–¥–∞—á–∞ –ú–ï–î–ò–ê (–≤–Ω–µ FSM –ø–æ–º–æ—â–∏ –∏ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏) ---
@router.message(
    StateFilter(None),
    F.content_type.in_({"photo", "video", "document"})
)
async def handle_submission_media(message: types.Message):
    await _submit_active(message)



@router.callback_query(F.data == "tests:back")
async def tests_back(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤
    kb = student_main_kb() if callable(student_main_kb) else student_main_kb
    await cb.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    await cb.answer()



@router.message(Command("myid", "my_id"))
async def cmd_myid(message: types.Message):
    await _get_or_create_student(message.from_user.id, message.from_user.username)
    await message.answer(f"–¢–≤–æ–π tg_id: <code>{message.from_user.id}</code>")


# ====== Main menu buttons ======
@router.message(F.text == "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ")
async def about_course(message: types.Message):
    txt = (
        "üé∂ <b>–û –∫—É—Ä—Å–µ</b>\n\n"
        "–£ —Ç–µ–±—è –≤–ø–µ—Ä–µ–¥–∏ <b>16 —É—Ä–æ–∫–æ–≤ 1- –æ–≥–æ –º–æ–¥—É–ª—è</b>, –≥–¥–µ —Ç—ã —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –æ—Å–≤–æ–∏—à—å:\n"
        "‚Äî –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –ø–µ—Å–Ω–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏,\n‚Äî —á–∏—Ç–∞—Ç—å —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã,\n‚Äî –∏–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏–∏,\n"
        "‚Äî –∫–∞–∫ —Å–æ–µ–¥–∏–Ω—è—Ç—å –∞–∫–∫–æ—Ä–¥—ã, –≥–æ–ª–æ—Å –∏ –±–æ–π,\n‚Äî –ø–æ–Ω–∏–º–∞—Ç—å –æ—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏.\n\n"
        "–ê –µ—â—ë —Ç–µ–±—è –∂–¥—É—Ç <b>—É—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É</b> ‚Äî —Ä–∞–∑–±–æ—Ä—ã —Ö–∏—Ç–æ–≤ üé∏\n\n"
        "üëâ –ü—Ä–æ–π–¥–∏ –ø–µ—Ä–≤—ã–µ 3 —É—Ä–æ–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≥–∏—Ç–∞—Ä–∞ –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è!\n\n"
        "üìû –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∑–≤–æ–Ω–∏: <b>+7 777 505 5788</b>"
    )
    await message.answer(txt)

@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def btn_help(message: types.Message, state: FSMContext):
    await state.set_state(HelpForm.waiting_text)
    await message.answer("üÜò –¢—ã –Ω–∞–∂–∞–ª SOS\n"
    "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Å—Ç—Ä–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç"
)

@router.message(HelpForm.waiting_text, F.text)
async def handle_help_text(message: types.Message, state: FSMContext):
    settings = get_settings()

    # 1) –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ (–±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ full_name)
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, first_name, last_name, username FROM students WHERE tg_id=?",
            (message.from_user.id,)
        )
        srow = await cur.fetchone()

    if not srow:
        await state.clear()
        await message.answer("–£–ø—Å, –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ, –ù–∞–∂–º–∏ /start")
        return

    student_id = srow["id"]
    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    fn = (srow["first_name"] or "").strip()
    ln = (srow["last_name"] or "").strip()
    display_name = (f"{fn} {ln}".strip()
                    or (f"@{srow['username']}" if srow["username"] else "")
                    or message.from_user.full_name
                    or f"id {message.from_user.id}")

    # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –û–¢–ö–†–´–¢–û–ô –∑–∞—è–≤–∫–∏
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id FROM help_requests WHERE student_id=? AND status='open' LIMIT 1",
            (student_id,),
        )
        exists = await cur.fetchone()

    if exists:
        await state.clear()
        await message.answer("–¢–∞–∫-—Å —Ç–∞–∫—Å-, –¥–∞–≤–∞–π –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á—É - —Å–º–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å üôå")
        return

    # 3) —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ help_requests
    now = now_utc_str()
    async with get_db() as db:
        await db.execute(
            "INSERT INTO help_requests (student_id, status, created_at) VALUES (?,?,?)",
            (student_id, "open", now),
        )
        await db.commit()

    # 4) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    username = f"@{message.from_user.username}" if message.from_user.username else f"id {message.from_user.id}"
    card = (
        "üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏\n"
        f"{display_name} ({username})\n\n"
        f"{message.text}"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"adm_reply:{message.from_user.id}")
    kb.adjust(1)
    for admin_id in settings.admin_ids:
        try:
            await message.bot.send_message(admin_id, card, reply_markup=kb.as_markup())
        except Exception:
            pass

    await state.clear()
    await message.answer("–ü–µ—Ä–µ–¥–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥—è—Ç—Å—è —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç—è—Ç ( –æ–±—ã—á–Ω–æ 1-5 –º–∏–Ω—É—Ç—ã üëå")

@router.message(F.text == "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def my_progress(message: types.Message):
    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –ù–∞–∂–º–∏ /start")
        return
    sid = row["id"]

    # –æ—á–∫–∏ –∏ —Ä–∞–Ω–≥
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)

    # —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved'",
            (sid,),
        )
        lessons = (await cur.fetchone())["c"]

    txt = (
        f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"‚Ä¢ –£—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ: <b>{lessons}</b>\n"
        f"‚Ä¢ –ë–∞–ª–ª—ã: <b>{total}</b>\n"
        f"‚Ä¢ –†–∞–Ω–≥: <b>{rank_name}</b>"
    )
    if next_thr is not None:
        txt += f"\n‚Ä¢ üî• –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{next_thr - total}</b> –æ—á–∫–æ–≤!"

    await message.answer(txt)

@router.message(F.text == "üèÖ –ú–æ–π —Ä–∞–Ω–≥")
async def my_rank(message: types.Message):
    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ tg_id
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()

    if not row:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ /start")
        return

    sid = row["id"]

    # —Å—É–º–º–∞—Ä–Ω—ã–µ –±–∞–ª–ª—ã –∏ —Ä–∞–Ω–≥
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)

    txt = f"üèÖ –¢–≤–æ–π —Ä–∞–Ω–≥: <b>{rank_name}</b>\nüéØ –ë–∞–ª–ª—ã: <b>{total}</b>"
    if next_thr is not None:
        txt += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: <b>{next_thr - total}</b>"

    await message.answer(txt)

@router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")
async def pay(message: types.Message):
    settings = get_settings()
    await _get_or_create_student(message.from_user.id, message.from_user.username)
    txt = (
        "üé∂ üé∂ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
        f"–ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å üòÖ\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∑–∞ <b>4999</b> (—ç—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –ø–∞—Ä–∞ –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ ‚òïÔ∏è)"
    )
    # Check if already has confirmed payment
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM payments p JOIN students s ON s.id=p.student_id WHERE s.tg_id=?",
            (message.from_user.id,),
        )
        r = await cur.fetchone()
        if r and r["c"] > 0:
            await message.answer("–£–≥–æ–≤–æ—Ä–∏–ª, –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å ‚úÖ", reply_markup=student_main_kb())
            return

        # Check pending request
        cur = await db.execute(
            "SELECT pr.id FROM payment_requests pr JOIN students s ON s.id=pr.student_id "
            "WHERE s.tg_id=? AND pr.status='pending'",
            (message.from_user.id,),
        )
        pend = await cur.fetchone()
        include_button = True
        if pend:
            include_button = False
            txt += "\n\n–í–∞—É, —Å–ø–∞—Å–∏–±–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —è –¥–æ–π–¥—É –¥–æ —Ç–≤–æ–µ–π –æ–ø–ª–∞—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úÖ"

    await message.answer(
        txt,
        reply_markup=payment_inline(
            settings.payment_link, include_i_paid=include_button, student_id=message.from_user.id
        ),
    )


@router.callback_query(F.data.startswith("paid_ipaid:"))
async def cb_paid_paid(cb: types.CallbackQuery):
    try:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–¥–æ–º –∫—É—Ä—Å–∞ >>>
        _, course_code, tg_id_str = cb.data.split(":")
        tg_id = int(tg_id_str)
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    if cb.from_user.id != tg_id:
        await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞", show_alert=True)
        return

    course = get_course(course_code)
    if not course:
        await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    settings = get_settings()
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        r = await cur.fetchone()
        if not r:
            await cb.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        sid = r["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ –≠–¢–û–¢ –∫—É—Ä—Å
        cur = await db.execute("SELECT 1 FROM payments WHERE student_id=? AND course_code=?", (sid, course_code))
        if await cur.fetchone():
            await cb.answer("–≠—Ç–æ—Ç –∫—É—Ä—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω ‚úÖ", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞
        await db.execute(
            "INSERT INTO payment_requests(student_id, amount, status, course_code, created_at) VALUES(?,?,?,?,?)",
            (sid, course.price, 'pending', course.code, now_utc_str()),
        )
        await db.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    card = (
        f"üí≥ <b>–ó–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª</b>\n"
        f"–£—á–µ–Ω–∏–∫: @{cb.from_user.username or 'no_username'} (id {cb.from_user.id})\n"
        f"–°—É–º–º–∞: {course.price} ‚Ç∏"
    )
    ik = InlineKeyboardBuilder()
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º tg_id –∏ course_code >>>
    ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{course.code}:{tg_id}")
    ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"adm_pay_no:{course.code}:{tg_id}")
    ik.adjust(1)
    for admin_id in settings.admin_ids:
        try:
            await cb.bot.send_message(admin_id, card, reply_markup=ik.as_markup())
        except Exception:
            pass

    await cb.message.edit_text(cb.message.text + "\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    await cb.answer()

    await cb.message.edit_text(cb.message.text + "\n\n–î–∞-–î–∞, –≤–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é —â–µ–¥—Ä—ã–π —á–µ–ª–æ–≤–µ–∫, —Å–µ–∫—É–Ω–¥—É, –º–Ω–µ –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å  ‚úÖ")
    await cb.answer()


# ‚¨áÔ∏è –ö–ù–û–ü–ö–ê –ú–ï–ù–Æ ¬´üìö –ù–æ–≤—ã–π —É—Ä–æ–∫¬ª ‚Äî —Ç–æ–Ω–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞
async def _issue_new_lesson(bot: Bot, tg_id: int, chat_id: int, course_code: str) -> None:
    settings = get_settings()
    course = get_course(course_code)
    if not course:
        await bot.send_message(chat_id, "–¢–∞–∫–æ–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    async with get_db() as db:
        # 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        cur = await db.execute("SELECT id, approved FROM students WHERE tg_id=?", (tg_id,))
        s = await cur.fetchone()
        if not s or not s["approved"]:
            await bot.send_message(chat_id, "‚è≥ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –µ—â–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
            return
        sid = s["id"]

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ª—é–±–æ–µ)
        cur = await db.execute(
            "SELECT id FROM progress WHERE student_id=? AND status IN ('sent','returned','submitted')", (sid,))
        if await cur.fetchone():
            await bot.send_message(chat_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–¥–∞–π –µ–≥–æ.")
            return

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏ –æ–ø–ª–∞—Ç—É –¥–ª—è –≠–¢–û–ì–û –∫—É—Ä—Å–∞
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:%")
        )
        approved_cnt = (await cur.fetchone())["c"]

        cur = await db.execute("SELECT 1 FROM payments WHERE student_id=? AND course_code=?", (sid, course_code))
        is_paid = await cur.fetchone()

        if approved_cnt >= course.free_lessons and not is_paid:
            payment_text = (
                f"üö´ –î–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —É—Ä–æ–∫–∞–º –∫—É—Ä—Å–∞ ¬´{course.title}¬ª –ø–ª–∞—Ç–Ω—ã–π.\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞: {course.price} ‚Ç∏.\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            await bot.send_message(
                chat_id,
                payment_text,
                reply_markup=payment_inline(
                    payment_link=settings.payment_link,
                    course_code_to_pay=course_code,
                    student_id=tg_id
                ),
            )
            return

        # 4. –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        course_path = settings.lessons_path / course.code
        cur = await db.execute(
            "SELECT lesson_code FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:L%")
        )
        rows = await cur.fetchall()
        last_num = 0
        for r in rows:
            l_code = (r["lesson_code"] or "").split(":")[-1]
            n = parse_l_num(l_code)
            if n and n > last_num:
                last_num = n

        next_lesson_folder = next_l_after(course_path, last_num)

        if not next_lesson_folder:
            await bot.send_message(chat_id,
                                   f"–ù–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ ¬´{course.title}¬ª –ø–æ–∫–∞ –Ω–µ—Ç. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è üëå")
            return

        # 5. –°–æ–∑–¥–∞–µ–º progress –≤ –ë–î —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º —É—Ä–æ–∫–∞
        full_lesson_code = f"{course.code}:{next_lesson_folder}"

        from datetime import datetime, timedelta, timezone
        sent_at = now_utc_str()
        deadline = (datetime.now(timezone.utc) + timedelta(days=3)).replace(microsecond=0).isoformat().replace("+00:00",
                                                                                                               "Z")
        remind = (datetime.now(timezone.utc) + timedelta(hours=24)).replace(microsecond=0).isoformat().replace("+00:00",
                                                                                                               "Z")

        await db.execute(
            "INSERT INTO progress(student_id, lesson_code, status, sent_at, deadline_at, remind_at, updated_at) "
            "VALUES(?,?,?,?,?,?,?)",
            (sid, full_lesson_code, "sent", sent_at, deadline, remind, sent_at),
        )
        cur = await db.execute("SELECT last_insert_rowid() AS id")
        pid = (await cur.fetchone())["id"]
        await db.commit()

    # 6. –í—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–∞
    await bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ ¬´{next_lesson_folder}¬ª –∏–∑ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª...")
    await send_next_t_block(bot, chat_id, pid, first=True)

# ===== –£—Ä–æ–∫ –ø–æ –∫–æ–¥—É (FSM –≤–º–µ—Å—Ç–æ message.conf) =====
@router.message(F.text == "üéµ –£—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É") # <<< –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
async def btn_lesson_by_code(message: types.Message, state: FSMContext):
    # –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    await state.set_state(LessonCodeForm.waiting_code)
    await message.answer(
        "–í–≤–µ–¥–∏ –∫–æ–¥ —É—Ä–æ–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
        reply_markup=_cancel_kb() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–û—Ç–º–µ–Ω–∞"
    )

@router.message(LessonCodeForm.waiting_code, F.text.regexp(r"^[A-Za-z0-9_\-]{3,}$"))
async def lesson_code_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥ –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    code = message.text.strip()
    await _process_lesson_code(message, code)
    await state.clear()



    # --- —Å–¥–∞—á–∞ –¢–ï–ö–°–¢–û–ú (–Ω–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏, –≤–Ω–µ FSM –ø–æ–º–æ—â–∏) ---


# ===== Utilities =====
async def _get_or_create_student(tg_id: int, username: str | None):
    async with get_db() as db:
        await db.execute(
            "INSERT INTO students(tg_id, username, created_at, last_seen) VALUES(?,?,?,?) "
            "ON CONFLICT(tg_id) DO UPDATE SET username=excluded.username, last_seen=excluded.last_seen",
            (tg_id, username or "", now_utc_str(), now_utc_str()),
        )
        await db.commit()


# bot/routers/student.py
# ...
# <<< –í–°–¢–ê–í–¨ –≠–¢–û–¢ –ö–û–î –í –§–ê–ô–õ student.py >>>

async def _process_lesson_code(message: types.Message, code: str):
    settings = get_settings()
    # –ò—â–µ–º —É—Ä–æ–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ by_code_path
    path = settings.by_code_path / code

    if not path.exists() or not path.is_dir():
        await message.answer("–¢–∞–∫–æ–π –∫–æ–¥ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    async with get_db() as db:
        cur = await db.execute("SELECT id, approved FROM students WHERE tg_id=?", (message.from_user.id,))
        s_row = await cur.fetchone()
        if not s_row or not s_row["approved"]:
            await message.answer("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω, –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º –ø–æ –∫–æ–¥—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–∑–∂–µ.")
            return
        sid = s_row["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ª—é–±–æ–µ)
        cur = await db.execute(
            "SELECT id FROM progress WHERE student_id=? AND status IN ('sent','returned','submitted')", (sid,))
        if await cur.fetchone():
            await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–¥–∞–π –µ–≥–æ.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —É—Ä–æ–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "by_code"
        full_lesson_code = f"by_code:{code}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω
        cur = await db.execute(
            "SELECT 1 FROM progress WHERE student_id=? AND lesson_code=? AND status='approved'",
            (sid, full_lesson_code)
        )
        if await cur.fetchone():
            await message.answer("–¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ –∫–æ–¥—É.")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        from datetime import datetime, timedelta
        sent_at = now_utc_str()

        await db.execute(
            "INSERT INTO progress(student_id, lesson_code, status, sent_at, updated_at) VALUES(?,?,?,?,?)",
            (sid, full_lesson_code, "sent", sent_at, sent_at),
        )
        cur = await db.execute("SELECT last_insert_rowid() AS id")
        pid = (await cur.fetchone())["id"]
        await db.commit()

    # –í—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–∞
    await message.answer(f"–û—Ç–∫—Ä—ã–≤–∞—é —É—Ä–æ–∫ –ø–æ –∫–æ–¥—É ¬´{code}¬ª...")
    await send_next_t_block(message.bot, message.chat.id, pid, first=True)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ StateFilter(None)
@router.message(StateFilter(None), F.photo)
async def handle_unhandled_photo(m: types.Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."""
    await m.answer(
        "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@router.callback_query(F.data.startswith("show_course:"))
async def show_course_lessons(cb: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    ‚úÖ - –ø—Ä–æ–π–¥–µ–Ω
    ‚ñ∂Ô∏è - —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    üîí - –∑–∞–∫—Ä—ã—Ç
    """
    course_code = cb.data.split(":")[1]
    course = get_course(course_code)

    if not course:
        await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await cb.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª...")

    settings = get_settings()
    sid = None

    # 1. –ù–∞—Ö–æ–¥–∏–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (cb.from_user.id,))
        s_row = await cur.fetchone()
        if s_row:
            sid = s_row["id"]

    if not sid:
        await cb.message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞–∂–º–∏ /start")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ –∏–∑ –ø–∞–ø–æ–∫
    course_path = settings.lessons_path / course.code
    all_lessons = list_l_lessons(course_path)

    # 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ü–†–û–ô–î–ï–ù–ù–´–• —É—Ä–æ–∫–æ–≤ –∏–∑ –ë–î
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:%")
        )
        rows = await cur.fetchall()
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫—É—Ä—Å–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ L-–∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä "L01"
        passed_lessons = {row["lesson_code"].split(":")[-1] for row in rows}

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    next_lesson_unlocked = True

    for lesson_folder_name in all_lessons:
        status_icon = ""
        callback_data = ""

        if lesson_folder_name in passed_lessons:
            status_icon = "‚úÖ"
            callback_data = f"lesson:review:{course.code}:{lesson_folder_name}" # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫
        elif next_lesson_unlocked:
            status_icon = "‚ñ∂Ô∏è"
            callback_data = f"lesson:start:{course.code}:{lesson_folder_name}" # –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫
            next_lesson_unlocked = False # –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        else:
            status_icon = "üîí"
            callback_data = "lesson:locked" # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb.button(text=f"{status_icon} {lesson_folder_name}", callback_data=callback_data)

    kb.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

    await cb.message.edit_text(
        f"–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª:",
        reply_markup=kb.as_markup()
    )

# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "‚úÖ –ü–û–í–¢–û–†–ò–¢–¨ –£–†–û–ö" >>>
@router.callback_query(F.data.startswith("lesson:review:"))
async def lesson_review(cb: types.CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —É—Ä–æ–∫–∞ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."""
    try:
        _, _, course_code, lesson_folder = cb.data.split(":")
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞.", show_alert=True)
        return

    # TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞
    await cb.answer(f"–ü–æ–≤—Ç–æ—Ä —É—Ä–æ–∫–∞ ¬´{lesson_folder}¬ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üîí –£–†–û–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" >>>
@router.callback_query(F.data == "lesson:locked")
async def lesson_locked(cb: types.CallbackQuery):
    """–°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    await cb.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.", show_alert=True)

================================================================================
FILE: Bot\routers\__init__.py
================================================================================


================================================================================
FILE: Bot\services\admin_cards.py
================================================================================
# bot/services/admin_cards.py

from __future__ import annotations

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

from bot.config import get_settings, local_dt_str, now_utc_str


def render_submission_card(
    pid: int,
    tg_user: types.User,
    *,
    lesson_code: str | None,
    task_code: str | None,
    submitted_at_utc: str | None = None,
    add_open_chat_button: bool = True,
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–∞—á–∏ –î–ó –¥–ª—è –∞–¥–º–∏–Ω–∞ + –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (card_text, reply_markup).
    """
    settings = get_settings()
    submitted_at_utc = submitted_at_utc or now_utc_str()

    title = "üìù <b>–ù–æ–≤–∞—è —Å–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>"
    lines: list[str] = [
        "‚Äî" * 24,
        f"üë§ –£—á–µ–Ω–∏–∫: @{tg_user.username or tg_user.id}",
        f"üìò –£—Ä–æ–∫: <b>{lesson_code or '‚Äî'}</b>",
        f"üß© –†–∞–∑–¥–µ–ª: <b>{task_code or '‚Äî'}</b>",
        f"üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{local_dt_str(submitted_at_utc, settings.timezone)}</b>",
        f"üÜî PID: <code>{pid}</code>",
    ]
    card_text = "\n".join([title, *lines])

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"p_ok:{pid}")
    kb.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å", callback_data=f"p_back:{pid}")
    if add_open_chat_button:
        kb.button(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"tg://user?id={tg_user.id}")
        kb.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"adm_reply:{tg_user.id}")  # <-- –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    kb.adjust(1)

    return card_text, kb.as_markup()

from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

def help_reply_kb(tg_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"adm_reply:{tg_id}")
    kb.button(text="tg-–ø—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={tg_id}")
    kb.adjust(1)  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    return kb.as_markup()

================================================================================
FILE: Bot\services\db.py
================================================================================
# bot/services/db.py
import os, logging, contextlib
from pathlib import Path
import aiosqlite

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ë–î: <repo_root>/data/bot.db (–∏–ª–∏ DB_PATH –∏–∑ .env)
REPO_ROOT = Path(__file__).resolve().parents[2]
DEFAULT_DB = REPO_ROOT / "data" / "bot.db"
DEFAULT_DB.parent.mkdir(parents=True, exist_ok=True)

DB_PATH = os.path.expanduser(os.path.expandvars(os.getenv("DB_PATH") or str(DEFAULT_DB)))
_LOGGED = False  # –ª–æ–≥ –ø—É—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑

async def _prepare_conn(db: aiosqlite.Connection) -> None:
    await db.execute("PRAGMA foreign_keys=ON;")
    await db.execute("PRAGMA journal_mode=WAL;")
    await db.execute("PRAGMA busy_timeout=5000;")

@contextlib.asynccontextmanager
async def get_db():
    global _LOGGED
    if not _LOGGED:
        logging.warning("SQLite path: %s", os.path.abspath(DB_PATH))
        _LOGGED = True
    db = await aiosqlite.connect(DB_PATH, timeout=30)
    try:
        db.row_factory = aiosqlite.Row
        await _prepare_conn(db)
        yield db
    finally:
        await db.close()

# –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–º–∏–≥—Ä–∞—Ü–∏–∏ (–≤—ã–∑–æ–≤–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
async def init_db():
    async with aiosqlite.connect(DB_PATH, timeout=30) as db:
        db.row_factory = aiosqlite.Row
        await _prepare_conn(db)

        # --- —Ç–∞–±–ª–∏—Ü—ã ---
        await db.execute("""
            CREATE TABLE IF NOT EXISTS test_results (
                id INTEGER PRIMARY KEY,
                user_id INTEGER NOT NULL,
                test_code TEXT NOT NULL,
                correct_count INTEGER NOT NULL,
                total_count INTEGER NOT NULL,
                passed INTEGER NOT NULL,
                created_at TEXT NOT NULL,
                updated_at TEXT
            );
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS points (
                id INTEGER PRIMARY KEY,
                student_id INTEGER NOT NULL,
                source TEXT NOT NULL,
                amount INTEGER NOT NULL,
                created_at TEXT NOT NULL
            );
        """)

        # --- –∏–Ω–¥–µ–∫—Å—ã (–∞–Ω—Ç–∏–¥—É–±–ª–∏) ---
        await db.execute("DROP INDEX IF EXISTS ux_test_results;")  # —Å—Ç–∞—Ä—ã–π, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        await db.execute("""
            CREATE UNIQUE INDEX IF NOT EXISTS uq_test_results_user_code
            ON test_results(user_id, test_code);
        """)
        await db.execute("""
            CREATE UNIQUE INDEX IF NOT EXISTS idx_points_student_source
            ON points(student_id, source);
        """)

        await db.commit()


================================================================================
FILE: Bot\services\lessons.py
================================================================================
from __future__ import annotations
from pathlib import Path
from typing import List, Tuple
import re

VIDEO_EXT = {".mp4", ".mov", ".m4v", ".avi", ".mkv"}
IMAGE_EXT = {".jpg", ".jpeg", ".png", ".webp", ".gif"}
TEXT_EXT  = {".txt", ".md"}

L_PATTERN = re.compile(r"^L(\d{2,})$")
T_PATTERN = re.compile(r"^T(\d{2,})$")

def list_l_lessons(lessons_root: Path) -> List[str]:
    if not lessons_root.exists():
        return []
    items = []
    for p in lessons_root.iterdir():
        if p.is_dir() and L_PATTERN.match(p.name):
            items.append(p.name)
    # sort by numeric value
    def key_fn(name: str) -> int:
        m = L_PATTERN.match(name)
        return int(m.group(1)) if m else 0
    return sorted(items, key=key_fn)

def next_l_after(lessons_root: Path, last_num: int) -> str | None:
    for name in list_l_lessons(lessons_root):
        m = L_PATTERN.match(name)
        if not m:
            continue
        n = int(m.group(1))
        if n > last_num:
            return name
    return None

def list_t_blocks(lesson_dir: Path) -> List[str]:
    if not lesson_dir.exists():
        return []
    items = []
    for p in lesson_dir.iterdir():
        if p.is_dir() and T_PATTERN.match(p.name):
            items.append(p.name)
    def key_fn(name: str) -> int:
        m = T_PATTERN.match(name)
        return int(m.group(1)) if m else 0
    return sorted(items, key=key_fn)

def sort_materials(t_dir: Path) -> List[Path]:
    files = [p for p in t_dir.iterdir() if p.is_file()]

    # –∫–∞—Ä—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    prio_map: dict[str, int] = {}
    prio_map.update({ext: 0 for ext in VIDEO_EXT})
    prio_map.update({ext: 1 for ext in IMAGE_EXT})
    prio_map.update({ext: 2 for ext in TEXT_EXT})

    # –∫–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∏–º—è —Ñ–∞–π–ª–∞)
    return sorted(
        files,
        key=lambda p: (prio_map.get(p.suffix.lower(), 3), p.name.lower())
    )


def parse_l_num(code: str) -> int | None:
    m = L_PATTERN.match(code)
    return int(m.group(1)) if m else None


================================================================================
FILE: Bot\services\motivation.py
================================================================================

from __future__ import annotations
import random

# –ö–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–¥ –Ω–∞—à —Å—Ç–∏–ª—å
AFTER_ENROLL = [
    "–°—Ç–∞—Ä—Ç—É–µ–º! üöÄ –°–µ–π—á–∞—Å –≥–ª–∞–≤–Ω–æ–µ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å. –Ø —Ä—è–¥–æ–º.",
    "–ö—Ä–∞—Å–∞–≤—á–∏–∫(–∞)! –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π ‚Äî —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç. –ü–æ–ª–µ—Ç–µ–ª–∏.",
    "–ì–æ—Ç–æ–≤(–∞) –µ–±–∞—à–∏—Ç—å –ø–æ –¥–µ–ª—É? –ë–µ–∑ –≤–æ–¥—ã, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å üí™",
]

BEFORE_LESSON = [
    "5‚Äì10 –º–∏–Ω—É—Ç —Ä–∞–∑–º–∏–Ω–∫–∏ ‚Äî –∏ –≤ –±–æ–π. –†–æ–≤–Ω–∞—è —Å–ø–∏–Ω–∞, —Ä–∞—Å—Å–ª–∞–±—å –ø–ª–µ—á–∏.",
    "–ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä 20 –º–∏–Ω—É—Ç: –∏–≥—Ä–∞–µ—à—å ‚Äî –æ—Ç–¥—ã—Ö–∞–µ—à—å ‚Äî –ø–æ–≤—Ç–æ—Ä.",
    "–ì–ª–∞–≤–Ω–æ–µ ‚Äî —á–∏—Å—Ç—ã–µ –Ω–æ—Ç—ã. –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–¥—ë—Ç –ø–æ–∑–∂–µ.",
]

AFTER_SUBMIT = [
    "–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) ‚Äî —É–∂–µ –º–æ–ª–æ–¥–µ—Ü. –Ø –ø—Ä–æ–≤–µ—Ä—é –∏ –¥–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üî•",
    "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å. –£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ç—ë—Ç, –Ω–µ —Å–±–∞–≤–ª—è–π —Ç–µ–º–ø.",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å. –î–∞–ª—å—à–µ ‚Äî –µ—â—ë –ª—É—á—à–µ. üß†+üé∏",
]

APPROVED = [
    "–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ –ß–∏—Å—Ç–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ. –î–∞–ª—å—à–µ —Å–ª–æ–∂–Ω–µ–µ ‚Äî –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.",
    "–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ê–ø–ø—Ä—É–≤! –ó–∞–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫.",
    "–û—Ç–ª–∏—á–Ω–æ. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.",
]

def pick(pool: list[str]) -> str:
    return random.choice(pool)



================================================================================
FILE: Bot\services\points.py
================================================================================
# bot/services/points.py
from __future__ import annotations

import aiosqlite
from typing import Optional

from bot.services.db import get_db
from bot.config import now_utc_str


async def add(student_id: int, source: str, amount: int) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞; False, –µ—Å–ª–∏ —Ç–∞–∫–æ–π source —É–∂–µ –µ—Å—Ç—å (–∞–Ω—Ç–∏–¥—É–±–ª—å).
    –¢—Ä–µ–±—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å points(student_id, source).
    """
    if not source:
        raise ValueError("source must be non-empty")
    if amount == 0:
        return False

    try:
        async with get_db() as db:
            await db.execute(
                "INSERT INTO points(student_id, source, amount, created_at) VALUES(?,?,?,?)",
                (student_id, source, amount, now_utc_str()),
            )
            await db.commit()
        return True
    except aiosqlite.IntegrityError:
        # –ù–∞—Ä–≤–∞–ª–∏—Å—å –Ω–∞ UNIQUE(student_id, source) ‚Äî –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ.
        return False


async def total(student_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–µ –±–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Å—É–º–º–∞ –ø–æ points.amount).
    """
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COALESCE(SUM(amount),0) AS s FROM points WHERE student_id=?",
            (student_id,),
        )
        row = await cur.fetchone()
    return int(row["s"] if row and row["s"] is not None else 0)


================================================================================
FILE: Bot\services\ranks.py
================================================================================
# bot/services/ranks.py
from __future__ import annotations
from typing import Optional, Tuple, List

# –ë–∞–∑–æ–≤–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –ø–æ—Ä–æ–≥–æ–≤ (–º–æ–∂–µ—à—å –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ 13 —É—Ä–æ–≤–Ω–µ–π ‚Äú–ü—É—Ç—å –ú–∞—ç—Å—Ç—Ä–æ‚Äù)
# –í–∞–∂–Ω–æ: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø–æ—Ä–æ–≥–∞.
RANKS: List[tuple[int, str]] = [
    (0,    "–ù–æ–≤–∏—á–æ–∫"),
    (200,  "–£—á–µ–Ω–∏–∫ I"),
    (500,  "–£—á–µ–Ω–∏–∫ II"),
    (1000, "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–π"),
    (1500, "–£–≤–µ—Ä–µ–Ω–Ω—ã–π"),
    (2200, "–û–ø—ã—Ç–Ω—ã–π"),
    (3000, "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),
    (4500, "–ú–∞—ç—Å—Ç—Ä–æ"),       # –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∞–≤–∏–ª–∞–º: 4500+
    (6000, "–ê—Ä—Ö–∏–º–∞—ç—Å—Ç—Ä–æ"),   # —Ç–æ–ø: 6000+
]

def get_rank_by_points(total: int) -> tuple[str, Optional[int]]:
    """
    –ü–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–∞–Ω–≥–∞, —Å–ª–µ–¥—É—é—â–∏–π_–ø–æ—Ä–æ–≥_–∏–ª–∏_None).
    –ü—Ä–∏–º–µ—Ä: (\"–£—á–µ–Ω–∏–∫ II\", 1000) ‚Äî –∑–Ω–∞—á–∏—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å (1000 - total).
    """
    current_thr, current_name = RANKS[0]
    for thr, name in RANKS:
        if total >= thr:
            current_thr, current_name = thr, name
        else:
            break

    next_thr: Optional[int] = None
    for thr, _ in RANKS:
        if thr > current_thr:
            next_thr = thr
            break

    return current_name, next_thr


================================================================================
FILE: Bot\services\reminder_worker.py
================================================================================
from __future__ import annotations
import asyncio
from datetime import datetime, timezone, timedelta
from pathlib import Path
from aiogram import Bot

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ---
# –ú—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–∏–Ω –±–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
from bot.services.db import get_db
from bot.config import get_settings, now_utc_str
from bot.services.lessons import list_l_lessons, parse_l_num
from . import points  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è points.py
# ---------------------------


# –¢–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏
REMINDER_TEXTS = [
    "üëã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ù–µ –∑–∞–±—É–¥—å –µ–≥–æ —Å–¥–∞—Ç—å!",
    "‚ö° –ü–æ—Ä–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ ‚Äî –∂–¥—É —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É.",
    "üî• –¢—ã –±–ª–∏–∑–æ–∫ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é. –°–¥–∞–π –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ –±–∞–ª–ª—ã!",
]
# –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî –ø–µ—Ä–µ—Å—Ç–∞—ë–º —Å–ª–∞—Ç—å (–≥–∞—Å–∏–º remind_at)
MAX_REMIND_COUNT = len(REMINDER_TEXTS)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (MVP: 24 —á–∞—Å–∞)
REMIND_INTERVAL_HOURS = 24

# –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ –≤–æ—Ä–∫–µ—Ä–∞
LOOP_SLEEP_SECONDS = 600


async def _send_progress_reminders(bot: Bot) -> None:
    """
    –®–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 'sent'/'returned',
    —É –∫–æ—Ç–æ—Ä—ã—Ö remind_at <= now. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ reminded –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏.
    """
    now_iso = now_utc_str()

    async with get_db() as db:
        cur = await db.execute(
            """
            SELECT p.id, p.student_id, p.remind_at, p.reminded, p.status,
                   s.tg_id
            FROM progress p
            JOIN students s ON s.id = p.student_id
            WHERE p.status IN ('sent','returned')
              AND p.remind_at IS NOT NULL
              AND p.remind_at <= ?
            """,
            (now_iso,),
        )
        rows = await cur.fetchall()

        for r in rows:
            pid = r["id"]
            tg_id = r["tg_id"]
            reminded = (r["reminded"] or 0)

            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É, –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —à–ª—ë–º
            if reminded >= MAX_REMIND_COUNT:
                # –ì–∞—Å–∏–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await db.execute(
                    "UPDATE progress SET remind_at=NULL, updated_at=? WHERE id=?",
                    (now_iso, pid),
                )
                continue

            text = REMINDER_TEXTS[min(reminded, MAX_REMIND_COUNT - 1)]

            try:
                await bot.send_message(tg_id, text)
            except Exception:
                # –Ω–µ –≤–∞–ª–∏–º—Å—è –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö/–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                pass

            # –°–¥–≤–∏–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–∫–Ω–æ + —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            next_at = (
                datetime.now(timezone.utc) + timedelta(hours=REMIND_INTERVAL_HOURS)
            ).replace(microsecond=0).isoformat().replace("+00:00", "Z")

            await db.execute(
                "UPDATE progress SET remind_at=?, reminded=COALESCE(reminded,0)+1, updated_at=? WHERE id=?",
                (next_at, now_iso, pid),
            )

        await db.commit()


async def _notify_waiting_lessons(bot: Bot) -> None:
    """
    –ï—Å–ª–∏ —É —É—á–µ–Ω–∏–∫–∞ —Å—Ç–æ–∏—Ç waiting_lessons=1 –∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π L-—É—Ä–æ–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º.
    –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º last_known_max_lesson.
    """
    settings = get_settings()
    lessons_dir = Path(settings.lessons_path)

    lessons = list_l_lessons(lessons_dir)
    current_max = 0
    for code in lessons:
        n = parse_l_num(code) or 0
        if n > current_max:
            current_max = n

    if current_max <= 0:
        return

    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, tg_id, last_known_max_lesson FROM students WHERE waiting_lessons=1"
        )
        students_rows = await cur.fetchall()

        for s in students_rows:
            last_known = s["last_known_max_lesson"] or 0
            if current_max > last_known:
                try:
                    await bot.send_message(
                        s["tg_id"],
                        "–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —É—Ä–æ–∫–∏! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ üé∏"
                    )
                except Exception:
                    pass

                await db.execute(
                    "UPDATE students SET waiting_lessons=0, last_known_max_lesson=? WHERE id=?",
                    (current_max, s["id"]),
                )

        await db.commit()


async def _auto_approve_submitted_lessons(bot: Bot) -> None:
    now_iso = now_utc_str()

    async with get_db() as db:
        # –ò—â–µ–º —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–¥–∞–Ω—ã –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        # –∏ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã.
        cur = await db.execute(
            """
            SELECT p.id, s.tg_id, s.id AS sid
            FROM progress p
            JOIN students s ON s.id = p.student_id
            WHERE p.status = 'submitted'
              AND p.submitted_at <= datetime('now', '-10 minutes') || 'Z'
            """
        )
        rows = await cur.fetchall()

        for r in rows:
            pid, tg_id, sid = r['id'], r['tg_id'], r['sid']

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'approved'
            await db.execute(
                "UPDATE progress SET status='approved', approved_at=?, updated_at=? WHERE id=?",
                (now_iso, now_iso, pid),
            )

            # –ù–∞—á–∏—Å–ª—è–µ–º 100 –±–∞–ª–ª–æ–≤
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
                await points.add(sid, f"lesson_approved_auto:{pid}", 100)
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
            await bot.send_message(tg_id, "‚úÖ –¢–≤–æ—è —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞. –î–µ—Ä–∂–∏ 100 –±–∞–ª–ª–æ–≤!")

        await db.commit()

async def reminder_loop(bot: Bot):
    # ...
    while True:
        try:
            await _send_progress_reminders(bot)
            # –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ü–∏–∫–ª
            await _auto_approve_submitted_lessons(bot)
            #await _notify_waiting_lessons(bot)
        except Exception as e:
            # ... (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
            print("[reminder_loop] error:", e)

        await asyncio.sleep(LOOP_SLEEP_SECONDS)

================================================================================
FILE: Bot\tools\clear.py
================================================================================
import asyncio
import aiosqlite
import logging

from bot.config import get_settings
from bot.services.db import get_db, _prepare_conn # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from .migrate_schema import migrate as migrate_schema # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã
from .migrate_points import run_migration as migrate_points # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–∏–Ω—Ç–æ–≤


async def clear_db():
    settings = get_settings()

    async with aiosqlite.connect(settings.db_path) as db:
        # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ foreign key (–∏–Ω–∞—á–µ –Ω–µ –¥–∞—Å—Ç —É–¥–∞–ª–∏—Ç—å)
        await db.execute("PRAGMA foreign_keys = OFF;")

        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cur = await db.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = await cur.fetchall()

        for (table,) in tables:
            if table == "sqlite_sequence":  # —Å–ª—É–∂–µ–±–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã)
                continue
            await db.execute(f"DELETE FROM {table};")

        # —Å–±—Ä–æ—Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–≤
        await db.execute("DELETE FROM sqlite_sequence;")
        await db.commit()

    logging.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã.")


async def prepare_db():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:
    1. –û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏.
    """
    settings = get_settings()
    db_path = settings.db_path

    # –®–∞–≥ 1: –æ—á–∏—Å—Ç–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É)
    try:
        await clear_db()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ë–î: {e}")
        # –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã —Ö–æ—Ç—è –±—ã –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        pass

    # –®–∞–≥ 2: –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º)
    logging.info("üîß –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã...")
    try:
        await migrate_schema()
        logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return

    logging.info("üîß –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é —Ç–æ—á–µ–∫ –∏ —Ä–∞–Ω–≥–æ–≤...")
    try:
        await migrate_points()
        logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –∏ —Ä–∞–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –∏ —Ä–∞–Ω–≥–æ–≤: {e}")
        return

    logging.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∫ —Ä–∞–±–æ—Ç–µ!")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(prepare_db())

================================================================================
FILE: Bot\tools\migrate_add_course_code.py
================================================================================
# bot/tools/migrate_add_course_code.py
import asyncio
import aiosqlite
from bot.config import get_settings


async def column_exists(db: aiosqlite.Connection, table: str, column: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    try:
        cur = await db.execute(f"PRAGMA table_info({table})")
        cols = {row[1] for row in await cur.fetchall()}
        return column in cols
    except aiosqlite.Error:
        return False


async def main():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É course_code –≤ —Ç–∞–±–ª–∏—Ü—ã payments –∏ payment_requests."""
    settings = get_settings()
    db_path = settings.db_path
    print(f"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ë–î: {db_path}")

    async with aiosqlite.connect(db_path) as db:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É payments
        if not await column_exists(db, "payments", "course_code"):
            print("–î–æ–±–∞–≤–ª—è—é `course_code` –≤ —Ç–∞–±–ª–∏—Ü—É `payments`...")
            await db.execute("ALTER TABLE payments ADD COLUMN course_code TEXT;")
            print("...–≥–æ—Ç–æ–≤–æ.")
        else:
            print("–ö–æ–ª–æ–Ω–∫–∞ `course_code` –≤ `payments` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É payment_requests
        if not await column_exists(db, "payment_requests", "course_code"):
            print("–î–æ–±–∞–≤–ª—è—é `course_code` –≤ —Ç–∞–±–ª–∏—Ü—É `payment_requests`...")
            await db.execute("ALTER TABLE payment_requests ADD COLUMN course_code TEXT;")
            print("...–≥–æ—Ç–æ–≤–æ.")
        else:
            print("–ö–æ–ª–æ–Ω–∫–∞ `course_code` –≤ `payment_requests` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        await db.commit()
        print("–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main())

================================================================================
FILE: Bot\tools\migrate_fix.py
================================================================================
import asyncio
import aiosqlite
from bot.config import get_settings

NEEDED_STUDENTS_COLS = {
    "approved": "INTEGER NOT NULL DEFAULT 0",
    "rank": "TEXT",
    "rank_points": "INTEGER NOT NULL DEFAULT 0",
    "updated_at": "TEXT",
}

# bot/tools/migrate_fix.py

CREATE_INDEX_SQL = [
    # points: –∞–Ω—Ç–∏–¥—É–±–ª—å –±–æ–Ω—É—Å–æ–≤ [cite: 3]
    "CREATE UNIQUE INDEX IF NOT EXISTS ux_points_student_source ON points(student_id, source)",
    # progress: —É—Å–∫–æ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏/–ø–æ–¥–±–æ—Ä –æ—á–µ—Ä–µ–¥–∏ [cite: 2]
    "CREATE INDEX IF NOT EXISTS idx_progress_status_remind ON progress(status, remind_at)",

    # –ù–û–í–´–ï –ò–ù–î–ï–ö–°–´:
    # –£—Å–∫–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ `tg_id` –≤ —Ç–∞–±–ª–∏—Ü–µ `students`
    "CREATE UNIQUE INDEX IF NOT EXISTS idx_students_tg_id ON students(tg_id)",
    # –£—Å–∫–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    "CREATE INDEX IF NOT EXISTS idx_progress_status ON progress(status)",
    # –£—Å–∫–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    "CREATE INDEX IF NOT EXISTS idx_progress_student ON progress(student_id)",
    # –£—Å–∫–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Å—Ç—É–¥–µ–Ω—Ç—É
    "CREATE INDEX IF NOT EXISTS idx_progress_student_status ON progress(student_id, status)"
]

async def ensure_students_columns(db):
    # —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cur = await db.execute("PRAGMA table_info(students)")
    cols = {row[1] for row in await cur.fetchall()}

    for col, ddl in NEEDED_STUDENTS_COLS.items():
        if col not in cols:
            await db.execute(f"ALTER TABLE students ADD COLUMN {col} {ddl}")

async def ensure_indexes(db):
    for sql in CREATE_INDEX_SQL:
        await db.execute(sql)

async def main():
    settings = get_settings()
    async with aiosqlite.connect(settings.db_path) as db:
        db.row_factory = aiosqlite.Row
        await ensure_students_columns(db)
        await ensure_indexes(db)
        await db.commit()
    print("OK: schema fixed")

if __name__ == "__main__":
    asyncio.run(main())


================================================================================
FILE: Bot\tools\migrate_points.py
================================================================================
# bot/tools/migrate_points_ranks.py
from __future__ import annotations

import asyncio
from typing import Iterable

import aiosqlite

# –ë–µ—Ä—ë–º –ø—É—Ç—å –∫ –ë–î –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
from bot.config import get_settings

S = get_settings()


async def column_exists(db: aiosqlite.Connection, table: str, column: str) -> bool:
    cur = await db.execute(f"PRAGMA table_info({table})")
    rows = await cur.fetchall()
    cols = {r[1] for r in rows}  # r[1] = name
    return column in cols


async def table_exists(db: aiosqlite.Connection, table: str) -> bool:
    cur = await db.execute(
        "SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,)
    )
    return await cur.fetchone() is not None


async def index_exists(db: aiosqlite.Connection, index: str) -> bool:
    cur = await db.execute(
        "SELECT name FROM sqlite_master WHERE type='index' AND name=?", (index,)
    )
    return await cur.fetchone() is not None


async def ensure_points_table(db: aiosqlite.Connection) -> None:
    # 1) –¢–∞–±–ª–∏—Ü–∞ points
    await db.execute(
        """
        CREATE TABLE IF NOT EXISTS points (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            source TEXT NOT NULL,
            amount INTEGER NOT NULL,
            created_at TEXT NOT NULL
        )
        """
    )

    # 2) –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (student_id, source)
    if not await index_exists(db, "idx_points_student_source"):
        await db.execute(
            "CREATE UNIQUE INDEX idx_points_student_source ON points(student_id, source)"
        )

    # 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò–Ω–¥–µ–∫—Å –ø–æ student_id –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è SUM
    if not await index_exists(db, "idx_points_student"):
        await db.execute("CREATE INDEX idx_points_student ON points(student_id)")


async def ensure_students_rank_columns(db: aiosqlite.Connection) -> None:
    # –î–æ–±–∞–≤–ª—è–µ–º rank / rank_points, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not await column_exists(db, "students", "rank"):
        await db.execute("ALTER TABLE students ADD COLUMN rank TEXT")

    if not await column_exists(db, "students", "rank_points"):
        await db.execute("ALTER TABLE students ADD COLUMN rank_points INTEGER DEFAULT 0")


async def run_migration() -> None:
    print(f"[migrate] DB path: {S.db_path}")

    async with aiosqlite.connect(S.db_path) as db:
        db.row_factory = aiosqlite.Row

        # sanity: students –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        if not await table_exists(db, "students"):
            raise SystemExit(
                "–¢–∞–±–ª–∏—Ü–∞ 'students' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ –ë–î."
            )

        await ensure_points_table(db)
        await ensure_students_rank_columns(db)

        await db.commit()

    print("[migrate] OK: points/–∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ), –∫–æ–ª–æ–Ω–∫–∏ rank/rank_points –¥–æ–±–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ).")


if __name__ == "__main__":
    asyncio.run(run_migration())


================================================================================
FILE: Bot\tools\migrate_schema.py
================================================================================
# -*- coding: utf-8 -*-
"""
Maestro Bot migration script (SQLite).
Creates tables / adds missing columns / adds indexes idempotently.
Generated: 2025-08-23T15:31:29.721080Z

Usage:
  DB_PATH=./data/bot.db python migrate_maestro_schema.py
"""
import os
import sqlite3
from pathlib import Path

DB_PATH = os.getenv("DB_PATH", "./data/bot.db")

def execute(cur, sql):
    cur.execute(sql)

def table_exists(cur, name: str) -> bool:
    cur.execute("SELECT 1 FROM sqlite_master WHERE type='table' AND name=?", (name,))
    return cur.fetchone() is not None

def index_exists(cur, name: str) -> bool:
    cur.execute("SELECT 1 FROM sqlite_master WHERE type='index' AND name=? ", (name,))
    return cur.fetchone() is not None

def columns(cur, table: str) -> set[str]:
    cur.execute(f"PRAGMA table_info({table})")
    return {row[1] for row in cur.fetchall()}

def add_column(cur, table: str, ddl: str):
    print(f"[migrate] {table}: add column {ddl}")
    cur.execute(f"ALTER TABLE {table} ADD COLUMN {ddl}")

def migrate_students(cur):
    if not table_exists(cur, "students"):
        execute(cur, """
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            full_name TEXT,
            phone TEXT,
            age INTEGER,
            birth_date TEXT,
            has_guitar INTEGER DEFAULT 0,
            experience_months INTEGER DEFAULT 0,
            goal TEXT,
            approved INTEGER DEFAULT 0,
            waiting_lessons INTEGER DEFAULT 0,
            last_known_max_lesson INTEGER DEFAULT 0,
            rank TEXT,
            rank_points INTEGER DEFAULT 0,
            created_at TEXT,
            updated_at TEXT,
            last_seen TEXT
        );
        """)
    cols = columns(cur, "students")
    need = {
        "approved": "INTEGER DEFAULT 0",
        "waiting_lessons": "INTEGER DEFAULT 0",
        "last_known_max_lesson": "INTEGER DEFAULT 0",
        "rank": "TEXT",
        "rank_points": "INTEGER DEFAULT 0",
        "updated_at": "TEXT",
        "last_seen": "TEXT",
    }
    for col, ddl in need.items():
        if col not in cols:
            add_column(cur, "students", f"{col} {ddl}")
    for idx_name, idx_sql in [
        ("idx_students_tg_id", "CREATE UNIQUE INDEX idx_students_tg_id ON students(tg_id)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_progress(cur):
    if not table_exists(cur, "progress"):
        execute(cur, """
        CREATE TABLE progress (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            lesson_id INTEGER,
            lesson_code TEXT,
            task_code TEXT,
            status TEXT NOT NULL,
            sent_at TEXT,
            returned_at TEXT,
            submitted_at TEXT,
            approved_at TEXT,
            deadline_at TEXT,
            remind_at TEXT,
            reminded INTEGER DEFAULT 0,
            updated_at TEXT,
            FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    else:
        cols = columns(cur, "progress")
        if "lesson_id" not in cols: add_column(cur, "progress", "lesson_id INTEGER")
        if "lesson_code" not in cols: add_column(cur, "progress", "lesson_code TEXT")
        if "task_code" not in cols: add_column(cur, "progress", "task_code TEXT")
        if "returned_at" not in cols: add_column(cur, "progress", "returned_at TEXT")
        if "submitted_at" not in cols: add_column(cur, "progress", "submitted_at TEXT")
        if "approved_at" not in cols: add_column(cur, "progress", "approved_at TEXT")
        if "deadline_at" not in cols: add_column(cur, "progress", "deadline_at TEXT")
        if "remind_at" not in cols: add_column(cur, "progress", "remind_at TEXT")
        if "reminded" not in cols: add_column(cur, "progress", "reminded INTEGER DEFAULT 0")
        if "updated_at" not in cols: add_column(cur, "progress", "updated_at TEXT")
    for idx_name, idx_sql in [
        ("idx_progress_student", "CREATE INDEX idx_progress_student ON progress(student_id)"),
        ("idx_progress_status", "CREATE INDEX idx_progress_status ON progress(status)"),
        ("idx_progress_status_remind", "CREATE INDEX idx_progress_status_remind ON progress(status, remind_at)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)


def migrate_payments(cur):
    if not table_exists(cur, "payments"):
        execute(cur, """
        CREATE TABLE payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            amount INTEGER NOT NULL,
            method TEXT,
            note TEXT,
            paid_at TEXT,
            created_at TEXT,
            FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    else:
        cols = columns(cur, "payments")
        if "method" not in cols: add_column(cur, "payments", "method TEXT")
        if "note" not in cols: add_column(cur, "payments", "note TEXT")
        if "created_at" not in cols: add_column(cur, "payments", "created_at TEXT")
    for idx_name, idx_sql in [
        ("idx_payments_paid_at", "CREATE INDEX idx_payments_paid_at ON payments(paid_at)"),
        ("idx_payments_student", "CREATE INDEX idx_payments_student ON payments(student_id)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_payment_requests(cur):
    if not table_exists(cur, "payment_requests"):
        execute(cur, """
        CREATE TABLE payment_requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            amount INTEGER NOT NULL,
            status TEXT NOT NULL,
            created_at TEXT,
            resolved_at TEXT,
            FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    for idx_name, idx_sql in [
        ("idx_payreq_status", "CREATE INDEX idx_payreq_status ON payment_requests(status)"),
        ("idx_payreq_student", "CREATE INDEX idx_payreq_student ON payment_requests(student_id)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_help_requests(cur):
    if not table_exists(cur, "help_requests"):
        execute(cur, """
        CREATE TABLE help_requests(
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          student_id INTEGER NOT NULL,
          status TEXT NOT NULL,
          created_at TEXT NOT NULL,
          answered_at TEXT,
          FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    for idx_name, idx_sql in [
        ("idx_help_requests_student", "CREATE INDEX idx_help_requests_student ON help_requests(student_id)"),
        ("idx_help_requests_status", "CREATE INDEX idx_help_requests_status  ON help_requests(status)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_test_results(cur):
    if not table_exists(cur, "test_results"):
        print("[migrate] create table test_results")
        execute(cur, """
        CREATE TABLE test_results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            test_code TEXT NOT NULL,
            correct_count INTEGER NOT NULL,
            total_count INTEGER NOT NULL,
            passed INTEGER NOT NULL,
            created_at TEXT NOT NULL,
            UNIQUE(user_id, test_code)
        );
        """)
    else:
        need = {
            "user_id": "INTEGER",
            "test_code": "TEXT",
            "correct_count": "INTEGER",
            "total_count": "INTEGER",
            "passed": "INTEGER",
            "created_at": "TEXT",
        }
        cols = columns(cur, "test_results")
        for col, ddl in need.items():
            if col not in cols:
                add_column(cur, "test_results", f"{col} {ddl}")
    for idx_name, idx_sql in [
        ("idx_test_results_user", "CREATE INDEX idx_test_results_user ON test_results(user_id)"),
        ("idx_test_results_user_code_time", "CREATE INDEX idx_test_results_user_code_time ON test_results(user_id, test_code, created_at)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate():
    Path(os.path.dirname(DB_PATH) or ".").mkdir(parents=True, exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        execute(cur, "PRAGMA foreign_keys = ON;")
        migrate_students(cur)
        migrate_progress(cur)
        migrate_payments(cur)
        migrate_payment_requests(cur)
        migrate_help_requests(cur)
        migrate_test_results(cur) # <-- –î–û–ë–ê–í–õ–ï–ù–û
        conn.commit()
    finally:
        conn.close()

if __name__ == "__main__":
    migrate()

================================================================================
FILE: Bot\tools\migrate_unified.py
================================================================================
import asyncio
import os
from pathlib import Path

import aiosqlite
from dotenv import load_dotenv

load_dotenv()

DB_PATH = (os.getenv("DB_PATH") or "maestro.db").strip() or "maestro.db"


async def table_exists(db: aiosqlite.Connection, name: str) -> bool:
    cur = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (name,))
    return await cur.fetchone() is not None


async def column_exists(db: aiosqlite.Connection, table: str, column: str) -> bool:
    cur = await db.execute(f"PRAGMA table_info({table})")
    cols = [r[1] for r in await cur.fetchall()]
    return column in cols


async def index_exists(db: aiosqlite.Connection, name: str) -> bool:
    cur = await db.execute("SELECT name FROM sqlite_master WHERE type='index' AND name=?", (name,))
    return await cur.fetchone() is not None


async def migrate_students(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "students"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS students(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              tg_id INTEGER UNIQUE,
              username TEXT,
              created_at TEXT,
              first_name TEXT,
              last_name TEXT,
              birth_date TEXT,
              age INTEGER,
              has_guitar INTEGER DEFAULT 0,
              experience_months INTEGER DEFAULT 0,
              goal TEXT,
              phone TEXT,
              onboarding_done INTEGER DEFAULT 0,
              consent INTEGER DEFAULT 0,
              waiting_lessons INTEGER DEFAULT 0,
              last_known_max_lesson INTEGER DEFAULT 0,
              last_seen TEXT
            );
            """
        )
    else:
        cols = [
            ("tg_id", "INTEGER"),
            ("username", "TEXT"),
            ("created_at", "TEXT"),
            ("first_name", "TEXT"),
            ("last_name", "TEXT"),
            ("birth_date", "TEXT"),
            ("age", "INTEGER"),
            ("has_guitar", "INTEGER"),
            ("experience_months", "INTEGER"),
            ("goal", "TEXT"),
            ("phone", "TEXT"),
            ("onboarding_done", "INTEGER"),
            ("consent", "INTEGER"),
            ("waiting_lessons", "INTEGER"),
            ("last_known_max_lesson", "INTEGER"),
            ("last_seen", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "students", name):
                if name in {"has_guitar", "experience_months", "onboarding_done", "consent",
                            "waiting_lessons", "last_known_max_lesson"}:
                    await db.execute(f"ALTER TABLE students ADD COLUMN {name} {typ} DEFAULT 0")
                else:
                    await db.execute(f"ALTER TABLE students ADD COLUMN {name} {typ}")
    await db.commit()


async def migrate_progress(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "progress"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS progress(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              lesson_id INTEGER,
              lesson_code TEXT,
              task_code TEXT,
              status TEXT,
              sent_at TEXT,
              submitted_at TEXT,
              returned_at TEXT,
              approved_at TEXT,
              deadline_at TEXT,
              remind_at TEXT,
              reminded INTEGER DEFAULT 0,
              updated_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("lesson_id", "INTEGER"),
            ("lesson_code", "TEXT"),
            ("task_code", "TEXT"),
            ("status", "TEXT"),
            ("sent_at", "TEXT"),
            ("submitted_at", "TEXT"),
            ("returned_at", "TEXT"),
            ("approved_at", "TEXT"),
            ("deadline_at", "TEXT"),
            ("remind_at", "TEXT"),
            ("reminded", "INTEGER"),
            ("updated_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "progress", name):
                if name == "reminded":
                    await db.execute(f"ALTER TABLE progress ADD COLUMN {name} {typ} DEFAULT 0")
                else:
                    await db.execute(f"ALTER TABLE progress ADD COLUMN {name} {typ}")

    if not await index_exists(db, "idx_progress_student_status"):
        await db.execute("CREATE INDEX idx_progress_student_status ON progress(student_id, status)")
    if not await index_exists(db, "idx_progress_remind"):
        await db.execute("CREATE INDEX idx_progress_remind ON progress(remind_at)")
    if not await index_exists(db, "idx_progress_updated"):
        await db.execute("CREATE INDEX idx_progress_updated ON progress(updated_at)")
    await db.commit()


async def migrate_payments(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "payments"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS payments(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              amount INTEGER NOT NULL,
              method TEXT,
              note TEXT,
              paid_at TEXT NOT NULL,
              created_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("amount", "INTEGER"),
            ("method", "TEXT"),
            ("note", "TEXT"),
            ("paid_at", "TEXT"),
            ("created_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "payments", name):
                await db.execute(f"ALTER TABLE payments ADD COLUMN {name} {typ}")
    if not await index_exists(db, "idx_payments_paid_at"):
        await db.execute("CREATE INDEX idx_payments_paid_at ON payments(paid_at)")
    await db.commit()


async def migrate_payment_requests(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "payment_requests"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS payment_requests(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              amount INTEGER,
              status TEXT,
              created_at TEXT,
              resolved_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("amount", "INTEGER"),
            ("status", "TEXT"),
            ("created_at", "TEXT"),
            ("resolved_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "payment_requests", name):
                await db.execute(f"ALTER TABLE payment_requests ADD COLUMN {name} {typ}")
    await db.commit()


async def migrate_points(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "points"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS points(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              source TEXT,
              amount INTEGER,
              created_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("source", "TEXT"),
            ("amount", "INTEGER"),
            ("created_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "points", name):
                await db.execute(f"ALTER TABLE points ADD COLUMN {name} {typ}")
    await db.commit()


async def migrate_views(db: aiosqlite.Connection) -> None:
    return


async def migrate():
    db_path = Path(DB_PATH)
    db_path.parent.mkdir(parents=True, exist_ok=True)

    async with aiosqlite.connect(db_path.as_posix()) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        await migrate_students(db)
        await migrate_progress(db)
        await migrate_payments(db)
        await migrate_payment_requests(db)
        await migrate_points(db)
        await migrate_views(db)

    print("[OK] –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(migrate())


================================================================================
FILE: Bot\__pycache__\config.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\__pycache__\main.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\tools\__pycache__\clear.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\tools\__pycache__\migrate_fix.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\tools\__pycache__\migrate_points.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\tools\__pycache__\migrate_schema.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\tools\__pycache__\migrate_unified.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\tests\progress.py
================================================================================
# bot/services/tests/progress.py
from typing import Literal
from aiogram import Bot, types
from bot.services.db import get_db
from bot.services.points import add
from bot.services.tests.registry import TestMeta
from bot.config import get_settings, now_utc_str

Status = Literal["locked", "available", "passed"]

PASS_THRESHOLD_PCT = 80
PASS_REWARD = 50
COOLDOWN_HOURS = 24  # 1 –ø–æ–ø—ã—Ç–∫–∞/—Å—É—Ç–∫–∏ (0 ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å)


def is_passed(correct: int, total: int) -> bool:
    return total > 0 and correct * 100 >= total * PASS_THRESHOLD_PCT


def is_unlocked(user_passed: set[str], depends_on: str | None) -> bool:
    return True if not depends_on else (depends_on in user_passed)


async def _get_student_row_by_tg_id(tg_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç row —Å –ø–æ–ª—è–º–∏ id, approved –ø–æ tg_id –∏–ª–∏ None."""
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, COALESCE(approved,0) AS approved FROM students WHERE tg_id=?",
            (tg_id,)
        )
        return await cur.fetchone()


async def user_passed_codes(user_tg_id: int) -> set[str]:
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (user_tg_id,))
        s = await cur.fetchone()
        if not s: return set()
        cur = await db.execute(
            "SELECT test_code FROM test_results WHERE user_id=? AND passed=1", (s["id"],)
        )
        rows = await cur.fetchall()
    return {r[0] for r in rows}


async def write_result_and_reward(
    user_id: int,
    meta: TestMeta,
    correct_count: int,
    total_count: int,
    tg_user: types.User,
    bot: Bot,
):
    passed = is_passed(correct_count, total_count)
    now = now_utc_str()

    # 1) –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ tg_id
    student = await _get_student_row_by_tg_id(user_id)
    if not student:
        return
    student_id = student["id"]
    approved = int(student["approved"])

    # 2) –∞–ø—Å–µ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ (student_id, meta.code)
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id FROM test_results WHERE user_id=? AND test_code=?",
            (student_id, meta.code)
        )
        existing = await cur.fetchone()

        if existing:
            await db.execute(
                "UPDATE test_results "
                "SET correct_count=?, total_count=?, passed=?, updated_at=? "
                "WHERE id=?",
                (correct_count, total_count, int(passed), now, existing["id"])
            )
        else:
            await db.execute(
                "INSERT INTO test_results "
                "(user_id, test_code, correct_count, total_count, passed, created_at, updated_at) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (student_id, meta.code, correct_count, total_count, int(passed), now, now)
            )
        await db.commit()

    # 3) –µ—Å–ª–∏ –ø—Ä–æ—à—ë–ª –∏ –æ–¥–æ–±—Ä–µ–Ω ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º +50 –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if passed and approved:
        # –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: (student_id, source, amount)
        await add(student_id, f"–¢–µ—Å—Ç: {meta.title}", PASS_REWARD)


================================================================================
FILE: Bot\services\tests\registry.py
================================================================================
# bot/services/tests/registry.py
from dataclasses import dataclass

@dataclass(frozen=True)
class TestMeta:
    code: str
    title: str
    file: str  # –ø—É—Ç—å –¥–æ JSON
    depends_on: str | None = None  # –∫–æ–¥ —Ç–µ—Å—Ç–∞-–ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞

TESTS: list[TestMeta] = [
    TestMeta(code="theory_1", title="1 —Ç–µ—Å—Ç", file="bot/data/tests/theory_1.json", depends_on=None),
    TestMeta(code="theory_2", title="2 —Ç–µ—Å—Ç", file="bot/data/tests/theory_2.json", depends_on="theory_1"),
    TestMeta(code="theory_3", title="3 —Ç–µ—Å—Ç", file="bot/data/tests/theory_3.json", depends_on="theory_2"),
    TestMeta(code="theory_4", title="4 —Ç–µ—Å—Ç", file="bot/data/tests/theory_4.json", depends_on="theory_3"),
    TestMeta(code="theory_5", title="5 —Ç–µ—Å—Ç", file="bot/data/tests/theory_5.json", depends_on="theory_4"),
    TestMeta(code="theory_6", title="6 —Ç–µ—Å—Ç", file="bot/data/tests/theory_6.json", depends_on="theory_5"),
    TestMeta(code="theory_7", title="7 —Ç–µ—Å—Ç", file="bot/data/tests/theory_7.json", depends_on="theory_6"),
    TestMeta(code="theory_8", title="8 —Ç–µ—Å—Ç", file="bot/data/tests/theory_8.json", depends_on="theory_7"),
    TestMeta(code="theory_9", title="9 —Ç–µ—Å—Ç", file="bot/data/tests/theory_9.json", depends_on="theory_8"),
    TestMeta(code="theory_10", title="10 —Ç–µ—Å—Ç", file="bot/data/tests/theory_10.json", depends_on="theory_9"),
]

def get_tests():
    return TESTS

def get_test(code: str) -> TestMeta | None:
    for t in TESTS:
        if t.code == code:
            return t
    return None

================================================================================
FILE: Bot\services\tests\__init__.py
================================================================================


================================================================================
FILE: Bot\services\__pycache__\admin_cards.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\__pycache__\db.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\__pycache__\lessons.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\__pycache__\motivation.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\__pycache__\points.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\__pycache__\ranks.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\__pycache__\reminder_worker.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\tests\__pycache__\progress.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\tests\__pycache__\registry.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\services\tests\__pycache__\__init__.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\tests\deeplink.py
================================================================================
# bot/routers/tests/deeplink.py
from aiogram import Router, types
from aiogram.fsm.context import FSMContext  # <-- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from bot.services.tests.registry import get_test
from bot.routers.tests.engine import start_test_quiz

router = Router(name="deeplink")

@router.message(lambda m: m.text and m.text.startswith("/start"))
async def start_with_payload(m: types.Message, state: FSMContext):  # <-- –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä state
    parts = m.text.split(maxsplit=1)
    payload = parts[1] if len(parts) > 1 else ""
    meta = get_test(payload)
    if meta:
        await start_test_quiz(m, m.from_user.id, meta, state)  # <-- –ü–µ—Ä–µ–¥–∞—á–∞ state
    else:
        await m.answer("–ñ–º–∏ ¬´üß† –¢–µ—Å—Ç—ã –ø–æ —Ç–µ–æ—Ä–∏–∏¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

================================================================================
FILE: Bot\routers\tests\engine.py
================================================================================
# bot/routers/tests/engine.py

from __future__ import annotations
import logging
import os
import random
import asyncio
import contextlib
import json
from collections import defaultdict
from html import escape as h
from pathlib import Path
from types import SimpleNamespace
from typing import Any, Dict, List, Optional, Tuple

from aiogram import F, Router, types
from aiogram.client.bot import Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.keyboards.student import student_main_kb
from bot.routers.tests.state import TestsFlow
from bot.services.tests.progress import (
    write_result_and_reward,
    is_passed,
    PASS_THRESHOLD_PCT,
)
from bot.services.tests.registry import TestMeta
from bot.config import get_settings

router = Router(name="tests_engine")
log = logging.getLogger(__name__)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò ======================
TIME_PER_Q = 30  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å (Telegram open_period –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 5..600)

# ===================== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ======================
# user_id -> {chat_id, tg_user, meta, qs, idx, correct, last_poll_msg_id, timer_task, state}
SESSIONS: Dict[int, Dict[str, Any]] = {}

# poll_id -> (user_id, idx)
POLL_MAP: Dict[str, tuple[int, int]] = {}

# –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ poll (answer/closed/–Ω–∞—à —Ç–∞–π–º–µ—Ä)
FINALIZED_POLLS: set[str] = set()

# –ª–æ–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥–æ–Ω–æ–∫ –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —à–∞–≥
USER_LOCKS: Dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)

# –ª–∏–º–∏—Ç—ã Telegram –¥–ª—è send_poll
MAX_Q   = 300   # –¥–ª–∏–Ω–∞ question
MAX_OPT = 100   # –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
MAX_EXP = 200   # –¥–ª–∏–Ω–∞ explanation


# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ======================

def _kb_for_question() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º: —Ç–æ–ª—å–∫–æ '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", callback_data="quiz_cancel")]]
    )


# --- –£–î–ê–õ–Å–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
# def _get_admin_ids() -> list[int]:
#     ids: list[int] = []
#     ... (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ ID –∏–∑ .env)
#     return ids

def _load_questions(meta: TestMeta) -> List[SimpleNamespace]:
    """–ß–∏—Ç–∞–µ–º JSON meta.file –∏ –æ—Ç–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ {q, options, correct_idx, why?}."""
    p = Path(meta.file)
    if not p.exists():
        raise FileNotFoundError(f"Test file not found: {p}")

    raw = json.loads(p.read_text(encoding="utf-8"))

    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
    # 1) {"questions": [...]}  2) [...]
    if isinstance(raw, list):
        items = raw
    elif isinstance(raw, dict):
        items = raw.get("questions") or raw.get("items") or raw.get("data")
    else:
        items = None

    if not isinstance(items, list) or not items:
        raise ValueError(f"{p} has no questions array")

    out: List[SimpleNamespace] = []
    for i, it in enumerate(items, 1):
        q = it.get("q")
        options = it.get("options")
        correct_idx = it.get("correct_idx")
        why = it.get("why")
        if not isinstance(q, str) or not q.strip():
            raise ValueError(f"{p}: question #{i} has empty 'q'")
        if not isinstance(options, list) or len(options) < 2:
            raise ValueError(f"{p}: question #{i} has invalid 'options'")
        if not isinstance(correct_idx, int) or not (0 <= correct_idx < len(options)):
            raise ValueError(f"{p}: question #{i} has invalid 'correct_idx'")
        out.append(SimpleNamespace(q=q, options=options, correct_idx=correct_idx, why=why))
    return out


def shuffle_options(options: List[str], correct_idx: int) -> Tuple[List[str], int]:
    """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ."""
    pairs = list(enumerate(options))
    random.shuffle(pairs)
    new_options = [t for _, t in pairs]
    new_correct_idx = next(i for i, (j, _) in enumerate(pairs) if j == correct_idx)
    return new_options, new_correct_idx


def _normalize_poll(prefix: str,
                    question: str,
                    options: List[str],
                    explanation: Optional[str]
                   ) -> Tuple[str, List[str], Optional[str]]:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞/–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤/–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram, –¥–µ–ª–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.
    """
    # –í–æ–ø—Ä–æ—Å (—É—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–µ—Ñ–∏–∫—Å–∞ "–í–æ–ø—Ä–æ—Å X/Y:\n")
    body = (question or "").strip()
    room = MAX_Q - len(prefix)
    if room < 1:
        room = 1
    if len(body) > room:
        body = body[:room - 1].rstrip() + "‚Ä¶"
    q_text = prefix + body

    # –í–∞—Ä–∏–∞–Ω—Ç—ã: <=100, –±–µ–∑ –ø—É—Å—Ç—ã—Ö, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
    out: List[str] = []
    seen: set[str] = set()
    for i, opt in enumerate(options or []):
        s = (opt or "").strip() or f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}"
        if len(s) > MAX_OPT:
            s = s[:MAX_OPT - 1].rstrip() + "‚Ä¶"
        base, k = s, 1
        while s in seen:
            suffix = f" ({k})"
            s = base[:MAX_OPT - len(suffix)] + suffix
            k += 1
        seen.add(s)
        out.append(s)

    # Explanation: <=200
    exp = None
    if explanation:
        exp = explanation.strip()
        if len(exp) > MAX_EXP:
            exp = exp[:MAX_EXP - 1].rstrip() + "‚Ä¶"

    if not (2 <= len(out) <= 10):
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(out)} (–Ω—É–∂–Ω–æ 2‚Äì10)")

    return q_text, out, exp


def _compose_explanation(q: SimpleNamespace) -> Optional[str]:
    """
    –°–æ–±–∏—Ä–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
    - —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–≤ –¢–ï–ö–£–©–ï–ú –ø–æ—Ä—è–¥–∫–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    - –±–ª–æ–∫ '–ü–æ—á–µ–º—É' –∏–∑ _explanation (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ why
    """
    try:
        correct_text = q.options[q.correct_idx]
    except Exception:
        return None
    why = getattr(q, "_explanation", None) or getattr(q, "why", None)
    parts = [f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}"]
    if isinstance(why, str) and why.strip():
        parts.append(f"–ü–æ—á–µ–º—É: {why.strip()}")
    return "\n".join(parts)


async def _deadline_watch(
    user_id: int,
    poll_id: str,
    chat_id: int,
    idx_at_start: int,
    seconds: int,
    bot: Bot,
) -> None:
    """–°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º–µ—Ä: –≤—Ä–µ–º—è –≤—ã—à–ª–æ ‚Üí —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Üí –¥–∞–ª–µ–µ/—Ñ–∏–Ω–∏—à."""
    try:
        await asyncio.sleep(seconds + 0.5)
    except asyncio.CancelledError:
        return

    lock = USER_LOCKS[user_id]
    async with lock:
        st = SESSIONS.get(user_id)
        if not st:
            return
        if st["idx"] != idx_at_start:
            return
        if poll_id in FINALIZED_POLLS:
            return
        FINALIZED_POLLS.add(poll_id)
        POLL_MAP.pop(poll_id, None)

        msg_id = st.get("last_poll_msg_id")
        if msg_id:
            with contextlib.suppress(Exception):
                await bot.stop_poll(chat_id, msg_id)

        await _finalize_step(user_id, idx_at_start, is_correct=False, bot=bot)
        st.pop("timer_task", None)


# ===================== –û–°–ù–û–í–ù–û–ô –ü–û–¢–û–ö –í–û–ü–†–û–°–ê ======================

async def _send_q(user_id: int, bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (poll) + –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞."""
    st = SESSIONS[user_id]
    idx: int = st["idx"]
    qs = st["qs"]
    q = qs[idx]
    chat_id = st["chat_id"]

    kb = _kb_for_question()

    # 1) –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ (–∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ)
    opts_shuf, cid = shuffle_options(q.options, q.correct_idx)

    # 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram
    prefix = f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(qs)}:\n"
    q_text, opts_norm, expl = _normalize_poll(prefix, q.q, opts_shuf, getattr(q, "why", None))

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–ß–ù–û —Ç–æ, —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞/–ø—Ä–æ–≤–µ—Ä–∫–∏)
    q.options = opts_norm
    q.correct_idx = cid
    q._shown_question = q_text
    q._explanation = expl

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º quiz-–æ–ø—Ä–æ—Å
    open_sec = max(5, min(600, TIME_PER_Q))
    poll_msg = await bot.send_poll(
        chat_id=chat_id,
        question=q_text,
        options=opts_norm,
        type="quiz",
        correct_option_id=cid,
        is_anonymous=False,
        open_period=open_sec,      # –≤–∏–∑—É–∞–ª; –ª–æ–≥–∏–∫—É –¥–µ—Ä–∂–∏–º –Ω–∞ —Å–≤–æ—ë–º —Ç–∞–π–º–µ—Ä–µ
        explanation=expl or None,  # –ø–æ–∫–∞–∂–µ—Ç—Å—è –≤ —Ö–∏–Ω—Ç–µ Telegram –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        reply_markup=kb,
    )

    # 5) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º poll_id -> (user, question_idx) –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–¥–ª–∞–π–Ω
    POLL_MAP[poll_msg.poll.id] = (user_id, idx)
    st["last_poll_msg_id"] = poll_msg.message_id

    if (old := st.get("timer_task")):
        old.cancel()
    st["timer_task"] = asyncio.create_task(
        _deadline_watch(user_id, poll_msg.poll.id, chat_id, idx, open_sec, bot),
        name=f"quiz_deadline_{user_id}_{idx}",
    )


async def _finalize_step(user_id: int, idx: int, is_correct: bool, bot: Bot) -> None:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–≥–∞: —Ñ–∏–¥–±–µ–∫, —Å—á—ë—Ç, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É/—Ñ–∏–Ω–∏—à."""
    st = SESSIONS.get(user_id)
    if not st:
        return

    if is_correct:
        await bot.send_message(st["chat_id"], "‚úÖ –í–µ—Ä–Ω–æ", parse_mode=None)
        st["correct"] += 1
    else:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç + –ø–æ—á–µ–º—É
        q = st["qs"][idx]
        expl_text = _compose_explanation(q)
        msg = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
        if expl_text:
            msg += "\n" + expl_text
        await bot.send_message(st["chat_id"], msg, parse_mode=None)

    st["idx"] += 1
    if st["idx"] >= len(st["qs"]):
        await _finish(user_id, bot)
    else:
        await asyncio.sleep(0.2)
        await _send_q(user_id, bot)


async def _finish(user_id: int, bot: Bot) -> None:
    """–§–∏–Ω–∞–ª —Ç–µ—Å—Ç–∞: –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º, —Å–±—Ä–æ—Å FSM, –º–µ–Ω—é."""
    st = SESSIONS.pop(user_id, None)
    if not st:
        return

    # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª
    if (t := st.get("timer_task")):
        t.cancel()

    # –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å –≤–∏—Å—è—á–∏–µ poll'—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for pid, (uid, _) in list(POLL_MAP.items()):
        if uid == user_id:
            POLL_MAP.pop(pid, None)
            FINALIZED_POLLS.add(pid)

    correct = int(st.get("correct", 0))
    total = len(st["qs"])
    passed = is_passed(correct, total)
    chat_id = st["chat_id"]

    # —Å–±—Ä–æ—Å FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
    state: Optional[FSMContext] = st.get("state")
    if state:
        with contextlib.suppress(Exception):
            await state.clear()

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
    if passed:
        text = (
            f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {correct} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö (–ø–æ—Ä–æ–≥ {PASS_THRESHOLD_PCT}% –∏ –≤—ã—à–µ).\n"
            f"–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã (–µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω)."
        )
    else:
        text = (
            f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {correct} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö (–º–µ–Ω—å—à–µ {PASS_THRESHOLD_PCT}%).\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞."
        )
    await bot.send_message(chat_id, text, parse_mode=None)

    # –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞/–Ω–∞–≥—Ä–∞–¥–∞
    with contextlib.suppress(Exception):
        await write_result_and_reward(
            user_id=user_id,
            meta=st.get("meta"),
            correct_count=correct,
            total_count=total,
            tg_user=st.get("tg_user"),
            bot=bot,
        )

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    try:
        tg_user = st.get("tg_user")
        meta = st.get("meta")
        title = getattr(meta, "title", None) or str(getattr(meta, "code", ""))
        pct = round((correct * 100) / total) if total else 0
        uname = f"@{tg_user.username}" if getattr(tg_user, "username", None) else "‚Äî"
        admin_msg = (
            "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞\n"
            f"–¢–µ—Å—Ç: {title}\n"
            f"–£—á–µ–Ω–∏–∫: {tg_user.full_name} {uname}\n"
            f"Telegram ID: {user_id}\n"
            f"–ò—Ç–æ–≥: {correct}/{total} ({pct}%) ‚Äî {'–ü–†–û–ô–î–ï–ù' if passed else '–ù–ï –ü–†–û–ô–î–ï–ù'}"
        )
        settings = get_settings()
        admin_ids = settings.admin_ids
        if not admin_ids:
            log.warning("[tests_engine] skip admin notify: no ADMIN ids configured")
        else:
            for aid in admin_ids:
                with contextlib.suppress(Exception):
                    await bot.send_message(aid, admin_msg)

    except Exception:
        pass

    await bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=student_main_kb())


# ===================== API –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–ê ======================

async def start_test_quiz(message: types.Message, user_id: int, meta: TestMeta, state: FSMContext) -> None:
    """–í—ã–∑–æ–≤ –∏–∑ tests/entry.py –∏ deeplink: –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç."""
    bot = message.bot
    chat_id = message.chat.id
    tg_user = message.from_user

    # —Å–±—Ä–æ—Å –∑–∞–ª–∏–ø—à–µ–π —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (st := SESSIONS.pop(user_id, None)):
        if (t := st.get("timer_task")):
            t.cancel()
        for pid, (uid, _) in list(POLL_MAP.items()):
            if uid == user_id:
                POLL_MAP.pop(pid, None)
                FINALIZED_POLLS.add(pid)

    # –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    qs = _load_questions(meta)

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    SESSIONS[user_id] = {
        "chat_id": chat_id,
        "tg_user": tg_user,
        "meta": meta,
        "qs": qs,
        "idx": 0,
        "correct": 0,
        "last_poll_msg_id": None,
        "timer_task": None,
        "state": state,  # —Å–æ—Ö—Ä–∞–Ω–∏–º FSM, —á—Ç–æ–±—ã –ø–æ—á–∏—Å—Ç–∏—Ç—å –≤ _finish
    }

    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∏–¥—ë—Ç –∫–≤–∏–∑"
    await state.set_state(TestsFlow.RUNNING)

    title_safe = h(getattr(meta, "title", str(getattr(meta, "code", ""))))
    await bot.send_message(
        chat_id,
        f"üß† –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç: <b>{title_safe}</b>\n–ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî {TIME_PER_Q} —Å–µ–∫.",
        parse_mode=ParseMode.HTML,
    )

    await _send_q(user_id, bot)


# ===================== –•–≠–ù–î–õ–ï–†–´ TELEGRAM ======================

@router.poll_answer()
async def on_poll_answer(pa: types.PollAnswer, bot: Bot) -> None:
    pid = pa.poll_id
    bind = POLL_MAP.pop(pid, None)
    if not bind:
        return
    user_id, idx_from_map = bind

    lock = USER_LOCKS[user_id]
    async with lock:
        st = SESSIONS.get(user_id)
        if not st:
            return
        if idx_from_map != st["idx"]:
            return

        # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—à —Ç–∞–π–º–µ—Ä
        if (t := st.pop("timer_task", None)):
            t.cancel()

        # –¥–µ–¥—É–ø –ø–æ poll'—É
        if pid in FINALIZED_POLLS:
            return
        FINALIZED_POLLS.add(pid)

        selected = pa.option_ids[0] if pa.option_ids else None
        is_correct = (selected == st["qs"][st["idx"]].correct_idx)
        await _finalize_step(user_id, st["idx"], is_correct, bot=bot)


@router.poll()
async def on_poll_closed(p: types.Poll, bot: Bot) -> None:
    # —è–¥—Ä–æ ‚Äî –Ω–∞—à —Ç–∞–π–º–µ—Ä; –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ best-effort –ø–æ–¥—á–∏—Å—Ç–∫–∞
    if not p.is_closed:
        return
    pid = p.id

    bind = POLL_MAP.pop(pid, None)
    if not bind:
        return
    user_id, idx_from_map = bind

    lock = USER_LOCKS[user_id]
    async with lock:
        st = SESSIONS.get(user_id)
        if not st:
            return
        if idx_from_map != st["idx"]:
            return

        if (t := st.pop("timer_task", None)):
            t.cancel()

        if pid in FINALIZED_POLLS:
            return
        FINALIZED_POLLS.add(pid)

        await _finalize_step(user_id, st["idx"], is_correct=False, bot=bot)


@router.callback_query(F.data == "quiz_cancel")
async def on_quiz_cancel(cb: types.CallbackQuery, bot: Bot, state: FSMContext) -> None:
    uid = cb.from_user.id
    st = SESSIONS.pop(uid, None)

    # –∑–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π poll
    if st:
        chat_id = st["chat_id"]
        if (t := st.get("timer_task")):
            t.cancel()
        msg_id = st.get("last_poll_msg_id")
        if msg_id:
            with contextlib.suppress(Exception):
                await bot.stop_poll(chat_id, msg_id)

    # –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—ã
    for pid, (u, _) in list(POLL_MAP.items()):
        if u == uid:
            POLL_MAP.pop(pid, None)
            FINALIZED_POLLS.add(pid)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
    try:
        tg_user = cb.from_user
        uname = f"@{tg_user.username}" if getattr(tg_user, "username", None) else "‚Äî"
        admin_msg = (
            "üß™ –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω\n"
            f"–£—á–µ–Ω–∏–∫: {tg_user.full_name} {uname}\n"
            f"Telegram ID: {tg_user.id}"
        )
        settings = get_settings()
        admin_ids = settings.admin_ids
        for aid in admin_ids:
            with contextlib.suppress(Exception):
                await bot.send_message(aid, admin_msg)
    except Exception:
        pass

    # —Å–±—Ä–æ—Å–∏—Ç—å FSM –∏ –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é
    with contextlib.suppress(Exception):
        await state.clear()

    await cb.message.answer("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –û–Ω –Ω–µ —Å–¥–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=student_main_kb())
    await cb.answer()


@router.message(F.text == "/cancel_quiz")
async def cancel_quiz_cmd(m: types.Message, state: FSMContext) -> None:
    uid = m.from_user.id
    st = SESSIONS.pop(uid, None)

    if st:
        chat_id = st["chat_id"]
        if (t := st.get("timer_task")):
            t.cancel()
        msg_id = st.get("last_poll_msg_id")
        if msg_id:
            with contextlib.suppress(Exception):
                await m.bot.stop_poll(chat_id, msg_id)

    for pid, (u, _) in list(POLL_MAP.items()):
        if u == uid:
            POLL_MAP.pop(pid, None)
            FINALIZED_POLLS.add(pid)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
    try:
        tg_user = m.from_user
        uname = f"@{tg_user.username}" if getattr(tg_user, "username", None) else "‚Äî"
        admin_msg = (
            "üß™ –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω\n"
            f"–£—á–µ–Ω–∏–∫: {tg_user.full_name} {uname}\n"
            f"Telegram ID: {uid}"
        )
        settings = get_settings()
        admin_ids = settings.admin_ids
        for aid in admin_ids:
            with contextlib.suppress(Exception):
                await m.bot.send_message(aid, admin_msg)
    except Exception:
        pass

    with contextlib.suppress(Exception):
        await state.clear()

    await m.answer("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –û–Ω –Ω–µ —Å–¥–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=student_main_kb())

================================================================================
FILE: Bot\routers\tests\entry.py
================================================================================
# bot/routers/tests/entry.py
from aiogram import Router, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from bot.routers.tests.state import TestsFlow

from bot.keyboards.student import student_main_kb
from bot.services.tests.registry import get_tests, get_test
from bot.services.tests.progress import is_unlocked, user_passed_codes
from bot.routers.tests.engine import start_test_quiz

router = Router(name="tests_entry")


@router.message(F.text == "üß† –¢–µ—Å—Ç—ã –ø–æ —Ç–µ–æ—Ä–∏–∏")
async def tests_menu(m: types.Message, state: FSMContext):
    await state.set_state(TestsFlow.MENU)
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:", reply_markup=ReplyKeyboardRemove())

    kb = InlineKeyboardBuilder()
    all_tests = get_tests()
    passed_codes = await user_passed_codes(m.from_user.id)

    for t in all_tests:
        unlocked = is_unlocked(passed_codes, t.depends_on)
        passed = t.code in passed_codes

        if passed:
            text = f"‚úÖ {t.title}"
        elif unlocked:
            text = f"‚ñ∂Ô∏è {t.title}"
        else:
            text = f"üîí {t.title}"

        if unlocked:
            kb.button(text=text, callback_data=f"tests:start:{t.code}")
        else:
            kb.button(text=text, callback_data=f"tests:locked:{t.code}")

    kb.adjust(1)

    kb.button(text="‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tests:back")

    await m.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:", reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("tests:start:"))
async def tests_start(cb: types.CallbackQuery, state: FSMContext):
    test_code = cb.data.split(":")[2]
    meta = get_test(test_code)

    if not meta:
        await cb.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    passed_codes = await user_passed_codes(cb.from_user.id)
    unlocked = is_unlocked(passed_codes, meta.depends_on)

    if not unlocked:
        await cb.answer("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –µ—â—ë –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        return

    await cb.answer()
    await start_test_quiz(cb.message, cb.from_user.id, meta, state)


@router.callback_query(F.data.startswith("tests:locked:"))
async def tests_locked(cb: types.CallbackQuery):
    await cb.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç.", show_alert=True)


@router.callback_query(F.data == "tests:back")
async def tests_back(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=student_main_kb())
    await cb.answer()

================================================================================
FILE: Bot\routers\tests\state.py
================================================================================
from aiogram.fsm.state import StatesGroup, State

class TestsFlow(StatesGroup):
    MENU = State()      # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ (reply-–∫–ª–∞–≤–∞ —Å–∫—Ä—ã—Ç–∞)
    RUNNING = State()   # –∏–¥—ë—Ç —Å–∞–º –∫–≤–∏–∑


================================================================================
FILE: Bot\routers\tests\__init__.py
================================================================================


================================================================================
FILE: Bot\routers\__pycache__\admin.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\admin_reply.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\debug.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\fallback.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\forms.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\lesson_flow.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\onboarding.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\student.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\__pycache__\__init__.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\tests\__pycache__\deeplink.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\tests\__pycache__\engine.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\tests\__pycache__\entry.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\tests\__pycache__\state.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\routers\tests\__pycache__\__init__.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\middlewares\__pycache__\block_until_done.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\keyboards\__pycache__\admin.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\keyboards\__pycache__\student.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: Bot\data\tests\theory_1.json
================================================================================
[
  {
    "q": "–° –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ –≥–∏—Ç–∞—Ä–µ —Å—á–∏—Ç–∞—é—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä—É–Ω?",
    "options": [
      "–°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑: 1 ‚Äî —Å–∞–º–∞—è —Ç–æ–ª—Å—Ç–∞—è, 6 ‚Äî —Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è",
      "–ü—Ä–∞–≤–∏–ª –Ω–µ—Ç ‚Äî –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ",
      "–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: 1 ‚Äî —Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è, 6 ‚Äî —Å–∞–º–∞—è —Ç–æ–ª—Å—Ç–∞—è",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ –∫–æ—Ä–ø—É—Å—É"
    ],
    "correct_idx": 2,
    "why": "–ü—Ä–∏–Ω—è—Ç–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: 1-—è ‚Äî —Ç–æ–Ω–∫–∞—è (–≤–Ω–∏–∑—É), 6-—è ‚Äî —Ç–æ–ª—Å—Ç–∞—è (–≤–≤–µ—Ä—Ö—É)."
  },
  {
    "q": "–ö–∞–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –Ω–æ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ –æ—Ç 1-–π –∫ 6-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "E, A, D, G, B, E",
      "E, G, B, D, A, E",
      "D, G, B, E, A, E",
      "E, B, G, D, A, E"
    ],
    "correct_idx": 3,
    "why": "–û—Ç 1-–π –∫ 6-–π: E (–º–∏), B (—Å–∏), G (—Å–æ–ª—å), D (—Ä–µ), A (–ª—è), E (–º–∏). –í–∞—Ä–∏–∞–Ω—Ç ‚ÄúE, A, D, G, B, E‚Äù ‚Äî —ç—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –æ—Ç 6-–π –∫ 1-–π."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´—Å—Ç—Ä–æ–π¬ª –≥–∏—Ç–∞—Ä—ã?",
    "options": [
      "–¢–æ–ª—â–∏–Ω–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç—Ä—É–Ω",
      "–ü–æ—Ä—è–¥–æ–∫ –Ω–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å—Ç—Ä—É–Ω—ã",
      "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∞–¥–æ–≤ –Ω–∞ –≥—Ä–∏—Ñ–µ",
      "–¢–∏–ø –¥–µ—Ä–µ–≤–∞ –∫–æ—Ä–ø—É—Å–∞"
    ],
    "correct_idx": 1,
    "why": "–°—Ç—Ä–æ–π ‚Äî —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞–±–æ—Ä —Ü–µ–ª–µ–≤—ã—Ö –Ω–æ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω."
  },
  {
    "q": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç—Ä–æ–π?",
    "options": [
      "–ß—Ç–æ–±—ã —Å—Ç—Ä—É–Ω—ã —Å–ª—É–∂–∏–ª–∏ –¥–æ–ª—å—à–µ",
      "–ß—Ç–æ–±—ã –≥–∏—Ç–∞—Ä–∞ –±—ã–ª–∞ –≥—Ä–æ–º—á–µ",
      "–ß—Ç–æ–±—ã –∞–∫–∫–æ—Ä–¥—ã/–º–µ–ª–æ–¥–∏–∏ –∑–≤—É—á–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –º—É–∑—ã–∫–∞–Ω—Ç—ã –ø–æ–Ω–∏–º–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞",
      "–ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ–∫-–º—É–∑—ã–∫—É"
    ],
    "correct_idx": 2,
    "why": "–ï–¥–∏–Ω—ã–π —Å—Ç—Ä–æ–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∞–∫–∫–æ—Ä–¥–æ–≤/—Ç–∞–±–∞ –º–µ–∂–¥—É –º—É–∑—ã–∫–∞–Ω—Ç–∞–º–∏."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∏–≥—Ä–∞—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–Ω–µ¬ª?",
    "options": [
      "–ò–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ç–æ—Ä–æ–º",
      "–ò–≥—Ä–∞—Ç—å —Ñ–ª–∞–∂–æ–ª–µ—Ç–æ–º",
      "–ò–≥—Ä–∞—Ç—å –Ω–∞ 12-–º –ª–∞–¥—É",
      "–ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–≤—É–∫ –±–µ–∑ –∑–∞–∂–∞—Ç–∏—è –ª–∞–¥–∞"
    ],
    "correct_idx": 3,
    "why": "–ü—É—Å—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ ‚Äî —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –±–µ–∑ –ø—Ä–∏–∂–∞—Ç–∏—è –∫ –ª–∞–¥–∞–º; –∑–≤—É—á–∏—Ç –µ—ë –±–∞–∑–æ–≤–∞—è –Ω–æ—Ç–∞ —Å—Ç—Ä–æ—è."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 1-–π —Å—Ç—Ä—É–Ω–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ?",
    "options": [
      "G (—Å–æ–ª—å)",
      "E (–º–∏)",
      "A (–ª—è)",
      "B (—Å–∏)"
    ],
    "correct_idx": 1,
    "why": "1-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî E (–º–∏)."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 2-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "A (–ª—è)",
      "G (—Å–æ–ª—å)",
      "B (—Å–∏)",
      "C (–¥–æ)"
    ],
    "correct_idx": 2,
    "why": "2-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî B (—Å–∏)."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 3-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "G (—Å–æ–ª—å)",
      "D (—Ä–µ)",
      "E (–º–∏)",
      "F (—Ñ–∞)"
    ],
    "correct_idx": 0,
    "why": "3-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî G (—Å–æ–ª—å)."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 6-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "C (–¥–æ)",
      "D (—Ä–µ)",
      "A (–ª—è)",
      "E (–º–∏)"
    ],
    "correct_idx": 3,
    "why": "6-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî E (–º–∏)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ 1-–π –∏ 6-–π —Å—Ç—Ä—É–Ω–∞—Ö:",
    "options": [
      "–û–±–µ ‚Äî –Ω–æ—Ç–∞ E –∏ –∑–≤—É—á–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ –≤—ã—Å–æ—Ç–µ",
      "–û–±–µ ‚Äî –Ω–æ—Ç–∞ E, –Ω–æ 1-—è –∑–≤—É—á–∏—Ç –≤—ã—à–µ, –∞ 6-—è ‚Äî –Ω–∏–∂–µ",
      "1-—è ‚Äî A, 6-—è ‚Äî E",
      "–≠—Ç–æ —Ä–∞–∑–Ω—ã–µ –Ω–æ—Ç—ã –≤ –ª—é–±–æ–º —Å—Ç—Ä–æ–µ"
    ],
    "correct_idx": 1,
    "why": "–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ 1-—è –∏ 6-—è ‚Äî –æ–±–µ E; —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä: 1-—è ‚Äî –≤—ã—Å–æ–∫–∞—è, 6-—è ‚Äî –Ω–∏–∑–∫–∞—è."
  }
]


================================================================================
FILE: Bot\data\tests\theory_10.json
================================================================================
[
  {
    "q": "–° –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å—á–∏—Ç–∞—é—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä—É–Ω –Ω–∞ –≥–∏—Ç–∞—Ä–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏?",
    "options": [
      "–° –≥–æ–ª–æ–≤—ã –∫ –ø–æ–¥—Å—Ç–∞–≤–∫–µ",
      "–°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑: 1 ‚Äî —Ç–æ–ª—Å—Ç–∞—è, 6 ‚Äî —Ç–æ–Ω–∫–∞—è",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ –∫–æ—Ä–ø—É—Å—É",
      "–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: 1 ‚Äî —Ç–æ–Ω–∫–∞—è, 6 ‚Äî —Ç–æ–ª—Å—Ç–∞—è"
    ],
    "correct_idx": 3,
    "why": "–ù—É–º–µ—Ä–∞—Ü–∏—è –∏–¥—ë—Ç –æ—Ç —Å–∞–º–æ–π —Ç–æ–Ω–∫–æ–π (–≤–Ω–∏–∑—É) –∫ —Å–∞–º–æ–π —Ç–æ–ª—Å—Ç–æ–π (–≤–≤–µ—Ä—Ö—É)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω –æ—Ç 1-–π –∫ 6-–π –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ.",
    "options": [
      "A, D, G, B, E, A",
      "D, G, B, E, A, E",
      "E, B, G, D, A, E",
      "E, A, D, G, B, E"
    ],
    "correct_idx": 2,
    "why": "–û—Ç 1 –∫ 6: E‚ÄìB‚ÄìG‚ÄìD‚ÄìA‚ÄìE. –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (6‚Üí1) ‚Äî E‚ÄìA‚ÄìD‚ÄìG‚ÄìB‚ÄìE."
  },
  {
    "q": "–ö–∞–∫–∏–µ –¥–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –±—É–∫–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ –∑–≤—É—á–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö?",
    "options": [
      "2-—è –∏ 5-—è (B –∏ A)",
      "–¢–æ–ª—å–∫–æ 2-—è –∏ 3-—è",
      "3-—è –∏ 4-—è (G –∏ D)",
      "1-—è –∏ 6-—è (E)"
    ],
    "correct_idx": 3,
    "why": "–û–±–µ ‚Äî E: –ø–µ—Ä–≤–∞—è –≤—ã—Å–æ–∫–∞—è, —à–µ—Å—Ç–∞—è –Ω–∏–∑–∫–∞—è."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´—Å—ã–≥—Ä–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É¬ª?",
    "options": [
      "–ì–ª—É—à–∏—Ç—å —Å—Ç—Ä—É–Ω—É –ª–∞–¥–æ–Ω—å—é",
      "–ó–∞–∂–∞—Ç—å 12-–π –ª–∞–¥",
      "–ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –±–µ–∑ –∑–∞–∂–∞—Ç–∏—è –Ω–∞ –ª–∞–¥–∞—Ö",
      "–¢—è–Ω—É—Ç—å –±–µ–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—Ç—ã"
    ],
    "correct_idx": 2,
    "why": "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –∑–≤—É—á–∏—Ç –±–µ–∑ –ø—Ä–∏–∂–∞—Ç–∏—è, –µ—ë –Ω–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–µ–º."
  },
  {
    "q": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç—Ä–æ–π –≤—Å–µ–º –≥–∏—Ç–∞—Ä–∏—Å—Ç–∞–º?",
    "options": [
      "–ß—Ç–æ–±—ã —Å—Ç—Ä—É–Ω—ã —Å–ª—É–∂–∏–ª–∏ –¥–æ–ª—å—à–µ",
      "–ß—Ç–æ–±—ã –≥–∏—Ç–∞—Ä–∞ —Å—Ç–∞–ª–∞ –≥—Ä–æ–º—á–µ",
      "–ß—Ç–æ–±—ã –ª–µ–≥—á–µ –±—ã–ª–æ –∏–≥—Ä–∞—Ç—å —Ñ–ª–∞–∂–æ–ª–µ—Ç—ã",
      "–ß—Ç–æ–±—ã –∞–∫–∫–æ—Ä–¥—ã –∏ —Ç–∞–±—ã —Å–æ–≤–ø–∞–¥–∞–ª–∏ –∏ –∑–≤—É—á–∞–ª–∏ –≤–µ—Ä–Ω–æ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏"
    ],
    "correct_idx": 3,
    "why": "–ï–¥–∏–Ω—ã–π —Å—Ç—Ä–æ–π = —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–æ—Ç/—Ç–∞–±–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –∑–≤—É—á–∞–Ω–∏–µ."
  },
  {
    "q": "–¢—é–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É, –Ω–æ —Å—Ç—Ä–µ–ª–∫–∞ —É—Ö–æ–¥–∏—Ç –≤–ª–µ–≤–æ. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?",
    "options": [
      "–í—ã—à–µ —Ç–æ–Ω–∞: —Å—Ç—Ä—É–Ω—É –Ω—É–∂–Ω–æ –æ—Å–ª–∞–±–∏—Ç—å",
      "–ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ–¥–∏–∞—Ç–æ—Ä",
      "–í—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å",
      "–ù–∏–∂–µ —Ç–æ–Ω–∞: —Å—Ç—Ä—É–Ω—É –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å"
    ],
    "correct_idx": 3,
    "why": "–°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ/–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´flat¬ª ‚Äî –Ω–µ–¥–æ—Ç—è–Ω—É—Ç–æ, –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ."
  },
  {
    "q": "–ö–∞–∫–æ–π —Ç—é–Ω–µ—Ä —á–∞—â–µ –≤—Å–µ–≥–æ —É–¥–æ–±–µ–Ω –Ω–æ–≤–∏—á–∫—É –Ω–∞ –∞–∫—É—Å—Ç–∏–∫–µ?",
    "options": [
      "–õ–∞–º–ø–æ–≤—ã–π —Ç—é–Ω–µ—Ä-–∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä",
      "–ü–µ–¥–∞–ª—å–Ω—ã–π —Ç—é–Ω–µ—Ä",
      "–ö–ª–∏–ø—Å–∞ –Ω–∞ –≥–æ–ª–æ–≤–∫–µ –≥—Ä–∏—Ñ–∞",
      "–¢–æ–ª—å–∫–æ —Å—Ç–µ–Ω–¥–æ–≤—ã–π —Å—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–π"
    ],
    "correct_idx": 2,
    "why": "–ö–ª–∏–ø—Å–∞ –ª–æ–≤–∏—Ç –≤–∏–±—Ä–∞—Ü–∏–∏ –∫–æ—Ä–ø—É—Å–∞, –ø—Ä–æ—Å—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã –∏ –¥—Ä–µ–¥–Ω–æ—É—Ç",
      "–ù—É–∂–µ–Ω —É—Å–∏–ª–∏—Ç–µ–ª—å –¥–ª—è –∑–≤—É—á–∞–Ω–∏—è",
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã –∏ —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ",
      "–ü–æ–ª–Ω—ã–π –∫–æ—Ä–ø—É—Å –±–µ–∑ —Ä–æ–∑–µ—Ç–∫–∏ (solid-body)"
    ],
    "correct_idx": 2,
    "why": "–ö–ª–∞—Å—Å–∏–∫–∞: –Ω–µ–π–ª–æ–Ω, —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ, –º—è–≥–∫–æ–µ –Ω–µ–≥—Ä–æ–º–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ (—Å—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–Ω–µ)?",
    "options": [
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã, –∑–≤–æ–Ω–∫–æ–µ –∏ –≥—Ä–æ–º–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ",
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –ø–æ—á—Ç–∏ –Ω–µ —Å–ª—ã—à–Ω–æ",
      "–¢–æ–ª—å–∫–æ –Ω–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã",
      "–í—Å–µ–≥–¥–∞ —É–∑–æ—Ä ¬´—Ñ–∞–ª–µ–Ω—á–∏–∫¬ª –Ω–∞ —Ä–æ–∑–µ—Ç–∫–µ"
    ],
    "correct_idx": 0,
    "why": "–°—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–Ω—ã –¥–∞—é—Ç —è—Ä–∫–æ—Å—Ç—å/–≥—Ä–æ–º–∫–æ—Å—Ç—å; —É—Å–∏–ª–∏—Ç–µ–ª—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
  },
  {
    "q": "–ß—Ç–æ –≤–µ—Ä–Ω–æ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—É?",
    "options": [
      "–í—Å–µ–≥–¥–∞ —à–∏—Ä–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ø–æ –≥—Ä–∏—Ñ—É",
      "–°—Ç—Ä—É–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–µ–π–ª–æ–Ω–æ–≤—ã–µ",
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å —Ç–∏—Ö–æ",
      "–ò–º–µ–µ—Ç —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è"
    ],
    "correct_idx": 2,
    "why": "Solid-body –ø–æ—á—Ç–∏ –Ω–µ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –∑–≤—É–∫ ‚Äî –Ω—É–∂–µ–Ω —É—Å–∏–ª–∏—Ç–µ–ª—å/—Ç—Ä–∞–∫—Ç."
  },
  {
    "q": "–ö–∞–∫–∞—è –¥–µ—Ç–∞–ª—å –Ω–∞ –∫–æ—Ä–ø—É—Å–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–Ω—ã —Å–Ω–∏–∑—É?",
    "options": [
      "–†–æ–∑–µ—Ç–∫–∞",
      "–ü–æ—Ä–æ–∂–µ–∫",
      "–ê–Ω–∫–µ—Ä",
      "–ü–æ–¥—Å—Ç–∞–≤–∫–∞ (–±—Ä–∏–¥–∂)"
    ],
    "correct_idx": 3,
    "why": "–°—Ç—Ä—É–Ω—ã –∫—Ä–µ–ø—è—Ç—Å—è –≤/–Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ, –ø–æ—Ä–æ–∂–µ–∫ ‚Äî —É –≥–æ–ª–æ–≤—ã."
  },
  {
    "q": "–ì–¥–µ –Ω–∞ –≥—Ä–∏—Ñ–µ –æ–±—ã—á–Ω–æ —Å—Ç–∞–≤—è—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∫–∏-¬´—Ç–æ—á–∫–∏¬ª –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è?",
    "options": [
      "–ù–∞ 4-–º –∏ 6-–º",
      "–ù–∞ 2-–º –∏ 4-–º",
      "–ù–∞ 1-–º –∏ 2-–º",
      "–ù–∞ 3-–º –∏ 5-–º –ª–∞–¥–∞—Ö"
    ],
    "correct_idx": 3,
    "why": "–ß–∞—Å—Ç–æ –º–µ—Ç–∫–∏ ‚Äî 3-–π, 5-–π –ª–∞–¥ (–¥–∞–ª—å—à–µ ‚Äî 7, 9, 12 –∏ —Ç.–¥.)."
  },
  {
    "q": "–ß—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±—É–ª–∞—Ç—É—Ä–∞ –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏?",
    "options": [
      "–î–∏–Ω–∞–º–∏–∫—É (–≥—Ä–æ–º–∫–æ—Å—Ç—å)",
      "–¢–æ—á–Ω—ã–π —Ä–∏—Ç–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "–ö–∞–∫–∞—è —Å—Ç—Ä—É–Ω–∞ –∏ –∫–∞–∫–æ–π –ª–∞–¥",
      "–¢–µ–º–ø –∏ —Ä–∞–∑–º–µ—Ä"
    ],
    "correct_idx": 2,
    "why": "–¢–∞–±—ã ‚Äî ¬´–∫–∞—Ä—Ç–∞ –ø–∞–ª—å—Ü–µ–≤¬ª: –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –≥—Ä–∏—Ñ–µ, –Ω–µ —Ä–∏—Ç–º."
  },
  {
    "q": "–ö–∞–∫–∞—è –ª–∏–Ω–∏—è —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "–°—Ä–µ–¥–Ω—è—è (D)",
      "–õ—é–±–∞—è ‚Äî –≤ —Ç–∞–±–∞—Ö –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
      "–ù–∏–∂–Ω—è—è (E)",
      "–í–µ—Ä—Ö–Ω—è—è (e)"
    ],
    "correct_idx": 3,
    "why": "–í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–∞ ‚Äî —Ç–æ–Ω–∫–∞—è –µ (1-—è —Å—Ç—Ä—É–Ω–∞)."
  },
  {
    "q": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Ü–∏—Ñ—Ä–∞ ¬´0¬ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ?",
    "options": [
      "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞",
      "–ì–ª—É—à—ë–Ω–∞—è —Å—Ç—Ä—É–Ω–∞",
      "–ò–≥—Ä–∞—Ç—å —Ç–∏—à–µ",
      "–ë–µ–Ω–¥ –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞"
    ],
    "correct_idx": 0,
    "why": "–ù–æ–ª—å ‚Äî –Ω–µ –∑–∞–∂–∏–º–∞—Ç—å –ª–∞–¥."
  },
  {
    "q": "–ó–∞–ø–∏—Å—å: E|--3--. –ß—Ç–æ —Å—ã–≥—Ä–∞—Ç—å?",
    "options": [
      "6-—è –æ—Ç–∫—Ä—ã—Ç–∞—è",
      "6-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥ (G)",
      "5-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥ (C)",
      "1-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥ (G)"
    ],
    "correct_idx": 1,
    "why": "–ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è ‚Äî 6-—è —Å—Ç—Ä—É–Ω–∞; 3-–π –ª–∞–¥ –Ω–∞ –Ω–µ–π ‚Äî –Ω–æ—Ç–∞ G."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Å–∏–º–≤–æ–ª—ã ¬´h¬ª –∏ ¬´p¬ª –≤ —Ç–∞–±–∞—Ö?",
    "options": [
      "Harmonic –∏ palm mute",
      "Head –∏ pickup",
      "Half-step –∏ power chord",
      "Hammer-on –∏ pull-off ‚Äî –ø—Ä–∏—ë–º—ã –ª–µ–≥–∞—Ç–æ –æ–¥–Ω–æ–π —Ä—É–∫–æ–π"
    ],
    "correct_idx": 3,
    "why": "h ‚Äî —É–¥–∞—Ä–∏—Ç—å –ø–∞–ª–µ—Ü (—Ö–∞–º–º–µ—Ä), p ‚Äî —Å–æ—Ä–≤–∞—Ç—å (–ø—É–ª–ª-–æ—Ñ—Ñ)."
  },
  {
    "q": "–ö–∞–∫–∞—è –ø–∞—Ä–∞ –≤–µ—Ä–Ω–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç ¬´/¬ª –∏ ¬´\\¬ª?",
    "options": [
      "¬´/¬ª ‚Äî –≤–Ω–∏–∑, ¬´\\¬ª ‚Äî –≤–≤–µ—Ä—Ö",
      "–û–±–∞ ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "¬´/¬ª ‚Äî —Å–ª–∞–π–¥ –≤–≤–µ—Ä—Ö, ¬´\\¬ª ‚Äî —Å–ª–∞–π–¥ –≤–Ω–∏–∑",
      "–û–±–∞ ‚Äî –±–µ–Ω–¥"
    ],
    "correct_idx": 2,
    "why": "–ö–æ—Å–∞—è –≤–ø–µ—Ä—ë–¥ ‚Äî –≤–≤–µ—Ä—Ö; –æ–±—Ä–∞—Ç–Ω–∞—è ‚Äî –≤–Ω–∏–∑ –ø–æ –≥—Ä–∏—Ñ—É."
  },
  {
    "q": "–ß—Ç–æ –≤ —Ç–∞–±–∞—Ö –æ–∑–Ω–∞—á–∞–µ—Ç ¬´x¬ª –∏ ¬´~¬ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ?",
    "options": [
      "–¢–∏—Ö–∞—è –Ω–æ—Ç–∞ –∏ —Å–ª–∞–π–¥",
      "–¢—ç–ø –∏ –±–µ–Ω–¥",
      "–í–∏–±—Ä–∞—Ç–æ –∏ –≥–ª—É—à–µ–Ω–∏–µ",
      "–ì–ª—É—à–µ–Ω–∏–µ –∏ –≤–∏–±—Ä–∞—Ç–æ"
    ],
    "correct_idx": 3,
    "why": "x ‚Äî —â–µ–ª—á–æ–∫ –±–µ–∑ –≤—ã—Å–æ—Ç—ã; ~ ‚Äî –∫–æ–ª–µ–±–∞–Ω–∏—è –≤—ã—Å–æ—Ç—ã (–≤–∏–±—Ä–∞—Ç–æ)."
  },
  {
    "q": "–ü–æ—á–µ–º—É –ø–æ –æ–±—ã—á–Ω–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ —Å–ª–æ–∂–Ω–æ —Ç–æ—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "options": [
      "–†–∏—Ç–º –æ–±—ã—á–Ω–æ –Ω–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, –Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å/—Ä–∞–∑–º–µ—Ç–∫–∞",
      "–í —Ç–∞–±–∞—Ö –Ω–µ—Ç —Ü–∏—Ñ—Ä",
      "–¢–∞–±—ã —á–∏—Ç–∞—é—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ",
      "–¢–∞–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥—ã"
    ],
    "correct_idx": 0,
    "why": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–±—ã ‚Äî –±–µ–∑ —Ä–∏—Ç–º–∏–∫–∏; –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ –∞—É–¥–∏–æ/—Ä–∞–∑–º–µ—Ç–∫—É."
  },
  {
    "q": "–ß—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç Songsterr –∫ —Ç–∞–±–∞–º, –æ–±–ª–µ–≥—á–∞—è —á—Ç–µ–Ω–∏–µ —Ä–∏—Ç–º–∞?",
    "options": [
      "–†–∏—Ç–º–∏—á–µ—Å–∫—É—é –Ω–æ—Ç–∞—Ü–∏—é (—á–µ—Ç–≤–µ—Ä—Ç–∏, –≤–æ—Å—å–º—ã–µ –∏ —Ç.–¥.) —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–∞–±–æ–º",
      "–¶–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á—É –≤—ã—Å–æ—Ç—ã –∑–≤—É–∫–∞",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å—Ç—Ä–æ–π–∫—É —Å—Ç—Ä–æ—è",
      "–¢–æ–ª—å–∫–æ —Ç–µ–º–ø –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"
    ],
    "correct_idx": 0,
    "why": "–ï—Å—Ç—å –ª–∏–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –≤–æ—Å—å–º—ã—Ö –Ω–æ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–∞–∫—Ç 4/4?",
    "options": [
      "8",
      "12",
      "6",
      "4"
    ],
    "correct_idx": 0,
    "why": "–ß–µ—Ç–≤–µ—Ä—Ç—å = 2 –≤–æ—Å—å–º—ã—Ö; 4√ó2 = 8."
  },
  {
    "q": "–ö–∞–∫ –æ–±—ã—á–Ω–æ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç —Å—á—ë—Ç –≤–æ—Å—å–º—ã—Ö –≤ 4/4?",
    "options": [
      "1-–µ-–∏-–∞",
      "–†–∞–∑-–¥–≤–∞-—Ç—Ä–∏",
      "1-–∏-–∞",
      "1-–∏, 2-–∏, 3-–∏, 4-–∏"
    ],
    "correct_idx": 3,
    "why": "–î–≤–µ –≤–æ—Å—å–º—ã—Ö –≤ —á–µ—Ç–≤–µ—Ä—Ç–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º ¬´–∏¬ª –º–µ–∂–¥—É –¥–æ–ª—è–º–∏."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–ø—É–ª—å—Å¬ª –≤ –º—É–∑—ã–∫–µ?",
    "options": [
      "–°–º–µ–Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
      "–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤",
      "–†–æ–≤–Ω—ã–µ —É–¥–∞—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–∂–∏—Ç—Å—è —Ä–∏—Ç–º",
      "–°–∞–º —Ä–∏—Å—É–Ω–æ–∫ –¥–ª–∏–Ω/–∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–æ—Ç"
    ],
    "correct_idx": 2,
    "why": "–ü—É–ª—å—Å = –º–µ—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞, —Ä–∏—Ç–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É."
  },
  {
    "q": "–ß–µ–º —Ä–∏—Ç–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—É–ª—å—Å–∞?",
    "options": [
      "–†–∏—Ç–º ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –±–∞—Ä–∞–±–∞–Ω—ã",
      "–†–∏—Ç–º ‚Äî —Ä–∏—Å—É–Ω–æ–∫ –Ω–æ—Ç–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ–≤–µ—Ä—Ö —Ä–æ–≤–Ω–æ–≥–æ –ø—É–ª—å—Å–∞",
      "–†–∏—Ç–º ‚Äî –≤—Å–µ–≥–¥–∞ –≥—Ä–æ–º—á–µ –ø—É–ª—å—Å–∞",
      "–û—Ç–ª–∏—á–∏–π –Ω–µ—Ç"
    ],
    "correct_idx": 1,
    "why": "–ü—É–ª—å—Å –ø–æ—Å—Ç–æ—è–Ω–µ–Ω; —Ä–∏—Ç–º –º–µ–Ω—è–µ—Ç—Å—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∏—Å—É–Ω–æ–∫."
  },
  {
    "q": "–ß—Ç–æ —Å—Ç—Ä–æ–≥–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–ª–∞–¥–æ–º¬ª –Ω–∞ –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–°–∞–º–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –ø–æ–ª–æ—Å–∫–∞",
      "–õ—é–±–∞—è —á–∞—Å—Ç—å –∫–æ—Ä–ø—É—Å–∞",
      "–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ä–æ–∂–∫–∞–º–∏",
      "–õ—é–±–∞—è —Ç–æ—á–∫–∞ –Ω–∞ –Ω–∞–∫–ª–∞–¥–∫–µ"
    ],
    "correct_idx": 2,
    "why": "–õ–∞–¥ ‚Äî –∏–º–µ–Ω–Ω–æ —É—á–∞—Å—Ç–æ–∫ –º–µ–∂–¥—É –ø–æ—Ä–æ–∂–∫–∞–º–∏."
  },
  {
    "q": "–ì–¥–µ –ª—É—á—à–µ —Å—Ç–∞–≤–∏—Ç—å –ø–∞–ª–µ—Ü –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏ –Ω–æ—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞?",
    "options": [
      "–ì–¥–µ —É–≥–æ–¥–Ω–æ ‚Äî –Ω–µ –≤–ª–∏—è–µ—Ç",
      "–ü—Ä—è–º–æ –Ω–∞ –ø–æ—Ä–æ–∂–æ–∫",
      "–ù–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ –º–µ–∂–¥—É –ø–æ—Ä–æ–∂–∫–∞–º–∏",
      "–í–Ω—É—Ç—Ä–∏ –ª–∞–¥–∞, –±–ª–∏–∂–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Ä–æ–∂–∫—É"
    ],
    "correct_idx": 3,
    "why": "–ë–ª–∏–∂–µ –∫ –ø–æ—Ä–æ–∂–∫—É ‚Äî –º–µ–Ω—å—à–µ –¥—Ä–µ–±–µ–∑–≥–∞, —á–∏—â–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–ø–æ–∑–∏—Ü–∏—è¬ª –ª–µ–≤–æ–π —Ä—É–∫–∏?",
    "options": [
      "–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä—É–Ω –Ω–∞–¥ –≥—Ä–∏—Ñ–æ–º",
      "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏ —É —Ä–æ–∑–µ—Ç–∫–∏",
      "–£—á–∞—Å—Ç–æ–∫ –≥—Ä–∏—Ñ–∞; –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = –Ω–æ–º–µ—Ä –ª–∞–¥–∞ –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º",
      "–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥"
    ],
    "correct_idx": 2,
    "why": "–ü–æ–∑–∏—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–æ–Ω—É –ª–µ–≤–æ–π —Ä—É–∫–∏ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–º—É."
  },
  {
    "q": "–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–¥ –∫ –∫–æ—Ä–ø—É—Å—É?",
    "options": [
      "–ù–∞ –ø–æ–ª—Ç–æ—Ä–∞ —Ç–æ–Ω–∞",
      "–ù–∞ —Ç–æ–Ω",
      "–ù–∞ –ø–æ–ª—Ç–æ–Ω–∞",
      "–ù–µ –º–µ–Ω—è–µ—Ç—Å—è"
    ],
    "correct_idx": 2,
    "why": "–ö–∞–∂–¥—ã–π –ª–∞–¥ = +¬Ω —Ç–æ–Ω–∞."
  },
  {
    "q": "–ö–∞–∫–∏–µ –ø–∞—Ä—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç –ù–ï –∏–º–µ—é—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –¥–∏–µ–∑–∞ (–º–µ–∂–¥—É –Ω–∏–º–∏ —É–∂–µ –ø–æ–ª—É—Ç–æ–Ω)?",
    "options": [
      "E‚ÄìF –∏ B‚ÄìC",
      "C‚ÄìD",
      "A‚ÄìB",
      "F‚ÄìG"
    ],
    "correct_idx": 0,
    "why": "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–æ—Ä—è–¥–∞ ‚Äî E‚ÄìF –∏ B‚ÄìC."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –Ω–∞ 1-–π —Å—Ç—Ä—É–Ω–µ (E) –±—É–¥–µ—Ç –Ω–∞ 5-–º –ª–∞–¥—É?",
    "options": [
      "F",
      "A",
      "B",
      "G"
    ],
    "correct_idx": 1,
    "why": "E‚ÄìF‚ÄìF#‚ÄìG‚ÄìG#‚ÄìA (–Ω–∞ 5-–º ‚Äî A)."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ª–∞–¥–æ–≤ –≤–≤–µ—Ä—Ö –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—É –∂–µ –Ω–æ—Ç—É –Ω–∞ –æ–∫—Ç–∞–≤—É –≤—ã—à–µ?",
    "options": [
      "12 –ª–∞–¥–æ–≤",
      "10 –ª–∞–¥–æ–≤",
      "8 –ª–∞–¥–æ–≤",
      "7 –ª–∞–¥–æ–≤"
    ],
    "correct_idx": 0,
    "why": "–û–∫—Ç–∞–≤–∞ = 12 –ø–æ–ª—É—Ç–æ–Ω–æ–≤ ‚áí 12 –ª–∞–¥–æ–≤."
  },
  {
    "q": "–ö–∞–∫ –Ω–∞–π—Ç–∏ –æ–∫—Ç–∞–≤—É –Ω–æ—Ç—ã, –∑–∞–∂–∞—Ç–æ–π –Ω–∞ 6-–π –∏–ª–∏ 5-–π —Å—Ç—Ä—É–Ω–µ, –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä—É–Ω–∞—Ö?",
    "options": [
      "–ù–∞ 2 —Å—Ç—Ä—É–Ω—ã –≤—ã—à–µ –∏ –Ω–∞ 2 –ª–∞–¥–∞ –ø—Ä–∞–≤–µ–µ",
      "–ù–∞ 1 —Å—Ç—Ä—É–Ω—É –≤—ã—à–µ –∏ –Ω–∞ 1 –ª–∞–¥ –ª–µ–≤–µ–µ",
      "–ù–∞ 3 —Å—Ç—Ä—É–Ω—ã –≤—ã—à–µ –∏ –Ω–∞ 3 –ª–∞–¥–∞ –ª–µ–≤–µ–µ",
      "–ë–µ–∑ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏"
    ],
    "correct_idx": 0,
    "why": "–¢–∏–ø–∏—á–Ω—ã–π –æ–∫—Ç–∞–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: +2 —Å—Ç—Ä—É–Ω—ã, +2 –ª–∞–¥–∞."
  },
  {
    "q": "–ß–µ–º—É —Ä–∞–≤–µ–Ω —à–∞–≥ –æ—Ç 3-–≥–æ –∫ 5-–º—É –ª–∞–¥—É –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "–ü–æ–ª—É—Ç–æ–Ω—É",
      "–¢—Ä–∏—Ç–æ–Ω—É",
      "–¢–æ–Ω—É (2 –ø–æ–ª—É—Ç–æ–Ω–∞)",
      "–ü–æ–ª—É—Ç–æ—Ä–∞ —Ç–æ–Ω–∞–º"
    ],
    "correct_idx": 2,
    "why": "–î–≤–∞ –ª–∞–¥–∞ = —Ç–æ–Ω."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫–∫–æ—Ä–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Å—Ç–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é?",
    "options": [
      "–î–≤–µ –Ω–æ—Ç—ã –ø–æ–¥—Ä—è–¥",
      "–û–¥–Ω–∞ –Ω–æ—Ç–∞, –Ω–æ –≥—Ä–æ–º–∫–æ",
      "3 –∏ –±–æ–ª–µ–µ –Ω–æ—Ç, –∑–≤—É—á–∞—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
      "–õ—é–±–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±–æ–≤"
    ],
    "correct_idx": 2,
    "why": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∞–∫–∫–æ—Ä–¥ ‚Äî –º–∏–Ω–∏–º—É–º —Ç—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤—É–∫–∞."
  },
  {
    "q": "–ö–∞–∫ –Ω–∞ —Å–ª—É—Ö –æ—Ç–ª–∏—á–∏—Ç—å –∞–∫–∫–æ—Ä–¥ –æ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–π –Ω–æ—Ç—ã?",
    "options": [
      "–ê–∫–∫–æ—Ä–¥ –≤—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä–µ–µ",
      "–ê–∫–∫–æ—Ä–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≥—Ä–æ–º—á–µ",
      "–†–∞–∑–Ω–∏—Ü—ã –Ω–µ—Ç",
      "–£ –∞–∫–∫–æ—Ä–¥–∞ —Å–ª—ã—à–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤—É–∫–æ–≤ —Å—Ä–∞–∑—É"
    ],
    "correct_idx": 3,
    "why": "–ö–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ ‚Äî –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—ã—Å–æ—Ç."
  },
  {
    "q": "–ß–µ–º –º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–∏–Ω–æ—Ä–Ω–æ–≥–æ –ø–æ ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–π¬ª –Ω–æ—Ç–µ?",
    "options": [
      "–í –º–∞–∂–æ—Ä–µ –∫–≤–∏–Ω—Ç–∞ –Ω–∏–∂–µ, –≤ –º–∏–Ω–æ—Ä–µ –≤—ã—à–µ",
      "–í –º–∞–∂–æ—Ä–µ —Ç–µ—Ä—Ü–∏—è –≤—ã—à–µ –Ω–∞ –ø–æ–ª—É—Ç–æ–Ω, –≤ –º–∏–Ω–æ—Ä–µ –Ω–∏–∂–µ",
      "–í –º–∞–∂–æ—Ä–µ –±–∞—Å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞",
      "–í –º–∏–Ω–æ—Ä–µ –≤—Å–µ–≥–¥–∞ —á–µ—Ç—ã—Ä–µ –Ω–æ—Ç—ã"
    ],
    "correct_idx": 1,
    "why": "–†–∞–∑–Ω–∏—Ü–∞ –≤ –≤—ã—Å–æ—Ç–µ —Ç–µ—Ä—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–Ω–∏–∫–∏ (¬± –ø–æ–ª—É—Ç–æ–Ω)."
  },
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∞–∂–æ—Ä–Ω–æ–≥–æ —Ç—Ä–µ–∑–≤—É—á–∏—è –≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏:",
    "options": [
      "0‚Äì4‚Äì7",
      "0‚Äì5‚Äì7",
      "0‚Äì3‚Äì7",
      "0‚Äì4‚Äì6"
    ],
    "correct_idx": 0,
    "why": "–¢–æ–Ω–∏–∫–∞, –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è, —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞."
  },
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∏–Ω–æ—Ä–Ω–æ–≥–æ —Ç—Ä–µ–∑–≤—É—á–∏—è –≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏:",
    "options": [
      "0‚Äì4‚Äì7",
      "0‚Äì3‚Äì7",
      "0‚Äì3‚Äì6",
      "0‚Äì5‚Äì7"
    ],
    "correct_idx": 1,
    "why": "–¢–æ–Ω–∏–∫–∞, –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è, —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞."
  },
  {
    "q": "–ö–∞–∫–∏–µ –Ω–æ—Ç—ã –æ–±—Ä–∞–∑—É—é—Ç –∞–∫–∫–æ—Ä–¥ C –º–∞–∂–æ—Ä?",
    "options": [
      "C‚ÄìE‚ÄìA",
      "C‚ÄìD#‚ÄìG",
      "C‚ÄìF‚ÄìG",
      "C‚ÄìE‚ÄìG"
    ],
    "correct_idx": 3,
    "why": "C (—Ç–æ–Ω–∏–∫–∞), E (–±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è), G (–∫–≤–∏–Ω—Ç–∞)."
  },
  {
    "q": "–ö–∞–∫–∏–µ –Ω–æ—Ç—ã –æ–±—Ä–∞–∑—É—é—Ç –∞–∫–∫–æ—Ä–¥ A –º–∏–Ω–æ—Ä (Am)?",
    "options": [
      "A‚ÄìB‚ÄìE",
      "A‚ÄìC#‚ÄìE",
      "A‚ÄìC‚ÄìE",
      "A‚ÄìD‚ÄìE"
    ],
    "correct_idx": 2,
    "why": "Am = —Ç–æ–Ω–∏–∫–∞ A, –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è C, –∫–≤–∏–Ω—Ç–∞ E."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å Am –≤ A –º–∞–∂–æ—Ä, –∏–∑–º–µ–Ω–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ—Ä—Ü–∏—é?",
    "options": [
      "–ü–æ–¥–Ω—è—Ç—å E –¥–æ F",
      "–û–ø—É—Å—Ç–∏—Ç—å C –¥–æ B",
      "–ü–æ–¥–Ω—è—Ç—å C –¥–æ C#",
      "–û–ø—É—Å—Ç–∏—Ç—å A –¥–æ G#"
    ],
    "correct_idx": 2,
    "why": "–ú–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è (C) ‚Üí –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è (C#)."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´O¬ª –≤ –∞–∫–∫–æ—Ä–¥–æ–≤–æ–π —Å—Ö–µ–º–µ –Ω–∞–¥ —Å—Ç—Ä—É–Ω–æ–π?",
    "options": [
      "–§–ª–∞–∂–æ–ª–µ—Ç",
      "–ù–µ –∏–≥—Ä–∞—Ç—å —ç—Ç—É —Å—Ç—Ä—É–Ω—É",
      "–ë–∞—Ä—Ä—ç –Ω–∞ –Ω—É–ª–µ–≤–æ–º –ª–∞–¥—É",
      "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –∑–≤—É—á–∏—Ç"
    ],
    "correct_idx": 3,
    "why": "O = —Å—Ç—Ä—É–Ω–∞ –∑–≤—É—á–∏—Ç –æ—Ç–∫—Ä—ã—Ç–æ; X = –Ω–µ –∏–≥—Ä–∞—Ç—å."
  },
  {
    "q": "–ö–∞–∫–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –æ–±—ã—á–Ω–æ –∑–≤—É—á–∞—Ç –≤ –∞–∫–∫–æ—Ä–¥–µ E –º–∞–∂–æ—Ä?",
    "options": [
      "–¢–æ–ª—å–∫–æ 3",
      "1, 2 –∏ 6",
      "4 –∏ 1",
      "1 –∏ 5"
    ],
    "correct_idx": 1,
    "why": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä–∞ E —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ 1, 2, 6."
  },
  {
    "q": "–ö–∞–∫–æ–π –Ω–∞–±–æ—Ä –∞–∫–∫–æ—Ä–¥–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞—Ç–æ–Ω–∏—á–µ—Å–∫–∏–º –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ C –º–∞–∂–æ—Ä?",
    "options": [
      "C, D, E, F, G, A, B",
      "C, Dm, Em, F, G, Am, Bdim",
      "Cm, D, Em, F, G, A, B",
      "C, Dm, E, Fm, G, A, Bm"
    ],
    "correct_idx": 1,
    "why": "–°—Ç—É–ø–µ–Ω–∏ I‚ÄìVII –≤ C: C, Dm, Em, F, G, Am, Bdim."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´—Å—Ç—É–ø–µ–Ω—å¬ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≥–∞–º–º—ã?",
    "options": [
      "–°–º–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –≥—Ä–∏—Ñ–µ",
      "–ù–æ–º–µ—Ä –Ω–æ—Ç—ã –≤ –≥–∞–º–º–µ (I‚ÄìVII)",
      "–ù–æ–º–µ—Ä —Ç–∞–∫—Ç–∞ –≤ –ø–∞—Ä—Ç–∏–∏",
      "–í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ—Ä–æ–∂–∫–∞"
    ],
    "correct_idx": 1,
    "why": "–°—Ç—É–ø–µ–Ω—å ‚Äî –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∑–≤—É–∫–æ—Ä—è–¥–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
  },
  {
    "q": "–ï—Å–ª–∏ –∞–∫–∫–æ—Ä–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç –º—É–∑—ã–∫–∞–Ω—Ç—É?",
    "options": [
      "–ù–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥–∏—Ç–∞—Ä—É",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –≥—Ä–æ–º–∫–æ—Å—Ç—å",
      "–¢–µ–º–ø —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ",
      "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∑–≤—É—á–∞—Ç –ª–æ–≥–∏—á–Ω–æ –∏ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è"
    ],
    "correct_idx": 3,
    "why": "–î–∏–∞—Ç–æ–Ω–∏—á–µ—Å–∫–∏–µ –∞–∫–∫–æ—Ä–¥—ã ¬´—Ä–æ–¥–Ω—ã–µ¬ª –≤ –æ–¥–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –≤ –∞–∫–∫–æ—Ä–¥–µ¬ª?",
    "options": [
      "–°—Ç—Ä—É–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å",
      "–°—Ç—Ä—É–Ω—ã, –∑–∞–∂–∞—Ç—ã–µ –Ω–∞ 12-–º –ª–∞–¥—É",
      "–°—Ç—Ä—É–Ω—ã, –∑–≤—É—á–∞—â–∏–µ –±–µ–∑ –∑–∞–∂–∞—Ç–∏—è, –≤—Ö–æ–¥—è—â–∏–µ –≤ —Å–æ—Å—Ç–∞–≤ –∞–∫–∫–æ—Ä–¥–∞",
      "–°—Ç—Ä—É–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞—Å–æ–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞"
    ],
    "correct_idx": 2,
    "why": "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ ‚Äî 0 –ª–∞–¥; –µ—Å–ª–∏ –µ—ë –Ω–æ—Ç–∞ –≤—Ö–æ–¥–∏—Ç –≤ –∞–∫–∫–æ—Ä–¥ ‚Äî –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å."
  },
  {
    "q": "–¢–µ–º–ø ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ä–∏—Ñ—Ñ–∞",
      "–°–∫–æ—Ä–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –≤ —É–¥–∞—Ä–∞—Ö –≤ –º–∏–Ω—É—Ç—É (BPM)",
      "–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤",
      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Ç–æ–≤ –≤ –ø–µ—Å–Ω–µ"
    ],
    "correct_idx": 1,
    "why": "–¢–µ–º–ø –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ BPM –∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª—å—Å–∞."
  },
  {
    "q": "–ö–∞–∫ —á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä 4/4?",
    "options": [
      "–í —Ç–∞–∫—Ç–µ 4 –¥–æ–ª–∏, –∫–∞–∂–¥–∞—è ‚Äî –≤–æ—Å—å–º–∞—è",
      "–í —Ç–∞–∫—Ç–µ 3 –¥–æ–ª–∏, –∫–∞–∂–¥–∞—è ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å",
      "–í —Ç–∞–∫—Ç–µ 6 –¥–æ–ª–µ–π, –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 3",
      "–í —Ç–∞–∫—Ç–µ 4 –¥–æ–ª–∏, –∫–∞–∂–¥–∞—è ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å"
    ],
    "correct_idx": 3,
    "why": "–í–µ—Ä—Ö–Ω–µ–µ —á–∏—Å–ª–æ ‚Äî —á–∏—Å–ª–æ –¥–æ–ª–µ–π; –Ω–∏–∂–Ω–µ–µ ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∏."
  },
  {
    "q": "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ–Ω –¥–ª—è –≤–∞–ª—å—Å–∞?",
    "options": [
      "6/8",
      "4/4",
      "2/4",
      "3/4"
    ],
    "correct_idx": 3,
    "why": "–í–∞–ª—å—Å ‚Äî ¬´—Ä–∞–∑-–¥–≤–∞-—Ç—Ä–∏¬ª, —Ç–æ –µ—Å—Ç—å 3/4."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—É—ç—Ä-–∞–∫–∫–æ—Ä–¥ (power chord) –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∏–¥–µ?",
    "options": [
      "–¢–æ–ª—å–∫–æ —Ç–µ—Ä—Ü–∏—è –∏ –∫–≤–∏–Ω—Ç–∞",
      "–ú–∞–∂–æ—Ä —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å–µ–∫—É–Ω–¥–æ–π",
      "–ü–æ–ª–Ω—ã–π –º–∞–∂–æ—Ä–Ω—ã–π —Ç—Ä–µ–∑–≤—É—á–Ω—ã–π –∞–∫–∫–æ—Ä–¥",
      "–û—Å–Ω–æ–≤–∞ + –∫–≤–∏–Ω—Ç–∞ (–∏–Ω–æ–≥–¥–∞ + –æ–∫—Ç–∞–≤–∞)"
    ],
    "correct_idx": 3,
    "why": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–æ—Ä–µ–Ω—å + –∫–≤–∏–Ω—Ç–∞ (+ –æ–∫—Ç–∞–≤–∞)."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Ä–ø–µ–¥–∂–∏–æ?",
    "options": [
      "–ê–∫–∫–æ—Ä–¥, —Å—ã–≥—Ä–∞–Ω–Ω—ã–π –ø–æ –Ω–æ—Ç–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ",
      "–ü—Ä–∏—ë–º –±–µ–Ω–¥-–≤–∏–±—Ä–∞—Ç–æ",
      "–ì–ª—É—à–µ–Ω–∏–µ –ª–∞–¥–æ–Ω—å—é",
      "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ä–∏—Ñ—Ñ"
    ],
    "correct_idx": 0,
    "why": "–ê—Ä–ø–µ–¥–∂–∏–æ ‚Äî —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –∞–∫–∫–æ—Ä–¥, –Ω–æ—Ç—ã –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ."
  },
  {
    "q": "–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Å—Ç–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "–ò–≥—Ä–∞ ¬´–Ω–∞ —Ö–æ–¥—É¬ª –±–µ–∑ –∑–∞—É—á–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏",
      "–ü–æ–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–∞–±–æ–≤",
      "–°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∂–∏–º–∞–Ω–∏–µ –Ω–æ—Ç",
      "–¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –Ω–æ—Ç"
    ],
    "correct_idx": 0,
    "why": "–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è ‚Äî —Å–æ—á–∏–Ω–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Å–æ–Ω–∞–Ω—Å –∏ –¥–∏—Å—Å–æ–Ω–∞–Ω—Å –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º —Å–ª—É—Ö–æ–≤–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏?",
    "options": [
      "–≠—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º–ø—ã",
      "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å ‚Äî —É—Å—Ç–æ–π—á–∏–≤–æ/–ø—Ä–∏—è—Ç–Ω–æ; –¥–∏—Å—Å–æ–Ω–∞–Ω—Å ‚Äî –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–æ/–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
      "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å ‚Äî —Ç–æ–ª—å–∫–æ –≤ –º–∞–∂–æ—Ä–µ; –¥–∏—Å—Å–æ–Ω–∞–Ω—Å ‚Äî —Ç–æ–ª—å–∫–æ –≤ –º–∏–Ω–æ—Ä–µ",
      "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å ‚Äî –≥—Ä–æ–º–∫–æ; –¥–∏—Å—Å–æ–Ω–∞–Ω—Å ‚Äî —Ç–∏—Ö–æ"
    ],
    "correct_idx": 1,
    "why": "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å—ã —Ä–∞—Å—Å–ª–∞–±–ª—è—é—Ç —Å–ª—É—Ö, –¥–∏—Å—Å–æ–Ω–∞–Ω—Å—ã —Å–æ–∑–¥–∞—é—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ."
  }
]

================================================================================
FILE: Bot\data\tests\theory_2.json
================================================================================
[
  {
    "q": "–ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥–æ–ª–æ–≤–∫–µ –≥—Ä–∏—Ñ–∞ –∏ –¥–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ?",
    "options": [
      "–ö–æ–ª–∫–∏: –∏–º–∏ —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç –Ω–∞—Ç—è–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–Ω –∏ –≤—ã—Å–æ—Ç—É –∑–≤—É–∫–∞",
      "–ó–≤—É–∫–æ—Å–Ω–∏–º–∞—Ç–µ–ª–∏: —É—Å–∏–ª–∏–≤–∞—é—Ç –∑–≤—É–∫ –∞–∫—É—Å—Ç–∏–∫–∏",
      "–ü–æ—Ä–æ–∂–µ–∫: –Ω–∞ –Ω—ë–º –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç —Å—Ç—Ä—É–Ω—ã —Å–Ω–∏–∑—É",
      "–ü–æ–¥—Å—Ç–∞–≤–∫–∞: –¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ç–æ—Ä –∏ —Ä–µ–º–µ–Ω—å"
    ],
    "correct_idx": 0,
    "why": "–ì–æ–ª–æ–≤–∫–∞ –≥—Ä–∏—Ñ–∞ –Ω–µ—Å—ë—Ç –∫–æ–ª–∫–∏ (–º–µ—Ö–∞–Ω–∏–∫–∏). –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—è –∏—Ö, –ø–æ–≤—ã—à–∞—é—Ç/–ø–æ–Ω–∏–∂–∞—é—Ç —Å—Ç—Ä–æ–π –∫–∞–∂–¥–æ–π —Å—Ç—Ä—É–Ω—ã."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∞–¥—ã –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã—Å–æ—Ç—É –∑–≤—É–∫–∞?",
    "options": [
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–æ—Å–∫–∏ –Ω–∞ –≥—Ä–∏—Ñ–µ; –∑–∞–∂–∏–º –ø–µ—Ä–µ–¥ –ª–∞–¥–æ–º –ø–æ–≤—ã—à–∞–µ—Ç –Ω–æ—Ç—É, –±–ª–∏–∂–µ –∫ –∫–æ—Ä–ø—É—Å—É ‚Äî –≤—ã—à–µ",
      "–ú–µ—Ç–∫–∏ –Ω–∞ –∫–æ—Ä–ø—É—Å–µ –¥–ª—è –¥–µ–∫–æ—Ä–∞; –Ω–∞ –∑–≤—É–∫ –Ω–µ –≤–ª–∏—è—é—Ç",
      "–í–∏–Ω—Ç—ã —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∞–Ω–∫–µ—Ä–∞; –ø–æ–Ω–∏–∂–∞—é—Ç —Å—Ç—Ä–æ–π –≤—Å–µ–π –≥–∏—Ç–∞—Ä—ã",
      "–ü—Ä–æ—Ä–µ–∑–∏ –Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ; –¥–µ–ª–∞—é—Ç –∑–≤—É–∫ —Ç–∏—à–µ"
    ],
    "correct_idx": 0,
    "why": "–õ–∞–¥—ã –¥–µ–ª—è—Ç –º–µ–Ω–∑—É—Ä—É. –ß–µ–º –∫–æ—Ä–æ—á–µ —Ä–∞–±–æ—á–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä—É–Ω—ã (–±–ª–∏–∂–µ –∫ –∫–æ—Ä–ø—É—Å—É), —Ç–µ–º –≤—ã—à–µ –≤—ã—Å–æ—Ç–∞."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ –≥—Ä–∏—Ñ –∏ –Ω–∞–∫–ª–∞–¥–∫—É –≥—Ä–∏—Ñ–∞:",
    "options": [
      "–ù–∞–∫–ª–∞–¥–∫–∞ ‚Äî —ç—Ç–æ –≥–æ–ª–æ–≤–∫–∞ —Å –∫–æ–ª–∫–∞–º–∏",
      "–ì—Ä–∏—Ñ ‚Äî —ç—Ç–æ –∫–æ—Ä–ø—É—Å —Å —Ä–æ–∑–µ—Ç–∫–æ–π",
      "–ù–∞–∫–ª–∞–¥–∫–∞ ‚Äî –¥–µ—Ç–∞–ª—å –Ω–∞ –∫–æ—Ä–ø—É—Å–µ –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Ç—Ä—É–Ω —Å–Ω–∏–∑—É",
      "–ù–∞–∫–ª–∞–¥–∫–∞ ‚Äî —Ç—ë–º–Ω–∞—è –ø–ª–æ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –≥—Ä–∏—Ñ–∞, –ø–æ –Ω–µ–π –Ω–∞–∂–∏–º–∞—é—Ç; –≥—Ä–∏—Ñ ‚Äî –¥–ª–∏–Ω–Ω–∞—è —á–∞—Å—Ç—å –º–µ–∂–¥—É –≥–æ–ª–æ–≤–∫–æ–π –∏ –∫–æ—Ä–ø—É—Å–æ–º"
    ],
    "correct_idx": 3,
    "why": "–ì—Ä–∏—Ñ ‚Äî ¬´—à–µ—è¬ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞; –Ω–∞–∫–ª–∞–¥–∫–∞ ‚Äî —Ä–∞–±–æ—á–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–Ω–∞–º–∏ —Å –ª–∞–¥–∞–º–∏/–º–µ—Ç–∫–∞–º–∏."
  },
  {
    "q": "–ì–¥–µ –Ω–∞ –∫–æ—Ä–ø—É—Å–µ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è —Å—Ç—Ä—É–Ω—ã —Å–Ω–∏–∑—É?",
    "options": [
      "–ù–∞ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–∏ (—Ä–æ–∑–µ—Ç–∫–µ)",
      "–ù–∞ –≥–æ–ª–æ–≤–∫–µ –≥—Ä–∏—Ñ–∞",
      "–ù–∞ –ø–æ—Ä–æ–∂–∫–µ",
      "–ù–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ (–±—Ä–∏–¥–∂–µ)"
    ],
    "correct_idx": 3,
    "why": "–ü–æ–¥—Å—Ç–∞–≤–∫–∞/–±—Ä–∏–¥–∂ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–Ω—ã –Ω–∞ –∫–æ—Ä–ø—É—Å–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥–µ–∫–∏."
  },
  {
    "q": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –ø–æ—Ä–æ–∂–µ–∫?",
    "options": [
      "–≠—Ç–æ –ø–µ–¥–∞–ª—å-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—ã",
      "–ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–Ω—ã –º–µ–∂–¥—É –≥–æ–ª–æ–≤–∫–æ–π –∏ –≥—Ä–∏—Ñ–æ–º, –∑–∞–¥–∞—ë—Ç –∏—Ö –≤—ã—Å–æ—Ç—É –Ω–∞–¥ –ª–∞–¥–∞–º–∏",
      "–°–ª—É–∂–∏—Ç –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–µ–º–Ω—è",
      "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∑–≤—É–∫ —Ç–∞–∫ –∂–µ, –∫–∞–∫ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ"
    ],
    "correct_idx": 1,
    "why": "–ü–æ—Ä–æ–∂–µ–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤—ã—Å–æ—Ç—É (action) —É –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫–æ–Ω—Ü–∞ –º–µ–Ω–∑—É—Ä—ã –∏ —Ä–∞–∑–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–Ω—ã –ø–æ –∫–∞–Ω–∞–≤–∫–∞–º."
  },
  {
    "q": "–ö–∞–∫—É—é —Ä–æ–ª—å –∏–≥—Ä–∞–µ—Ç —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ (—Ä–æ–∑–µ—Ç–∫–∞) –≤ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–í –Ω—ë–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Å—Ç–∏–Ω—ã –¥–ª—è —Å—Ç—Ä–æ—è",
      "–≠—Ç–æ —Ä–∞–∑—ä—ë–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–µ–ª—è",
      "–≠—Ç–æ —á–∏—Å—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç",
      "–ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–≤—É–∫; –∫–æ—Ä–ø—É—Å —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç –∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç –∑–≤—É—á–∞–Ω–∏–µ"
    ],
    "correct_idx": 3,
    "why": "–ü–æ–ª—ã–π –∫–æ—Ä–ø—É—Å –∏ —Ä–æ–∑–µ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä—É—é—Ç –∑–≤—É–∫ –Ω–∞—Ä—É–∂—É."
  },
  {
    "q": "–ö–∞–∫–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≥—Ä—É–∑ –æ—Ç –ø–µ–¥–∞–ª–∏",
      "–ü–ª–æ—Ç–Ω—ã–π –∫–æ—Ä–ø—É—Å –±–µ–∑ —Ä–æ–∑–µ—Ç–∫–∏, –Ω—É–∂–µ–Ω —É—Å–∏–ª–∏—Ç–µ–ª—å",
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã, —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ, –º—è–≥–∫–∏–π —Ç—ë–ø–ª—ã–π –Ω–µ–≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫",
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã, —É–∑–∫–∏–π –≥—Ä–∏—Ñ, –≥—Ä–æ–º–∫–∏–π –∑–≤–æ–Ω–∫–∏–π –∑–≤—É–∫"
    ],
    "correct_idx": 2,
    "why": "–ö–ª–∞—Å—Å–∏–∫–∞: –Ω–µ–π–ª–æ–Ω, —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ, –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤/–¥–µ—Ç–µ–π, –º—è–≥–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ."
  },
  {
    "q": "–ß—Ç–æ –≤–µ—Ä–Ω–æ –æ–± –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã –∏ —Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ",
      "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç –∫–ª–µ–Ω–æ–≤—ã–π –≥—Ä–∏—Ñ –∏ –ø–∏–∫–≥–∞—Ä–¥—É",
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã, –∫–æ—Ä–ø—É—Å —á–∞—Å—Ç–æ —Ñ–æ—Ä–º—ã –¥—Ä–µ–¥–Ω–æ—É—Ç, –∑–≤—É–∫ —è—Ä—á–µ –∏ –≥—Ä–æ–º—á–µ –∫–ª–∞—Å—Å–∏–∫–∏",
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –ø–æ—á—Ç–∏ –Ω–µ —Å–ª—ã—à–Ω–æ"
    ],
    "correct_idx": 2,
    "why": "–ê–∫—É—Å—Ç–∏–∫–∞: –º–µ—Ç–∞–ª–ª-—Å—Ç—Ä—É–Ω—ã, –±–æ–ª–µ–µ —É–∑–∫–∏–π –≥—Ä–∏—Ñ, –≤—ã—Å–æ–∫–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å/—è—Ä–∫–æ—Å—Ç—å."
  },
  {
    "q": "–ß—Ç–æ –≤–µ—Ä–Ω–æ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—É?",
    "options": [
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å —Ç–∏—Ö–æ; –¥–ª—è —Å—Ü–µ–Ω—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç –∫ —É—Å–∏–ª–∏—Ç–µ–ª—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º",
      "–í—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ –¥–µ–∫–µ",
      "–ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã",
      "–ù–∞ –Ω–µ–π –Ω–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –±–ª—é–∑"
    ],
    "correct_idx": 0,
    "why": "–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç —Ç—Ä–∞–∫—Ç–∞ (—É—Å–∏–ª–∏—Ç–µ–ª—å/—ç—Ñ—Ñ–µ–∫—Ç—ã); –∫–æ—Ä–ø—É—Å —É –Ω–µ—ë —Å–ø–ª–æ—à–Ω–æ–π (solid-body)."
  },
  {
    "q": "–¢—ã –≤–∫–ª—é—á–∏–ª —Ç—é–Ω–µ—Ä –∏ —Å—ã–≥—Ä–∞–ª –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É. –¢—é–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –Ω–æ—Ç—É, –Ω–æ —Å—Ç—Ä–µ–ª–∫–∞ —É—Ö–æ–¥–∏—Ç –≤–ª–µ–≤–æ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
    "options": [
      "–°–∏–ª—å–Ω–µ–µ —É–¥–∞—Ä–∏—Ç—å –ø–æ —Å—Ç—Ä—É–Ω–µ",
      "–°—Ç—Ä—É–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∏–∂–µ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–ª–∫–æ–º",
      "–ù–∏—á–µ–≥–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
      "–°—Ç—Ä—É–Ω–∞ –≤—ã—à–µ ‚Äî –æ—Å–ª–∞–±–∏—Ç—å –∫–æ–ª–∫–æ–º"
    ],
    "correct_idx": 1,
    "why": "–í–ª–µ–≤–æ ‚Äî ¬´–Ω–∏–∂–µ —Ç–æ–Ω–∞¬ª (flat). –ù–∞—Ç—è–∂–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ."
  },
  {
    "q": "–ö–∞–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω –æ—Ç 6-–π –∫ 1-–π –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ?",
    "options": [
      "D, G, B, E, A, E",
      "E, B, G, D, A, E",
      "E, A, D, G, B, E",
      "E, D, A, G, B, E"
    ],
    "correct_idx": 2,
    "why": "–û—Ç 6-–π –∫ 1-–π: E‚ÄìA‚ÄìD‚ÄìG‚ÄìB‚ÄìE. –û–±—Ä–∞—Ç–Ω–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ (E‚ÄìB‚ÄìG‚ÄìD‚ÄìA‚ÄìE) ‚Äî —ç—Ç–æ 1‚Üí6."
  },
  {
    "q": "–ü–æ—á–µ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç—é–Ω–µ—Ä–æ–º –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞?",
    "options": [
      "–ß—Ç–æ–±—ã —Å—Ç—Ä—É–Ω—ã —Å–ª—É–∂–∏–ª–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –¥–æ–ª—å—à–µ",
      "–ß—Ç–æ–±—ã –≥–∏—Ç–∞—Ä–∞ —Å—Ç–∞–ª–∞ –≥—Ä–æ–º—á–µ –±–µ–∑ —É—Å–∏–ª–∏–π",
      "–ë–µ–∑ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–æ—Ä–¥—ã —Ñ–∞–ª—å—à–∏–≤—è—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏; —Å–ª—É—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–≤—É–∫–µ",
      "–ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —à—É–º–∞ –æ—Ç –∫–∞–±–µ–ª—è"
    ],
    "correct_idx": 2,
    "why": "–¢–æ—á–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Äî –±–∞–∑–∞ –∞–Ω—Å–∞–º–±–ª—è –∏ —Å–ª—É—Ö–∞; –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏–µ–º ‚Äî —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∏–≤—ã—á–∫–∞."
  }
]

================================================================================
FILE: Bot\data\tests\theory_3.json
================================================================================
[
  {
    "q": "–ö–∞–∫–∞—è —Å—Ç—Ä—É–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–ï–†–•–ù–ï–ô –ª–∏–Ω–∏–∏ —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã —Å –±—É–∫–≤–æ–π ¬´e¬ª?",
    "options": [
      "6-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–ª—Å—Ç–∞—è E)",
      "2-—è —Å—Ç—Ä—É–Ω–∞ (B)",
      "3-—è —Å—Ç—Ä—É–Ω–∞ (G)",
      "1-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–Ω–∫–∞—è E)"
    ],
    "correct_idx": 3,
    "why": "–í —Ç–∞–±–∞—Ö –≤–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è ‚Äî —Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è, 1-—è —Å—Ç—Ä—É–Ω–∞ (e)."
  },
  {
    "q": "–ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã —Å –±—É–∫–≤–æ–π ¬´E¬ª ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "6-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–ª—Å—Ç–∞—è E)",
      "4-—è —Å—Ç—Ä—É–Ω–∞ (D)",
      "1-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–Ω–∫–∞—è E)",
      "5-—è —Å—Ç—Ä—É–Ω–∞ (A)"
    ],
    "correct_idx": 0,
    "why": "–ù–∏–∑ —Ç–∞–±–∞ ‚Äî 6-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–ª—Å—Ç–∞—è –º–∏)."
  },
  {
    "q": "–ß—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±—É–ª–∞—Ç—É—Ä–∞ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏)?",
    "options": [
      "–¢–æ—á–Ω—ã–π —Ä–∏—Ç–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—Ç",
      "–ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä—É–Ω–µ –∏ –Ω–∞ –∫–∞–∫–æ–º –ª–∞–¥—É –∏–≥—Ä–∞—Ç—å",
      "–¢–µ–º–ø –∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
      "–î–∏–Ω–∞–º–∏–∫—É (–≥—Ä–æ–º–∫–æ—Å—Ç—å) –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
    ],
    "correct_idx": 1,
    "why": "–¢–∞–±—ã ‚Äî ¬´–∫–∞—Ä—Ç–∞ –ø–∞–ª—å—Ü–µ–≤¬ª: —Å—Ç—Ä—É–Ω–∞ + –ª–∞–¥; —Ä–∏—Ç–º –Ω–µ –∑–∞–¥–∞—é—Ç."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´0¬ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ?",
    "options": [
      "–°–º–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 10-–º –ª–∞–¥—É",
      "–ì–ª—É—à—ë–Ω—ã–π —É–¥–∞—Ä",
      "–ü–∞—É–∑—ã –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏",
      "–û—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É (–±–µ–∑ –ø—Ä–∏–∂–∞—Ç–∏—è)"
    ],
    "correct_idx": 3,
    "why": "–ù–æ–ª—å ‚Äî —Å—ã–≥—Ä–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É."
  },
  {
    "q": "–ó–∞–ø–∏—Å—å: E|--3--. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å?",
    "options": [
      "1-—é —Å—Ç—Ä—É–Ω—É –Ω–∞ 3-–º –ª–∞–¥—É (–Ω–æ—Ç–∞ G)",
      "5-—é —Å—Ç—Ä—É–Ω—É –Ω–∞ 3-–º –ª–∞–¥—É (–Ω–æ—Ç–∞ C)",
      "6-—é —Å—Ç—Ä—É–Ω—É –Ω–∞ 3-–º –ª–∞–¥—É (–Ω–æ—Ç–∞ G)",
      "6-—é —Å—Ç—Ä—É–Ω—É –æ—Ç–∫—Ä—ã—Ç—É—é"
    ],
    "correct_idx": 2,
    "why": "–õ–∏–Ω–∏—è E –≤–Ω–∏–∑—É ‚Äî 6-—è —Å—Ç—Ä—É–Ω–∞; 3-–π –ª–∞–¥ –¥–∞—ë—Ç –Ω–æ—Ç—É G."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞—Ç—å —Ç–∞–±—É–ª–∞—Ç—É—Ä—É –ø–æ—à–∞–≥–æ–≤–æ?",
    "options": [
      "–°–ø–µ—Ä–≤–∞ —Ä–∏—Ç–º, –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–Ω—É –∏ –ª–∞–¥",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ: —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫–∫–æ—Ä–¥ –ø–æ –±—É–∫–≤–∞–º, –ø–æ—Ç–æ–º –ª–∞–¥—ã",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–Ω—É ‚Üí –Ω–æ–º–µ—Ä –ª–∞–¥–∞ ‚Üí –∑–∞–∂–∞—Ç—å ‚Üí —Å—ã–≥—Ä–∞—Ç—å",
      "–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: —Å—ã–≥—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä—É–Ω—ã, –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å –ª–∞–¥"
    ],
    "correct_idx": 2,
    "why": "–ë–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–µ–Ω–∏—è —Ç–∞–±–∞ ‚Äî —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, –ø–æ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä–µ/—Å—Ç—Ä—É–Ω–µ."
  },
  {
    "q": "–í –ø—Ä–∏–º–µ—Ä–µ –∞–∫–∫–æ—Ä–¥–∞ C –≤ —Ç–∞–±–∞—Ö –≤–µ—Ä—Ö–Ω–∏–µ —Ç—Ä–∏ —Å—Ç—Ä—É–Ω—ã –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫: e|0 B|1 G|0. –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?",
    "options": [
      "–í—Å–µ —Ç—Ä–∏ —Å—Ç—Ä—É–Ω—ã –≥–ª—É—à–∞—Ç—Å—è",
      "1-—è –æ—Ç–∫—Ä—ã—Ç–∞, 2-—è –Ω–∞ 1 –ª–∞–¥—É, 3-—è –æ—Ç–∫—Ä—ã—Ç–∞",
      "–ò–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 2-—é —Å—Ç—Ä—É–Ω—É",
      "1-—è –Ω–∞ 1 –ª–∞–¥—É, 2-—è –æ—Ç–∫—Ä—ã—Ç–∞, 3-—è –Ω–∞ 1 –ª–∞–¥—É"
    ],
    "correct_idx": 1,
    "why": "–¶–∏—Ñ—Ä–∞ ‚Äî –ª–∞–¥, ¬´0¬ª ‚Äî –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–∏–º–≤–æ–ª ¬´h¬ª –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5h7)?",
    "options": [
      "–•–∞–Ω–¥–∞–º–µ–Ω—Ç: —Å—ã–≥—Ä–∞—Ç—å –Ω–æ—Ç—É –º–µ–¥–∏–∞—Ç–æ—Ä–æ–º –≤–Ω–∏–∑",
      "–•–∞–º–º–µ—Ä-–æ–Ω: –¥–æ–±–∏—Ç—å 7-–π –ª–∞–¥ —É–¥–∞—Ä–æ–º –ø–∞–ª—å—Ü–∞ –±–µ–∑ –Ω–æ–≤–æ–≥–æ —É–¥–∞—Ä–∞ –ø–æ —Å—Ç—Ä—É–Ω–µ",
      "–•–æ–ª–¥: –ø–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ—Ç—É –¥–æ–ª—å—à–µ",
      "–•–æ—Ä—É—Å: –ø–æ–¥–∫–ª—é—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç"
    ],
    "correct_idx": 1,
    "why": "h ‚Äî hammer-on: —É–¥–∞—Ä–∏—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∞–¥—É, –Ω–µ –¥—ë—Ä–≥–∞—è —Å—Ç—Ä—É–Ω—É —Å–Ω–æ–≤–∞."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´p¬ª –≤ –∑–∞–ø–∏—Å–∏ 7p5?",
    "options": [
      "–ü–æ–∑–∏—Ü–∏—è: –ø–µ—Ä–µ–π—Ç–∏ –∫ 5-–π –ø–æ–∑–∏—Ü–∏–∏",
      "–ü–µ–¥–∞–ª—å —Å—É—Å—Ç–µ–π–Ω–∞: —É–¥–µ—Ä–∂–∞—Ç—å –Ω–æ—Ç—É",
      "–ü–∞–ª—å–º-–º—å—é—Ç: –ø—Ä–∏–≥–ª—É—à–∏—Ç—å –ª–∞–¥–æ–Ω—å—é",
      "–ü—É–ª–ª-–æ—Ñ—Ñ: —Å–Ω—è—Ç—å –ø–∞–ª–µ—Ü —Å 7-–≥–æ –ª–∞–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–æ–∑–≤—É—á–∞–ª 5-–π"
    ],
    "correct_idx": 3,
    "why": "p ‚Äî pull-off: –æ—Ç—Ç—è–∂–∫–∞ —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–∞–¥–∞ –∫ –Ω–∏–∂–Ω–µ–º—É."
  },
  {
    "q": "–ö–∞–∫–∞—è –ø–∞—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–æ —Å–ª–∞–π–¥–∞–º–∏ ¬´/¬ª –∏ ¬´\\¬ª?",
    "options": [
      "¬´/¬ª ‚Äî —Å–ª–∞–π–¥ –≤–Ω–∏–∑, ¬´\\¬ª ‚Äî –≤–≤–µ—Ä—Ö",
      "–û–±–∞ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –±–µ–Ω–¥",
      "–û–±–∞ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –≥–ª—É—à–µ–Ω–∏–µ",
      "¬´/¬ª ‚Äî —Å–ª–∞–π–¥ –≤–≤–µ—Ä—Ö –ø–æ –≥—Ä–∏—Ñ—É, ¬´\\¬ª ‚Äî —Å–ª–∞–π–¥ –≤–Ω–∏–∑"
    ],
    "correct_idx": 3,
    "why": "–ö–æ—Å–∞—è –≤–ø–µ—Ä—ë–¥ ‚Äî –≤–≤–µ—Ä—Ö, –æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è ‚Äî –≤–Ω–∏–∑."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤—è–∑–∫–∞ 7b8r7 –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "–°—ã–≥—Ä–∞—Ç—å 7-–π –∏ 8-–π –ª–∞–¥—ã –æ–±—ã—á–Ω—ã–º –ª–µ–≥–∞—Ç–æ",
      "–°–¥–µ–ª–∞—Ç—å –¥–≤–∞ —Å–ª–∞–π–¥–∞: 7‚Üí8 –∏ 8‚Üí7",
      "–°—ã–≥—Ä–∞—Ç—å –≥–ª—É—à—ë–Ω—ã–µ —É–¥–∞—Ä—ã –Ω–∞ 7-–º –ª–∞–¥—É",
      "–°–¥–µ–ª–∞—Ç—å –±–µ–Ω–¥ —Å 7-–≥–æ –¥–æ –≤—ã—Å–æ—Ç—ã 8-–≥–æ –ª–∞–¥–∞ –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 7"
    ],
    "correct_idx": 3,
    "why": "b ‚Äî bend –¥–æ –≤—ã—Å–æ—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—Ç—ã; r ‚Äî release, –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä—É–Ω—É –Ω–∞–∑–∞–¥."
  },
  {
    "q": "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≥–ª—É—à—ë–Ω—ã–π —É–¥–∞—Ä, –∞ –∫–∞–∫–æ–π ‚Äî –≤–∏–±—Ä–∞—Ç–æ?",
    "options": [
      "x ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, ~ ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "t ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, x ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "~ ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, x ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "( ) ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, ~ ‚Äî –≤–∏–±—Ä–∞—Ç–æ"
    ],
    "correct_idx": 0,
    "why": "x ‚Äî ¬´—Ç—é–∫¬ª –±–µ–∑ –≤—ã—Å–æ—Ç—ã; ~ ‚Äî –∫–æ–ª–µ–±–∞–Ω–∏–µ –≤—ã—Å–æ—Ç—ã (–≤–∏–±—Ä–∞—Ç–æ)."
  }
]

================================================================================
FILE: Bot\data\tests\theory_4.json
================================================================================
[
  {
    "q": "–ì–ª–∞–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é?",
    "options": [
      "–¢–∞–±—ã –Ω–µ–ª—å–∑—è —á–∏—Ç–∞—Ç—å —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ",
      "–¢–∞–±—ã –ø–æ—á—Ç–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—á–Ω–æ",
      "–¢–∞–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–µ–º–ø –∏ —Ä–∞–∑–º–µ—Ä",
      "–¢–∞–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–æ–º–µ—Ä–∞ –ª–∞–¥–æ–≤"
    ],
    "correct_idx": 1,
    "why": "–¢–∞–±—É–ª–∞—Ç—É—Ä–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –∏–≥—Ä–∞—Ç—å (—Å—Ç—Ä—É–Ω–∞/–ª–∞–¥), –Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ã—á–Ω–æ –Ω–µ –∫–æ–¥–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ."
  },
  {
    "q": "–°–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∏—Ç–º –∏–∑ –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏:",
    "options": [
      "–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–º–µ—Ä –ª–∞–¥–∞",
      "–°–ª—É—à–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å",
      "–ò–≥—Ä–∞—Ç—å –≤—Å–µ –Ω–æ—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–æ–ª–≥–æ",
      "–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ü–≤–µ—Ç —Ü–∏—Ñ—Ä –≤ —Ç–∞–±–µ"
    ],
    "correct_idx": 1,
    "why": "–†–∏—Ç–º –±–µ—Ä—É—Ç –Ω–∞ —Å–ª—É—Ö –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—É. –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –¥–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
  },
  {
    "q": "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã?",
    "options": [
      "–ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª ‚Äî —Ç–µ–º –¥–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)",
      "–ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª ‚Äî —Ç–µ–º –Ω–∏–∂–µ –ø–æ –≤—ã—Å–æ—Ç–µ –Ω–æ—Ç–∞",
      "–ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª ‚Äî —Ç–µ–º —Ç–∏—à–µ –Ω–æ—Ç–∞",
      "–ü—Ä–æ–±–µ–ª—ã –Ω–µ –Ω–µ—Å—É—Ç –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    ],
    "correct_idx": 0,
    "why": "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞–º–µ–∫–∞—Ç—å –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ —ç—Ç–æ –ª–∏—à—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä, –Ω–µ —Ç–æ—á–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ ¬´|¬ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ/Songsterr?",
    "options": [
      "–ì—Ä–∞–Ω–∏—Ü—ã —Ç–∞–∫—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª—è—é—Ç –º—É–∑—ã–∫—É –ø–æ —Å—á—ë—Ç—É)",
      "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–Ω—É",
      "–ú–µ—Å—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã –º–µ–¥–∏–∞—Ç–æ—Ä–∞",
      "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–Ω–¥–∞"
    ],
    "correct_idx": 0,
    "why": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –º–∞—Ä–∫–∏—Ä—É—é—Ç —Ç–∞–∫—Ç—ã –∏ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å—á—ë—Ç–µ."
  },
  {
    "q": "–ß—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç Songsterr –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å ¬´–≥–æ–ª–æ–π¬ª —Ç–∞–±—É–ª–∞—Ç—É—Ä–æ–π?",
    "options": [
      "–ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ —Ç–µ–º–ø–∞ –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
      "–¢–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –∑–≤—É–∫–∞",
      "–†–∏—Ç–º–∏—á–µ—Å–∫—É—é –Ω–æ—Ç–∞—Ü–∏—é: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–∞–±–æ–º",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥–º–µ–Ω—É –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –Ω–∞ –Ω–æ—Ç—ã –±—É–∫–≤–∞–º–∏"
    ],
    "correct_idx": 2,
    "why": "–í Songsterr –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –¥–æ—Ä–æ–∂–∫–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å —Ç–∞–±–æ–º."
  },
  {
    "q": "–ì–¥–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Songsterr –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–º–µ–Ω–Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—Ç?",
    "options": [
      "–í –Ω–æ–º–µ—Ä–µ –ª–∞–¥–∞ —Ä—è–¥–æ–º —Å –±—É–∫–≤–æ–π —Å—Ç—Ä—É–Ω—ã",
      "–í —Ü–≤–µ—Ç–µ —Ü–∏—Ñ—Ä –Ω–∞ —Å—Ç—Ä—É–Ω–∞—Ö",
      "–ù–∞ –ª–∏–Ω–∏–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–æ—Ç —Å–Ω–∏–∑—É (—á–µ—Ç–≤–µ—Ä—Ç–∏, –≤–æ—Å—å–º—ã–µ –∏ —Ç.–¥.)",
      "–í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞"
    ],
    "correct_idx": 2,
    "why": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è –Ω–æ—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å —Ç–∞–±–æ–º."
  },
  {
    "q": "–°–æ–æ—Ç–Ω–µ—Å–∏ —Å–∏–º–≤–æ–ª –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ:",
    "options": [
      "‚ô© ‚Äî –≤–æ—Å—å–º–∞—è, ‚ô™ ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å, ùÖ° ‚Äî –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è",
      "‚ô© ‚Äî —Ü–µ–ª–∞—è, ‚ô™ ‚Äî –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è, ùÖ° ‚Äî –≤–æ—Å—å–º–∞—è",
      "‚ô© ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å (1 —É–¥–∞—Ä), ‚ô™ ‚Äî –≤–æ—Å—å–º–∞—è (¬Ω —É–¥–∞—Ä–∞), ùÖ° ‚Äî —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è (¬º —É–¥–∞—Ä–∞)",
      "‚ô© ‚Äî –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è, ‚ô™ ‚Äî —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è, ùÖ° ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å"
    ],
    "correct_idx": 2,
    "why": "–°—Ç–∞–Ω–¥–∞—Ä—Ç: —á–µ—Ç–≤–µ—Ä—Ç—å ‚ô© = 1, –≤–æ—Å—å–º–∞—è ‚ô™ = 1/2, —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è ùÖ° = 1/4 –æ—Ç —á–µ—Ç–≤–µ—Ä—Ç–∏."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ —É–¥–∞—Ä–æ–≤ –¥–µ—Ä–∂–∏—Ç—Å—è ùÖû (–ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è –Ω–æ—Ç–∞) –≤ —Ä–∞–∑–º–µ—Ä–µ —Å —á–µ—Ç–≤–µ—Ä—Ç–Ω–æ–π –¥–æ–ª–µ–π –∑–∞ –µ–¥–∏–Ω–∏—Ü—É?",
    "options": [
      "1 —É–¥–∞—Ä",
      "2 —É–¥–∞—Ä–∞",
      "4 —É–¥–∞—Ä–∞",
      "1/2 —É–¥–∞—Ä–∞"
    ],
    "correct_idx": 1,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî –≤–¥–≤–æ–µ –¥–ª–∏–Ω–Ω–µ–µ —á–µ—Ç–≤–µ—Ä—Ç–∏: 2 —Å—á–µ—Ç–∞."
  },
  {
    "q": "–ö–∞–∫ –æ–±—ã—á–Ω–æ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç —Å—á—ë—Ç –¥–ª—è –≤–æ—Å—å–º—ã—Ö –Ω–æ—Ç –≤ –æ–¥–Ω–æ–º —Ç–∞–∫—Ç–µ –Ω–∞ 4/4?",
    "options": [
      "1-–µ-–∏-–∞",
      "—Ä–∞–∑-–¥–≤–∞-—Ç—Ä–∏",
      "1-–∏-–∞",
      "1-–∏, 2-–∏, 3-–∏, 4-–∏"
    ],
    "correct_idx": 3,
    "why": "–í–æ—Å—å–º—ã–µ –¥–µ–ª—è—Ç —á–µ—Ç–≤–µ—Ä—Ç—å –ø–æ–ø–æ–ª–∞–º, –æ–±—ã—á–Ω–æ —Å—á–∏—Ç–∞—é—Ç '1-–∏, 2-–∏‚Ä¶'. '1-–µ-–∏-–∞' ‚Äî —ç—Ç–æ –¥–ª—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—ã—Ö."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ–±—ã—á–Ω–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ –≤–∏–¥–∞ e|--0--0--2--0--3--3--2--|:",
    "options": [
      "–ù—É–ª–∏ –≤—Å–µ–≥–¥–∞ –∏–≥—Ä–∞—é—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞ –¥–æ–ª—å—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö",
      "–ß–µ–º –±–æ–ª—å—à–µ –Ω–æ–º–µ—Ä –ª–∞–¥–∞, —Ç–µ–º –¥–ª–∏–Ω–Ω–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "–û–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–∏–¥ —Ü–∏—Ñ—Ä –Ω–µ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ç",
      "–õ—é–±–∞—è —Ü–∏—Ñ—Ä–∞ –≤ —Ç–∞–±–µ ‚Äî –≤—Å–µ–≥–¥–∞ —á–µ—Ç–≤–µ—Ä—Ç—å"
    ],
    "correct_idx": 2,
    "why": "–í —Ç–∞–±–∞—Ö –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –∑–∞—à–∏—Ç–∞ –≤ —Å–∞–º—É —Ü–∏—Ñ—Ä—É/–ª–∞–¥."
  },
  {
    "q": "–ö–∞–∫–æ–π –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Å Songsterr?",
    "options": [
      "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫—Ç–æ–≤—ã–µ —á–µ—Ä—Ç—ã –∏ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
      "–í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∏—Ç–º–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–¥–ª—è—Ç—å –∏ –∏–≥—Ä–∞—Ç—å –≤ —Å—á—ë—Ç",
      "–°—Ä–∞–∑—É –∏–≥—Ä–∞—Ç—å –≤–¥–≤–æ–µ –±—ã—Å—Ç—Ä–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
      "–ò–≥—Ä–∞—Ç—å –Ω–∞—É–≥–∞–¥ –±–µ–∑ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º —É—Å–∫–æ—Ä—è—Ç—å –¥–æ –º–∞–∫—Å–∏–º—É–º–∞"
    ],
    "correct_idx": 1,
    "why": "Songsterr —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–µ–¥—ë—Ç —Ä–∏—Ç–º; –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –∏ –∏–≥—Ä–∞ –≤ —Å—á—ë—Ç –ø–æ–≤—ã—à–∞—é—Ç —Ç–æ—á–Ω–æ—Å—Ç—å."
  },
  {
    "q": "–ö–∞–∫–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∏—Ç–º–∞ –∏–∑ —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
    "options": [
      "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏",
      "–ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –º–æ–≥—É—Ç –ø–æ–º–æ–≥–∞—Ç—å, –Ω–æ —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Ä–∏—Ç–º-—Ä–∞–∑–º–µ—Ç–∫–æ–π",
      "–ù–æ–º–µ—Ä –ª–∞–¥–∞ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∑–∞–¥–∞—ë—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "–ü—Ä–æ–±–µ–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã –Ω–æ—Ç–Ω—ã–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º"
    ],
    "correct_idx": 1,
    "why": "–ü—Ä–æ–±–µ–ª ‚Äî –ª–∏—à—å –ø–æ–¥—Å–∫–∞–∑–∫–∞. –¢–æ—á–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—é—Ç –∑–≤—É–∫, —Å—á—ë—Ç –∏/–∏–ª–∏ –Ω–æ—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π."
  }
]

================================================================================
FILE: Bot\data\tests\theory_5.json
================================================================================
[
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–¥–æ–ª—è¬ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—á—ë—Ç–∞?",
    "options": [
      "–£–¥–∞—Ä –ø–æ –±–∞—Å–æ–≤–æ–π —Å—Ç—Ä—É–Ω–µ",
      "–°–º–µ–Ω–∞ –∞–∫–∫–æ—Ä–¥–∞",
      "–õ—é–±–∞—è –¥–ª–∏–Ω–Ω–∞—è –Ω–æ—Ç–∞",
      "–û–¥–∏–Ω —É–¥–∞—Ä –ø—É–ª—å—Å–∞ (–µ–¥–∏–Ω–∏—Ü–∞ —Å—á—ë—Ç–∞)"
    ],
    "correct_idx": 3,
    "why": "–î–æ–ª—è ‚Äî —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã–π —É–¥–∞—Ä –ø—É–ª—å—Å–∞: 1, 2, 3, 4‚Ä¶"
  },
  {
    "q": "–ö–∞–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ä–∂–∏—Ç—Å—è –≤–µ—Å—å —Ç–∞–∫—Ç 4/4?",
    "options": [
      "–í–æ—Å—å–º–∞—è",
      "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è",
      "–¶–µ–ª–∞—è",
      "–ß–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è"
    ],
    "correct_idx": 2,
    "why": "–¶–µ–ª–∞—è –Ω–æ—Ç–∞ = 4 –¥–æ–ª–∏, –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ü–µ–ª—ã–π —Ç–∞–∫—Ç 4/4."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –¥–æ–ª–µ–π –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è –Ω–æ—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 4/4?",
    "options": [
      "2 –¥–æ–ª–∏",
      "4 –¥–æ–ª–∏",
      "1/2 –¥–æ–ª–∏",
      "1 –¥–æ–ª—è"
    ],
    "correct_idx": 0,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è = 2 —á–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –¥–æ–ª–∏."
  },
  {
    "q": "–ö–∞–∫ –≤—Å–ª—É—Ö –æ–±—ã—á–Ω–æ —Å—á–∏—Ç–∞—é—Ç –≤–æ—Å—å–º—ã–µ –Ω–æ—Ç—ã –≤ —Ç–∞–∫—Ç–µ 4/4?",
    "options": [
      "–†–ê–ó-–∏-–î–í–ê-–∏-–¢–†–ò-–∏-–ß–ï–¢–´–†–ï-–∏",
      "–†–ê–ó-–µ-–∏-–∞",
      "–†–ê–ó-–¥–≤–∞, –¢–†–ò-—á–µ—Ç—ã—Ä–µ",
      "–†–ê–ó-–¥–≤–∞-—Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ"
    ],
    "correct_idx": 0,
    "why": "–í–æ—Å—å–º—ã–µ –¥–µ–ª—è—Ç –∫–∞–∂–¥—É—é —á–µ—Ç–≤–µ—Ä—Ç—å –Ω–∞ –¥–≤–∞ —Å–ª–æ–≥–∞: ¬´—Ä–∞–∑-–∏¬ª."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –≤–æ—Å—å–º—ã—Ö –Ω–æ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ç–∞–∫—Ç 4/4?",
    "options": [
      "2",
      "8",
      "4",
      "16"
    ],
    "correct_idx": 1,
    "why": "–ö–∞–∂–¥–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å = –¥–≤–µ –≤–æ—Å—å–º—ã–µ; 4√ó2 = 8."
  },
  {
    "q": "–°–æ–æ—Ç–Ω–µ—Å–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:",
    "options": [
      "–¶–µ–ª–∞—è ‚Äî 4; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 1; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 2; –≤–æ—Å—å–º–∞—è ‚Äî 1",
      "–¶–µ–ª–∞—è ‚Äî 1; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 2; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 4; –≤–æ—Å—å–º–∞—è ‚Äî 8",
      "–¶–µ–ª–∞—è ‚Äî 2; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 1; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 4; –≤–æ—Å—å–º–∞—è ‚Äî 1/2",
      "–¶–µ–ª–∞—è ‚Äî 4; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 2; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 1; –≤–æ—Å—å–º–∞—è ‚Äî 1/2"
    ],
    "correct_idx": 3,
    "why": "–ë–∞–∑–æ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ —Å—á—ë—Ç–µ 4/4: 4‚Äì2‚Äì1‚Äì¬Ω."
  },
  {
    "q": "–ö–∞–∫–∞—è –¥–æ–ª—è –æ–±—ã—á–Ω–æ —Å–∏–ª—å–Ω–∞—è –≤ —Ä–∞–∑–º–µ—Ä–µ 4/4?",
    "options": [
      "–í—Ç–æ—Ä–∞—è",
      "–ß–µ—Ç–≤—ë—Ä—Ç–∞—è",
      "–¢—Ä–µ—Ç—å—è",
      "–ü–µ—Ä–≤–∞—è (¬´–†–ê–ó¬ª)"
    ],
    "correct_idx": 3,
    "why": "–°—Ç–∞—Ä—Ç —Ç–∞–∫—Ç–∞ (1-—è –¥–æ–ª—è) —á–∞—â–µ –∞–∫—Ü–µ–Ω—Ç–Ω–∞—è."
  },
  {
    "q": "–ß–µ–º ¬´–ø—É–ª—å—Å¬ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç ¬´—Ä–∏—Ç–º–∞¬ª?",
    "options": [
      "–†–∞–∑–Ω–∏—Ü—ã –Ω–µ—Ç ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ",
      "–ü—É–ª—å—Å ‚Äî —ç—Ç–æ –¥–ª–∏–Ω–Ω—ã–µ –Ω–æ—Ç—ã, —Ä–∏—Ç–º ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ",
      "–ü—É–ª—å—Å ‚Äî —Ä–æ–≤–Ω—ã–µ —É–¥–∞—Ä—ã —Å—á—ë—Ç–∞; —Ä–∏—Ç–º ‚Äî —É–∑–æ—Ä –¥–ª–∏–Ω/–∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–≤—É–∫–æ–≤ –ø–æ–≤–µ—Ä—Ö –ø—É–ª—å—Å–∞",
      "–ü—É–ª—å—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ–ª–æ–¥–∏–∏, —Ä–∏—Ç–º ‚Äî –Ω–µ—Ç"
    ],
    "correct_idx": 2,
    "why": "–ü—É–ª—å—Å —Å—Ç–∞–±–∏–ª–µ–Ω (–∫–∞–∫ –º–µ—Ç—Ä–æ–Ω–æ–º), —Ä–∏—Ç–º –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–æ–ª–µ–π."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–µ –Ω–æ—Ç—ã –≤ —Ç–∞–∫—Ç–µ 4/4?",
    "options": [
      "¬´–†–ê–ó-–¥–≤–∞-—Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ¬ª ‚Äî –ø–æ –æ–¥–Ω–æ–π –¥–æ–ª–µ",
      "¬´–†–ê–ó-–∏-–î–í–ê-–∏-–¢–†–ò-–∏-–ß–ï–¢–´–†–ï-–∏¬ª ‚Äî –ø–æ –ø–æ–ª–¥–æ–ª–∏",
      "¬´–†–ê–ó-–µ-–∏-–∞¬ª ‚Äî –ø–æ —á–µ—Ç–≤–µ—Ä—Ç–∏ –¥–æ–ª–∏",
      "¬´–†–ê–ó-–¥–≤–∞¬ª –∏ ¬´–¢–†–ò-—á–µ—Ç—ã—Ä–µ¬ª ‚Äî –ø–æ –¥–≤–µ –¥–æ–ª–∏ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ—Ç—É"
    ],
    "correct_idx": 3,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç –¥–≤–µ —á–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –¥–æ–ª–∏."
  },
  {
    "q": "–ï—Å–ª–∏ —Ç—ã —Ö–ª–æ–ø–∞–µ—à—å 4 —Ä–∞–≤–Ω—ã—Ö —É–¥–∞—Ä–∞ ¬´—Ä–∞–∑-–¥–≤–∞-—Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ¬ª, —á—Ç–æ —ç—Ç–æ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º?",
    "options": [
      "–¶–µ–ª—ã–µ",
      "–í–æ—Å—å–º—ã–µ",
      "–ß–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ",
      "–ü–æ–ª–æ–≤–∏–Ω–Ω—ã–µ"
    ],
    "correct_idx": 2,
    "why": "–ö–∞–∂–¥—ã–π —Ö–ª–æ–ø–æ–∫ = 1 –¥–æ–ª—è ‚Üí —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è."
  },
  {
    "q": "–ö–∞–∫ —Å–≤—è–∑–∞–Ω—ã –ø–æ–Ω—è—Ç–∏—è ¬´–ø—É–ª—å—Å¬ª, ¬´–¥–æ–ª—è¬ª, ¬´—Ä–∏—Ç–º¬ª?",
    "options": [
      "–ü—É–ª—å—Å ‚Äî —É–∑–æ—Ä –Ω–æ—Ç; –¥–æ–ª—è ‚Äî —Ç–µ–º–ø; —Ä–∏—Ç–º ‚Äî –≥—Ä–æ–º–∫–æ—Å—Ç—å",
      "–ü—É–ª—å—Å –¥–∞—ë—Ç —Ä–æ–≤–Ω—ã–µ —É–¥–∞—Ä—ã; –¥–æ–ª—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –ø—É–ª—å—Å–∞; —Ä–∏—Ç–º ‚Äî –∫–∞–∫ –∑–≤—É—á–∞—Ç –Ω–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –¥–æ–ª–µ–π",
      "–ü—É–ª—å—Å –∏ —Ä–∏—Ç–º –∑–∞–¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ –±–∞—Å-–≥–∏—Ç–∞—Ä–∞",
      "–ü—É–ª—å—Å ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤; –¥–æ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–∫–∞–ª–∞; —Ä–∏—Ç–º ‚Äî –¥–ª—è –≥–∏—Ç–∞—Ä—ã"
    ],
    "correct_idx": 1,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞: –ø—É–ª—å—Å (–º–µ—Ç—Ä), –¥–æ–ª—è (–µ–¥–∏–Ω–∏—Ü–∞), —Ä–∏—Ç–º (—Ä–∏—Å—É–Ω–æ–∫)."
  },
  {
    "q": "–í —Ç–∞–∫—Ç–µ 4/4 —Ç—ã —Å—ã–≥—Ä–∞–ª –¥–≤–µ —Ä–æ–≤–Ω—ã–µ –Ω–æ—Ç—ã, –∫–∞–∂–¥–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ –¥–≤–∞ —Å—á—ë—Ç–∞. –ß—Ç–æ —ç—Ç–æ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —á–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω —Ç–∞–∫—Ç?",
    "options": [
      "–î–≤–µ —á–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ; —Ç–∞–∫—Ç –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É –ø—É—Å—Ç",
      "–î–≤–µ –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–µ; —Ç–∞–∫—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é",
      "–î–≤–µ –≤–æ—Å—å–º—ã–µ; —Ç–∞–∫—Ç –ø–æ—á—Ç–∏ –ø—É—Å—Ç",
      "–î–≤–µ —Ü–µ–ª—ã–µ; —Ç–∞–∫—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω"
    ],
    "correct_idx": 1,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω—ã–µ = –ø–æ 2 –¥–æ–ª–∏ –∫–∞–∂–¥–∞—è; 2√ó2 = 4 –¥–æ–ª–∏ —Ç–∞–∫—Ç–∞."
  }
]

================================================================================
FILE: Bot\data\tests\theory_6.json
================================================================================
[
  {
    "q": "–°—Ç—Ä–æ–≥–æ –≥–æ–≤–æ—Ä—è, —á—Ç–æ —Ç–∞–∫–æ–µ ¬´–ª–∞–¥¬ª –Ω–∞ –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–õ—é–±–∞—è –æ—Ç–º–µ—Ç–∫–∞-—Ç–æ—á–∫–∞ –Ω–∞ –Ω–∞–∫–ª–∞–¥–∫–µ",
      "–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ä–æ–∂–∫–∞–º–∏",
      "–õ—é–±–∞—è —á–∞—Å—Ç—å –∫–æ—Ä–ø—É—Å–∞ –≤–æ–∑–ª–µ —Ä–æ–∑–µ—Ç–∫–∏",
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –ø–æ–ª–æ—Å–∫–∞ –Ω–∞ –≥—Ä–∏—Ñ–µ"
    ],
    "correct_idx": 1,
    "why": "–í —Ä–∞–∑–¥–µ–ª–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è: –ª–∞–¥ ‚Äî —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ—Ä–æ–∂–∫–∞–º–∏."
  },
  {
    "q": "–ö—É–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –ø–∞–ª–µ—Ü –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏ –Ω–æ—Ç—ã –≤ –ª–∞–¥—É?",
    "options": [
      "–†–æ–≤–Ω–æ –Ω–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –ø–æ–ª–æ—Å–∫—É",
      "–≠—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ ‚Äî –∑–≤—É–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π",
      "–ü–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –º–µ–∂–¥—É –ª–∞–¥–æ–≤—ã–º–∏ –ø–æ—Ä–æ–∂–∫–∞–º–∏, –∫–∞–∫ –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ",
      "–í–Ω—É—Ç—Ä–∏ –ª–∞–¥–∞, –±–ª–∏–∂–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π –ø–æ–ª–æ—Å–∫–µ"
    ],
    "correct_idx": 3,
    "why": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–∞–ª–µ—Ü –≤–Ω—É—Ç—Ä–∏ –ª–∞–¥–∞, –±–ª–∏–∂–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Ä–æ–∂–∫—É ‚Äî —á–∏—â–µ –∑–≤—É–∫ –∏ –º–µ–Ω—å—à–µ –¥—Ä–µ–±–µ–∑–≥."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–ø–æ–∑–∏—Ü–∏—è¬ª –ª–µ–≤–æ–π —Ä—É–∫–∏?",
    "options": [
      "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ –≥–∏—Ç–∞—Ä—ã –Ω–∞ –∫–æ–ª–µ–Ω–µ",
      "–£—á–∞—Å—Ç–æ–∫ –≥—Ä–∏—Ñ–∞, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–µ–≤–∞—è —Ä—É–∫–∞; –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–µ–Ω –Ω–æ–º–µ—Ä—É –ª–∞–¥–∞ –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º",
      "–õ—é–±–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä—É–Ω –Ω–∞–¥ –≥—Ä–∏—Ñ–æ–º",
      "–õ—é–±–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥"
    ],
    "correct_idx": 1,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞: –ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ª–∞–¥—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü."
  },
  {
    "q": "–ï—Å–ª–∏ —Ç—ã –∏–≥—Ä–∞–µ—à—å –Ω–∞ –ª–∞–¥–∞—Ö 5‚Äì8 —Å —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º –Ω–∞ 5-–º –ª–∞–¥—É, –≤ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?",
    "options": [
      "–í –ø–µ—Ä–≤–æ–π",
      "–í –≤–æ—Å—å–º–æ–π",
      "–í –ø—è—Ç–æ–π",
      "–í —á–µ—Ç–≤—ë—Ä—Ç–æ–π"
    ],
    "correct_idx": 2,
    "why": "–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = –Ω–æ–º–µ—Ä –ª–∞–¥–∞ –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º ‚Üí 5-—è –ø–æ–∑–∏—Ü–∏—è."
  },
  {
    "q": "–ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –∑–≤—É–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–¥ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫ –∫–æ—Ä–ø—É—Å—É?",
    "options": [
      "–ù–µ –º–µ–Ω—è–µ—Ç—Å—è",
      "–ù–∞ –ø–æ–ª—Ç–æ–Ω–∞ –≤—ã—à–µ",
      "–ù–∞ —Ç–æ–Ω –≤—ã—à–µ",
      "–ù–∞ –ø–æ–ª—Ç–æ—Ä–∞ —Ç–æ–Ω–∞ –≤—ã—à–µ"
    ],
    "correct_idx": 1,
    "why": "–ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–¥ –ø–æ–≤—ã—à–∞–µ—Ç –Ω–æ—Ç—É –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞."
  },
  {
    "q": "–ö–∞–∫–æ–≤–∞ —Ä–æ–ª—å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø–æ—Ä–æ–∂–∫–∞ (—É –≥–æ–ª–æ–≤–∫–∏ –≥—Ä–∏—Ñ–∞)?",
    "options": [
      "–†–µ–≥—É–ª–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ä–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å",
      "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∑–≤—É–∫ –∫–∞–∫ —Ä–æ–∑–µ—Ç–∫–∞",
      "–°–ª—É–∂–∏—Ç –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–µ–º–Ω—è",
      "–ü–æ–¥–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä—É–Ω—ã, –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∏ –æ—Ç–¥–µ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∏—Ñ–∞"
    ],
    "correct_idx": 3,
    "why": "–í —Ç–µ–∫—Å—Ç–µ: –ø–æ—Ä–æ–∂–µ–∫ –ø–æ–¥–Ω–∏–º–∞–µ—Ç/–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–Ω—ã –∏ –æ—Ç–¥–µ–ª—è–µ—Ç –∑–æ–Ω—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –Ω–∞ 1-–π —Å—Ç—Ä—É–Ω–µ (E) –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 3-–º –ª–∞–¥—É?",
    "options": [
      "F",
      "A",
      "G",
      "F‚ôØ"
    ],
    "correct_idx": 2,
    "why": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1-–π —Å—Ç—Ä—É–Ω—ã: 0 E, 1 F, 2 F‚ôØ, 3 G, 4 G‚ôØ, 5 A."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –Ω–∞ 5-–π —Å—Ç—Ä—É–Ω–µ (A) –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 3-–º –ª–∞–¥—É?",
    "options": [
      "F",
      "B",
      "C",
      "D‚ôØ"
    ],
    "correct_idx": 2,
    "why": "5-—è —Å—Ç—Ä—É–Ω–∞: 0 A, 1 A‚ôØ, 2 B, 3 C, 4 C‚ôØ, 5 D."
  },
  {
    "q": "–ù–∞ –∫–∞–∫–∏—Ö –ø–∞—Ä–∞—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç –ù–ï–¢ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø–æ–ª—É—Ç–æ–Ω–∞ (—Ç–æ –µ—Å—Ç—å –Ω–µ—Ç –¥–∏–µ–∑–∞ –º–µ–∂–¥—É –Ω–∏–º–∏)?",
    "options": [
      "E‚ÄìF –∏ B‚ÄìC",
      "F‚ÄìG",
      "A‚ÄìB",
      "C‚ÄìD"
    ],
    "correct_idx": 0,
    "why": "–ò—Å–∫–ª—é—á–µ–Ω–∏—è: –º–µ–∂–¥—É E‚ÄìF –∏ B‚ÄìC —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –ø–æ–ª—Ç–æ–Ω–∞."
  },
  {
    "q": "–ì–¥–µ –æ–±—ã—á–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Ç–æ—á–∫–∏-–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ –≥—Ä–∏—Ñ–∞?",
    "options": [
      "–ù–∞ 1-–º –∏ 2-–º –ª–∞–¥–∞—Ö",
      "–ù–∞ 3-–º –∏ 5-–º –ª–∞–¥–∞—Ö",
      "–ù–∞ 2-–º –∏ 4-–º –ª–∞–¥–∞—Ö",
      "–ù–∞ 4-–º –∏ 6-–º –ª–∞–¥–∞—Ö"
    ],
    "correct_idx": 1,
    "why": "–í —Ç–µ–∫—Å—Ç–µ —É–∫–∞–∑–∞–Ω–æ: —á–∞—â–µ –≤—Å–µ–≥–æ –º–µ—Ç–∫–∏ –µ—Å—Ç—å –Ω–∞ 3-–º –∏ 5-–º –ª–∞–¥–∞—Ö."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´0 –ª–∞–¥¬ª –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–æ—Ç –ø–æ —Å—Ç—Ä—É–Ω–∞–º?",
    "options": [
      "–ó–∞–∂–∞—Ç—å –ø–µ—Ä–≤—ã–π –ª–∞–¥",
      "–ì–ª—É—à—ë–Ω—ã–π —É–¥–∞—Ä",
      "–§–ª–∞–∂–æ–ª–µ—Ç –Ω–∞ 12-–º –ª–∞–¥—É",
      "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ (–Ω–µ –∑–∞–∂–∞—Ç–∞)"
    ],
    "correct_idx": 3,
    "why": "0 = –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞."
  },
  {
    "q": "–ü–æ—á–µ–º—É 5-–π –ª–∞–¥ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–∞–∫ –æ–ø–æ—Ä–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –æ–±—É—á–µ–Ω–∏—è?",
    "options": [
      "–û–Ω —Å–∞–º—ã–π –º—è–≥–∫–∏–π –ø–æ —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–º –æ—â—É—â–µ–Ω–∏—è–º",
      "–¢–æ–ª—å–∫–æ —Å –Ω–µ–≥–æ –Ω–∞—á–∏–Ω–∞—é—Ç —Å—Ç—Ä–æ–∏—Ç—å –∞–∫–∫–æ—Ä–¥—ã",
      "–ù–∞ –Ω—ë–º –≤—Å–µ–≥–¥–∞ –∑–≤—É—á–∏—Ç –Ω–æ—Ç–∞ C –Ω–∞ –ª—é–±–æ–π —Å—Ç—Ä—É–Ω–µ",
      "–ï–≥–æ —á–∞—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç –≤ –≥–∞–º–º–∞—Ö –∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"
    ],
    "correct_idx": 3,
    "why": "–í –ø—Ä–∏–º–µ—á–∞–Ω–∏—è—Ö: 5-–π –ª–∞–¥ ‚Äî —É–¥–æ–±–Ω–∞—è –æ–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞ (–≥–∞–º–º—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)."
  }
]

================================================================================
FILE: Bot\data\tests\theory_7.json
================================================================================
[
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–ª—É—Ç–æ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≥–∏—Ç–∞—Ä—ã?",
    "options": [
      "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–≤–∞ –ª–∞–¥–∞ –ø–æ –≥—Ä–∏—Ñ—É",
      "–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–æ–π –∏ –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–Ω–æ–π",
      "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–¥–∏–Ω –ª–∞–¥ –ø–æ –≥—Ä–∏—Ñ—É",
      "–õ—é–±–æ–π —à–∞–≥ –º–µ–∂–¥—É –¥–≤—É–º—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–æ—Ç–∞–º–∏"
    ],
    "correct_idx": 2,
    "why": "–ü–æ–ª—É—Ç–æ–Ω ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –≤ 12-—Ç–æ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ; –Ω–∞ –≥–∏—Ç–∞—Ä–µ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π –ª–∞–¥."
  },
  {
    "q": "–¢–æ–Ω ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "–õ—é–±–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ª–∞–¥–∞",
      "–î–≤–∞ –ø–æ–ª—É—Ç–æ–Ω–∞, —Ç–æ –µ—Å—Ç—å –¥–≤–∞ –ª–∞–¥–∞ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑",
      "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–ª—É—Ç–æ–Ω–∞",
      "–¢—Ä–∏ –ø–æ–ª—É—Ç–æ–Ω–∞"
    ],
    "correct_idx": 1,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: —Ç–æ–Ω = 2 –ø–æ–ª—É—Ç–æ–Ω–∞ = 2 –ª–∞–¥–∞."
  },
  {
    "q": "–ü–µ—Ä–µ—Ö–æ–¥ —Å 3-–≥–æ –Ω–∞ 5-–π –ª–∞–¥ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ ‚Äî —ç—Ç–æ:",
    "options": [
      "–ü–æ–ª—É—Ç–æ–Ω",
      "–¢—Ä–∏ –ø–æ–ª—É—Ç–æ–Ω–∞",
      "–¢–æ–Ω",
      "–ü–æ–ª—Ç–æ—Ä–∞ —Ç–æ–Ω–∞"
    ],
    "correct_idx": 2,
    "why": "3 ‚Üí 5 = +2 –ª–∞–¥–∞ = 2 –ø–æ–ª—É—Ç–æ–Ω–∞ = —Ç–æ–Ω."
  },
  {
    "q": "–ö–∞–∫–∏–µ –ø–∞—Ä—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ü–û–õ–£–¢–û–ù–û–ú (–±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –¥–∏–µ–∑–∞/–±–µ–º–æ–ª—è)?",
    "options": [
      "G‚ÄìA –∏ A‚ÄìB",
      "A‚ÄìB –∏ D‚ÄìE",
      "C‚ÄìD –∏ F‚ÄìG",
      "E‚ÄìF –∏ B‚ÄìC"
    ],
    "correct_idx": 3,
    "why": "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–æ—Ä—è–¥–∞: –º–µ–∂–¥—É E‚ÄìF –∏ B‚ÄìC –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –ø–æ–ª—É—Ç–æ–Ω, –±–µ–∑ E‚ôØ –∏ B‚ôØ."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 1-–π —Å—Ç—Ä—É–Ω–µ (E) –Ω–∞ 5-–º –ª–∞–¥—É?",
    "options": [
      "B",
      "F‚ôØ",
      "A",
      "G"
    ],
    "correct_idx": 2,
    "why": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0 E, 1 F, 2 F‚ôØ, 3 G, 4 G‚ôØ, 5 A."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 6-–π —Å—Ç—Ä—É–Ω–µ (E) –Ω–∞ 3-–º –ª–∞–¥—É?",
    "options": [
      "A",
      "G",
      "D",
      "F"
    ],
    "correct_idx": 1,
    "why": "0 E, 1 F, 2 F‚ôØ, 3 G."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ª–∞–¥–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—É –∂–µ –Ω–æ—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–π –æ–∫—Ç–∞–≤–µ?",
    "options": [
      "12 –ª–∞–¥–æ–≤",
      "10 –ª–∞–¥–æ–≤",
      "8 –ª–∞–¥–æ–≤",
      "7 –ª–∞–¥–æ–≤"
    ],
    "correct_idx": 0,
    "why": "–û–∫—Ç–∞–≤–∞ = 12 –ø–æ–ª—É—Ç–æ–Ω–æ–≤ ‚Üí –Ω–∞ –≥–∏—Ç–∞—Ä–µ 12 –ª–∞–¥–æ–≤."
  },
  {
    "q": "–ù–æ—Ç–∞ G –Ω–∞ 6-–π —Å—Ç—Ä—É–Ω–µ, 3-–π –ª–∞–¥. –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –µ—ë –û–ö–¢–ê–í–ê –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä—É–Ω–∞—Ö –ø–æ —Ç–∏–ø–∏—á–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É?",
    "options": [
      "5-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥",
      "4-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "3-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 6-–π –ª–∞–¥"
    ],
    "correct_idx": 1,
    "why": "–î–ª—è 6-–π/5-–π —Å—Ç—Ä—É–Ω: –ø–æ–¥–Ω–∏–º–∏—Å—å –Ω–∞ 2 —Å—Ç—Ä—É–Ω—ã –≤—ã—à–µ –∏ —Å–¥–≤–∏–Ω—å—Å—è –Ω–∞ +2 –ª–∞–¥–∞ ‚Üí 4-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥."
  },
  {
    "q": "–ù–æ—Ç–∞ D –Ω–∞ 5-–π —Å—Ç—Ä—É–Ω–µ, 5-–π –ª–∞–¥. –ì–¥–µ –µ—ë –æ–∫—Ç–∞–≤–∞ –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º —Å—Ç—Ä—É–Ω–∞–º?",
    "options": [
      "4-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥",
      "3-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "3-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥"
    ],
    "correct_idx": 2,
    "why": "–î–ª—è 5-–π —Å—Ç—Ä—É–Ω—ã —Ç–æ—Ç –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω: +2 —Å—Ç—Ä—É–Ω—ã –∏ +2 –ª–∞–¥–∞ ‚Üí 3-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥."
  },
  {
    "q": "–ù–æ—Ç–∞ G –Ω–∞ 4-–π —Å—Ç—Ä—É–Ω–µ, 5-–π –ª–∞–¥. –ì–¥–µ –µ—ë –æ–∫—Ç–∞–≤–∞ –Ω–∞ 2-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "2-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 8-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 10-–π –ª–∞–¥"
    ],
    "correct_idx": 2,
    "why": "–ò–∑-–∑–∞ —Å—Ç—Ä–æ—è G‚ÄìB –º–µ–∂–¥—É 4-–π –∏ 2-–π —Å—Ç—Ä—É–Ω–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è +3 –ª–∞–¥–∞: 5 ‚Üí 8."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ª–∞–¥–æ–≤ –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏ E –∏ A –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ (–≤–≤–µ—Ä—Ö)?",
    "options": [
      "7 –ª–∞–¥–æ–≤",
      "3 –ª–∞–¥–∞",
      "5 –ª–∞–¥–æ–≤",
      "4 –ª–∞–¥–∞"
    ],
    "correct_idx": 2,
    "why": "E‚ÜíF(+1), F‚ôØ(+2), G(+3), G‚ôØ(+4), A(+5) ‚Üí –∏—Ç–æ–≥–æ +5 –ª–∞–¥–æ–≤ (2,5 —Ç–æ–Ω–∞)."
  },
  {
    "q": "–ß—Ç–æ –ù–ï–í–ï–†–ù–û –æ –∑–≤—É–∫–æ—Ä—è–¥–µ –∏–∑ 12 –∑–≤—É–∫–æ–≤?",
    "options": [
      "E‚ÄìF –∏ B‚ÄìC ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –¥–∏–µ–∑–∞",
      "–ú–µ–∂–¥—É –ª—é–±—ã–º–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ –±—É–∫–≤–µ–Ω–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –¥–∏–µ–∑",
      "–í—Å–µ–≥–æ 12 —à–∞–≥–æ–≤ –ø–æ –ø–æ–ª—É—Ç–æ–Ω–∞–º –¥–æ –ø–æ–≤—Ç–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ—Ç—ã",
      "–ü–æ–ª—É—Ç–æ–Ω ‚Äî –±–∞–∑–æ–≤—ã–π —à–∞–≥ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ –≤—ã—Å–æ—Ç–∞–º–∏"
    ],
    "correct_idx": 1,
    "why": "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∂–Ω–æ –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π E‚ÄìF –∏ B‚ÄìC (–º–µ–∂–¥—É –Ω–∏–º–∏ –Ω–µ—Ç E‚ôØ/B‚ôØ)."
  }
]

================================================================================
FILE: Bot\data\tests\theory_8.json
================================================================================
[
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫–∫–æ—Ä–¥ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∏–∑ —Ä–∞–∑–¥–µ–ª–∞?",
    "options": [
      "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω—ã",
      "–≠—Ç–æ –æ–¥–Ω–∞ –Ω–æ—Ç–∞, –Ω–æ –≥—Ä–æ–º–∫–æ",
      "–≠—Ç–æ 3 –∏ –±–æ–ª–µ–µ –Ω–æ—Ç—ã, —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
      "–≠—Ç–æ 2 –ª—é–±—ã–µ –Ω–æ—Ç—ã –ø–æ–¥—Ä—è–¥ (–∞—Ä–ø–µ–¥–∂–∏–æ)"
    ],
    "correct_idx": 2,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: –∞–∫–∫–æ—Ä–¥ ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ 3+) –Ω–æ—Ç, –∑–≤—É—á–∞—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
  },
  {
    "q": "–ö–∞–∫ –Ω–∞ —Å–ª—É—Ö –æ—Ç–ª–∏—á–∏—Ç—å –∞–∫–∫–æ—Ä–¥ –æ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–π –Ω–æ—Ç—ã?",
    "options": [
      "–ê–∫–∫–æ—Ä–¥ –∑–≤—É—á–∏—Ç –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤—É–∫–æ–≤ —Å—Ä–∞–∑—É; –æ–¥–∏–Ω–æ—á–Ω–∞—è –Ω–æ—Ç–∞ ‚Äî –æ–¥–∏–Ω –∑–≤—É–∫",
      "–ê–∫–∫–æ—Ä–¥ –≤—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä–µ–µ –ø–æ —Ç–µ–º–ø—É",
      "–ê–∫–∫–æ—Ä–¥ –≤—Å–µ–≥–¥–∞ —Ç–∏—à–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –Ω–æ—Ç—ã",
      "–û—Ç–ª–∏—á–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
    ],
    "correct_idx": 0,
    "why": "–†–∞–∑–¥–µ–ª –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∑–≤—É–∫–æ–≤ –≤ –∞–∫–∫–æ—Ä–¥–µ."
  },
  {
    "q": "–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∑–≤—É–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –∑–≤—É—á–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–æ–º?",
    "options": [
      "–õ—é–±–æ–µ —á–∏—Å–ª–æ –Ω–æ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏",
      "–û–¥–Ω–∞ –Ω–æ—Ç–∞, –Ω–æ —Å –≤–∏–±—Ä–∞—Ç–æ",
      "–î–≤–µ –Ω–æ—Ç—ã –ø–æ–¥—Ä—è–¥",
      "–ù–µ –º–µ–Ω–µ–µ —Ç—Ä—ë—Ö –Ω–æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
    ],
    "correct_idx": 3,
    "why": "¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏: 3 –∏ –±–æ–ª–µ–µ –Ω–æ—Ç—ã, –∑–≤—É—á–∞—â–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ¬ª."
  },
  {
    "q": "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –∑–∞–∂–∏–º–∞–µ—à—å –≤ –ø—Ä–∏–º–µ—Ä–µ –∞–∫–∫–æ—Ä–¥–∞ Am –∏–∑ —Ä–∞–∑–¥–µ–ª–∞?",
    "options": [
      "2-—é, 3-—é –∏ 4-—é —Å—Ç—Ä—É–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–∞–¥–∞—Ö; –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–≤—É—á–∞—Ç –æ—Ç–∫—Ä—ã—Ç–æ",
      "–¢–æ–ª—å–∫–æ 1-—é –∏ 6-—é —Å—Ç—Ä—É–Ω—ã",
      "–í—Å–µ —à–µ—Å—Ç—å —Å—Ç—Ä—É–Ω –Ω–∞ –æ–¥–Ω–æ–º –ª–∞–¥—É",
      "–ù–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω—ã (—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ)"
    ],
    "correct_idx": 0,
    "why": "–í –ø—Ä–∏–º–µ—Ä–µ Am –æ–ø–∏—Å–∞–Ω–æ: –∑–∞–∂–∞—Ç—ã 2, 3 –∏ 4 —Å—Ç—Ä—É–Ω—ã; —á–∞—Å—Ç—å —Å—Ç—Ä—É–Ω –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏."
  },
  {
    "q": "–ö–∞–∫–∏–µ —Ç—Ä–∏ —Ä–æ–ª–∏ —É –Ω–æ—Ç –≤ –±–∞–∑–æ–≤–æ–º –∞–∫–∫–æ—Ä–¥–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞?",
    "options": [
      "–¢–æ–Ω–∏–∫–∞, —Ç—Ä–µ–º–æ–ª–æ, –≤–∏–±—Ä–∞—Ç–æ",
      "–¢–æ–Ω–∏–∫–∞, –±–∞—Å-–≥–∏—Ç–∞—Ä–∞, –±–∞—Ä–∞–±–∞–Ω—ã",
      "–¢–æ–Ω–∏–∫–∞, –¥–æ–º–∏–Ω–∞–Ω—Ç–∞, —Å—É–±–¥–æ–º–∏–Ω–∞–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É",
      "–¢–æ–Ω–∏–∫–∞ (–æ—Å–Ω–æ–≤–∞), ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω–∞—è¬ª –Ω–æ—Ç–∞ (–∑–∞–¥–∞—ë—Ç –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä), –≤–µ—Ä—Ö–Ω—è—è –Ω–æ—Ç–∞ (–¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)"
    ],
    "correct_idx": 3,
    "why": "–í —Ç–µ–∫—Å—Ç–µ: 1) –æ—Å–Ω–æ–≤–Ω–∞—è (—Ç–æ–Ω–∏–∫–∞), 2) –Ω–æ—Ç–∞ —Å–≤–µ—Ä—Ö—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–∞–¥, 3) –µ—â—ë –≤—ã—à–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å."
  },
  {
    "q": "–ß—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –º–∞–∂–æ—Ä–Ω—ã–º –∏ –º–∏–Ω–æ—Ä–Ω—ã–º –∞–∫–∫–æ—Ä–¥–æ–º –≤ –¥–∞–Ω–Ω–æ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏?",
    "options": [
      "–ü–æ–ª–æ–∂–µ–Ω–∏–µ ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–π¬ª –Ω–æ—Ç—ã: –≤ –º–∞–∂–æ—Ä–µ –æ–Ω–∞ –≤—ã—à–µ, –≤ –º–∏–Ω–æ—Ä–µ ‚Äî –Ω–∏–∂–µ",
      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–Ω –≤ –∞–∫–∫–æ—Ä–¥–µ",
      "–ì—Ä–æ–º–∫–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
      "–¢–æ–ª—â–∏–Ω–∞ —Å—Ç—Ä—É–Ω"
    ],
    "correct_idx": 0,
    "why": "–†–∞–∑–¥–µ–ª: —Å–¥–≤–∏–≥ —Å—Ä–µ–¥–Ω–µ–π –Ω–æ—Ç—ã –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞ –º–µ–Ω—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä (–º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä)."
  },
  {
    "q": "–ö–∞–∫–æ–π —Å–¥–≤–∏–≥ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –≤ –º–∞–∂–æ—Ä–Ω—ã–π –ø—Ä–∏ –ø—Ä–æ—á–∏—Ö —Ä–∞–≤–Ω—ã—Ö?",
    "options": [
      "–ü–æ–¥–Ω—è—Ç—å –≤–µ—Ä—Ö–Ω—é—é –Ω–æ—Ç—É –Ω–∞ –∫–≤–∞—Ä—Ç—É",
      "–û–ø—É—Å—Ç–∏—Ç—å –±–∞—Å –Ω–∞ —Ç–æ–Ω",
      "–û–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–æ—Ç—ã –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞",
      "–ü–æ–¥–Ω—è—Ç—å ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω—É—é¬ª –Ω–æ—Ç—É –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞"
    ],
    "correct_idx": 3,
    "why": "–°–º—ã—Å–ª: –∏–º–µ–Ω–Ω–æ —Å—Ä–µ–¥–Ω—è—è –Ω–æ—Ç–∞ (—Ç–µ—Ä—Ü–∏—è –ø–æ —Å—É—Ç–∏) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–∞–¥; –µ—ë –ø–æ–¥–Ω—è—Ç–∏–µ –¥–µ–ª–∞–µ—Ç –º–∞–∂–æ—Ä —è—Ä—á–µ."
  },
  {
    "q": "–ö–∞–∫–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–æ —Å —Ç–∏–ø–æ–º –∞–∫–∫–æ—Ä–¥–∞?",
    "options": [
      "–ú–∞–∂–æ—Ä ‚Äî —Å–≤–µ—Ç–ª–æ/—É–≤–µ—Ä–µ–Ω–Ω–æ; –º–∏–Ω–æ—Ä ‚Äî –º—è–≥–∫–æ/–≥—Ä—É—Å—Ç–Ω–æ",
      "–ú–∞–∂–æ—Ä ‚Äî –≥—Ä—É—Å—Ç–Ω–æ; –º–∏–Ω–æ—Ä ‚Äî —è—Ä–∫–æ –∏ —Å–æ–ª–Ω–µ—á–Ω–æ",
      "–ú–∞–∂–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–∫–∞; –º–∏–Ω–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∂–∞–∑–∞",
      "–ú–∞–∂–æ—Ä ‚Äî –≤—Å–µ–≥–¥–∞ —Ç–∏—Ö–æ; –º–∏–Ω–æ—Ä ‚Äî –≤—Å–µ–≥–¥–∞ –≥—Ä–æ–º–∫–æ"
    ],
    "correct_idx": 0,
    "why": "–¢–∞–±–ª–∏—Ü–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ: –º–∞–∂–æ—Ä ‚Äî ¬´—Å–≤–µ—Ç–ª–æ, –æ—Ç–∫—Ä—ã—Ç–æ¬ª; –º–∏–Ω–æ—Ä ‚Äî ¬´–º—è–≥–∫–æ, —Ç–µ–º–Ω–æ, –≥—Ä—É—Å—Ç–Ω–æ¬ª."
  },
  {
    "q": "–ö–∞–∫–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–∏–ø–∏—Å–∞–Ω–æ ¬´–∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ–µ¬ª –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ?",
    "options": [
      "Am ‚Üí Dm ‚Üí E",
      "C ‚Üí G ‚Üí F",
      "Em ‚Üí D ‚Üí C",
      "Dm ‚Üí F ‚Üí E"
    ],
    "correct_idx": 1,
    "why": "–ü—Ä—è–º–æ —É–∫–∞–∑–∞–Ω–æ: C ‚Üí G ‚Üí F ‚Äî ¬´–ñ–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π –∫—É–ø–ª–µ—Ç¬ª."
  },
  {
    "q": "–ö–∞–∫—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç –∫–∞–∫ ¬´–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ¬ª?",
    "options": [
      "C ‚Üí G ‚Üí F",
      "Am ‚Üí Dm ‚Üí E",
      "G ‚Üí C ‚Üí D",
      "E ‚Üí A ‚Üí B"
    ],
    "correct_idx": 1,
    "why": "–í —Ç–µ–∫—Å—Ç–µ: Am ‚Üí Dm ‚Üí E ‚Äî –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ."
  },
  {
    "q": "–ö–∞–∫–æ–µ –∏–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–ª—É—Ö–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É?",
    "options": [
      "–°–ª—É—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞—Å-–≥–∏—Ç–∞—Ä—É –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
      "–ò–≥—Ä–∞—Ç—å –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –≥—Ä–æ–º–∫–æ",
      "–°—Ä–∞–≤–Ω–∏ –æ–¥–∏–Ω –∑–≤—É–∫ (–æ–¥–∏–Ω–æ—á–Ω—É—é –Ω–æ—Ç—É) –∏ –∞–∫–∫–æ—Ä–¥ ‚Äî –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ä–∞–∑–Ω–∏—Ü—É",
      "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä –∏ —É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–±—ã"
    ],
    "correct_idx": 2,
    "why": "–í —Ç–∞–±–ª–∏—Ü–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ¬´–°—Ä–∞–≤–Ω–∏ –æ–¥–∏–Ω –∑–≤—É–∫ –∏ –∞–∫–∫–æ—Ä–¥¬ª ‚Äî –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ."
  },
  {
    "q": "–ì–¥–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞ —á–∞—â–µ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∑–≤—É—á–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–¢–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ",
      "–¢–æ–ª—å–∫–æ –Ω–∞ 6-–π —Å—Ç—Ä—É–Ω–µ",
      "–í—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1‚Äì2 —Å—Ç—Ä—É–Ω–∞—Ö",
      "–ù–∞ 3‚Äì6 —Å—Ç—Ä—É–Ω–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
    ],
    "correct_idx": 3,
    "why": "–ò—Ç–æ–≥–æ–≤—ã–π –±–ª–æ–∫: –∞–∫–∫–æ—Ä–¥ –æ–±—ã—á–Ω–æ –∑–≤—É—á–∏—Ç ¬´–Ω–∞ 3‚Äì6 —Å—Ç—Ä—É–Ω–∞—Ö¬ª."
  }
]

================================================================================
FILE: Bot\data\tests\theory_9.json
================================================================================
[
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∞–∂–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ (–≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏) ‚Äî —ç—Ç–æ:",
    "options": [
      "0 ‚Üí +4 ‚Üí +6",
      "0 ‚Üí +4 ‚Üí +7",
      "0 ‚Üí +3 ‚Üí +7",
      "0 ‚Üí +5 ‚Üí +7"
    ],
    "correct_idx": 1,
    "why": "–ú–∞–∂–æ—Ä = —Ç–æ–Ω–∏–∫–∞ (0) + –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è (+4) + —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞ (+7)."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ä–æ–ª—å —É –±–æ–ª—å—à–æ–π —Ç–µ—Ä—Ü–∏–∏ –≤ –º–∞–∂–æ—Ä–Ω–æ–º –∞–∫–∫–æ—Ä–¥–µ?",
    "options": [
      "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ¬´–º–∞–∂–æ—Ä–Ω–æ–µ¬ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞",
      "–î–æ–±–∞–≤–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å",
      "–î–µ–ª–∞–µ—Ç –∑–≤—É–∫ –±–æ–ª–µ–µ ¬´—Ä–∞—Å—Å—ã–ø—á–∞—Ç—ã–º¬ª",
      "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞—Å–æ–≤—É—é –Ω–æ—Ç—É"
    ],
    "correct_idx": 0,
    "why": "–ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è (+4 –ø–æ–ª—É—Ç.) ‚Äî –≥–ª–∞–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä –º–∞–∂–æ—Ä–∞."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ç—Ä–æ–π–∫–∞ –Ω–æ—Ç –≤–µ—Ä–Ω–æ –∑–∞–¥–∞—ë—Ç –∞–∫–∫–æ—Ä–¥ C –º–∞–∂–æ—Ä?",
    "options": [
      "C‚ÄìE‚ÄìA",
      "C‚ÄìD#‚ÄìG",
      "C‚ÄìF‚ÄìG",
      "C‚ÄìE‚ÄìG"
    ],
    "correct_idx": 3,
    "why": "Cmaj —Å—Ç—Ä–æ–∏—Ç—Å—è –∏–∑ C (—Ç–æ–Ω–∏–∫–∞), E (–±. —Ç–µ—Ä—Ü–∏—è), G (–∫–≤–∏–Ω—Ç–∞)."
  },
  {
    "q": "–í –æ—Ç–∫—Ä—ã—Ç–æ–º C –º–∞–∂–æ—Ä (C) –∫–∞–∫–∞—è —Å—Ç—Ä—É–Ω–∞ –æ–±—ã—á–Ω–æ –ù–ï –∏–≥—Ä–∞–µ—Ç—Å—è?",
    "options": [
      "6-—è (–Ω–∏–∑–∫–æ–µ E)",
      "1-—è (–≤—ã—Å–æ–∫–æ–µ E)",
      "3-—è (G)",
      "5-—è (A)"
    ],
    "correct_idx": 0,
    "why": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä–Ω—ã–π C: —à–µ—Å—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –≥–ª—É—à–∏—Ç—Å—è (X)."
  },
  {
    "q": "–ß—Ç–æ –¥–∞—ë—Ç –∫–≤–∏–Ω—Ç–∞ (+7 –ø–æ–ª—É—Ç–æ–Ω–æ–≤) –≤ —Å–æ—Å—Ç–∞–≤–µ –∞–∫–∫–æ—Ä–¥–∞?",
    "options": [
      "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ ¬´–ø–æ–ª–Ω–æ—Ç—É¬ª –∑–≤—É—á–∞–Ω–∏—è",
      "–í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –±–∞—Å –Ω–∞ –æ–∫—Ç–∞–≤—É –≤—ã—à–µ",
      "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä",
      "–ó–∞–¥–∞–µ—Ç —Ç–µ–º–ø –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
    ],
    "correct_idx": 0,
    "why": "–ö–≤–∏–Ω—Ç–∞ —É–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–∑–≤—É—á–∏–µ, –Ω–µ –º–µ–Ω—è—è ¬´–ª–∞–¥–æ–≤–æ–≥–æ¬ª —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞."
  },
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∏–Ω–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ (–≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏) ‚Äî —ç—Ç–æ:",
    "options": [
      "0 ‚Üí +3 ‚Üí +6",
      "0 ‚Üí +2 ‚Üí +7",
      "0 ‚Üí +3 ‚Üí +7",
      "0 ‚Üí +4 ‚Üí +7"
    ],
    "correct_idx": 2,
    "why": "–ú–∏–Ω–æ—Ä = —Ç–æ–Ω–∏–∫–∞ (0) + –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è (+3) + –∫–≤–∏–Ω—Ç–∞ (+7)."
  },
  {
    "q": "–ö–∞–∫–∏–µ –Ω–æ—Ç—ã –æ–±—Ä–∞–∑—É—é—Ç A –º–∏–Ω–æ—Ä (Am)?",
    "options": [
      "A‚ÄìC#‚ÄìE",
      "A‚ÄìC‚ÄìE",
      "A‚ÄìD‚ÄìE",
      "A‚ÄìB‚ÄìE"
    ],
    "correct_idx": 1,
    "why": "Am = A (—Ç–æ–Ω–∏–∫–∞), C (–º. —Ç–µ—Ä—Ü–∏—è), E (–∫–≤–∏–Ω—Ç–∞)."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å A –º–∏–Ω–æ—Ä (A‚ÄìC‚ÄìE) –≤ A –º–∞–∂–æ—Ä –ø–æ —Ç–µ—Ä—Ü–∏–∏?",
    "options": [
      "–û–ø—É—Å—Ç–∏—Ç—å A –¥–æ G#",
      "–ü–æ–¥–Ω—è—Ç—å C –¥–æ C# (–Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞ –≤–≤–µ—Ä—Ö)",
      "–û–ø—É—Å—Ç–∏—Ç—å C –¥–æ B (–Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞ –≤–Ω–∏–∑)",
      "–ü–æ–¥–Ω—è—Ç—å E –¥–æ F"
    ],
    "correct_idx": 1,
    "why": "–ú–∏–Ω–æ—Ä‚Üí–º–∞–∂–æ—Ä: –º. —Ç–µ—Ä—Ü–∏—è (+3) ‚Üí –±. —Ç–µ—Ä—Ü–∏—è (+4)."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—Ç–æ–Ω–æ–≤ –º–µ–∂–¥—É —Ç–µ—Ä—Ü–∏–µ–π –∏ –∫–≤–∏–Ω—Ç–æ–π –≤ –º–∞–∂–æ—Ä–µ (–º–µ–∂–¥—É +4 –∏ +7 –æ—Ç —Ç–æ–Ω–∏–∫–∏)?",
    "options": [
      "1 –ø–æ–ª—É—Ç–æ–Ω",
      "3 –ø–æ–ª—É—Ç–æ–Ω–∞",
      "2 –ø–æ–ª—É—Ç–æ–Ω–∞",
      "5 –ø–æ–ª—É—Ç–æ–Ω–æ–≤"
    ],
    "correct_idx": 1,
    "why": "7 ‚àí 4 = 3 –ø–æ–ª—É—Ç–æ–Ω–∞ (–º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è –º–µ–∂–¥—É —Ç–µ—Ä—Ü–∏–µ–π –∏ –∫–≤–∏–Ω—Ç–æ–π)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –¥–ª—è D –º–∞–∂–æ—Ä:",
    "options": [
      "D‚ÄìF#‚ÄìA",
      "D‚ÄìF‚ÄìA",
      "D‚ÄìG‚ÄìA",
      "D‚ÄìE‚ÄìA"
    ],
    "correct_idx": 0,
    "why": "–ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è –æ—Ç D ‚Äî F# (+4), –∫–≤–∏–Ω—Ç–∞ ‚Äî A (+7)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –¥–ª—è E –º–∏–Ω–æ—Ä:",
    "options": [
      "E‚ÄìG‚ÄìB",
      "E‚ÄìF#‚ÄìB",
      "E‚ÄìG#‚ÄìB",
      "E‚ÄìA‚ÄìB"
    ],
    "correct_idx": 0,
    "why": "Emin: –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è ‚Äî G (+3), –∫–≤–∏–Ω—Ç–∞ ‚Äî B (+7)."
  },
  {
    "q": "–ö–∞–∫–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–∏–µ –º–∞–∂–æ—Ä–∞ –∏ –º–∏–Ω–æ—Ä–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É?",
    "options": [
      "–û—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ—Ç–æ–π —Ç–µ—Ä—Ü–∏–∏: –≤ –º–∞–∂–æ—Ä–µ –æ–Ω–∞ –≤—ã—à–µ –Ω–∞ –ø–æ–ª—É—Ç–æ–Ω",
      "–ú–∞–∂–æ—Ä –≤—Å–µ–≥–¥–∞ –≥—Ä–æ–º—á–µ, —á–µ–º –º–∏–Ω–æ—Ä",
      "–í –º–∏–Ω–æ—Ä–µ –∫–≤–∏–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª—É—Ç–æ–Ω",
      "–û—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ–º/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∫–≤–∏–Ω—Ç—ã"
    ],
    "correct_idx": 0,
    "why": "–í—Å—è ¬´–º–∞–∂–æ—Ä–Ω–æ—Å—Ç—å/–º–∏–Ω–æ—Ä–Ω–æ—Å—Ç—å¬ª ‚Äî –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ç–µ—Ä—Ü–∏–∏ (¬± –ø–æ–ª—É—Ç–æ–Ω)."
  }
]

================================================================================
FILE: bot\config.py
================================================================================
# bot/config.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import datetime
from dataclasses import dataclass
from pathlib import Path
from dotenv import load_dotenv
from zoneinfo import ZoneInfo

load_dotenv()
__all__ = [
    "Settings", "get_settings", "Course", "get_course", "COURSES",
    "tzinfo", "now_utc_str", "local_dt_str", "format_deadline_text"
]

# <<< –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞ >>>
@dataclass
class Course:
    code: str
    title: str
    price: int
    free_lessons: int

# <<< "–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤" >>>
COURSES = {
    "course_general": Course(
        code="course_general",
        title="–û–±—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        price=4999,
        free_lessons=3
    ),
    "course_five_songs": Course(
        code="course_five_songs",
        title="–ü—Ä–æ—Å—Ç—ã–µ –∞–∫–∫–æ—Ä–¥—ã –∏ 5 –ø–µ—Å–µ–Ω",
        price=1999,
        free_lessons=1
    ),
}

def get_course(code: str) -> Course | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –ø–æ –µ–≥–æ –∫–æ–¥—É."""
    return COURSES.get(code)

def _clean(s: str | None) -> str:
    return (s or "").strip().strip('"').strip("'")

def _parse_admins() -> tuple[int, ...]:
    ids: set[int] = set()
    one = _clean(os.getenv("ADMIN_ID"))
    many = _clean(os.getenv("ADMIN_IDS"))
    if one.isdigit():
        ids.add(int(one))
    if many:
        for part in many.split(","):
            p = _clean(part)
            if p.isdigit():
                ids.add(int(p))
    return tuple(sorted(ids))

# bot/config.py

# ... (–≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å @dataclass, Course, COURSES –∏ —Ç.–¥.) ...

@dataclass
class Settings:
    bot_token: str
    admin_ids: tuple[int, ...]
    db_path: str
    lessons_path: Path
    assets_path: Path
    timezone: str
    payment_link: str
    # <<< –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—Ä–æ–∫–æ–≤ >>>
    course_general_path: Path
    by_code_path: Path

def get_settings() -> Settings:
    token = _clean(os.getenv("BOT_TOKEN"))
    if not token:
        raise RuntimeError("BOT_TOKEN is required in .env")
    db_path = _clean(os.getenv("DB_PATH") or "./data/bot.db")
    lessons = Path(_clean(os.getenv("LESSONS_PATH") or "./LESSONS_root")).resolve()
    assets = Path(_clean(os.getenv("ASSETS_PATH") or "./assets")).resolve()
    tz = _clean(os.getenv("TIMEZONE") or "Asia/Aqtobe")
    link = _clean(os.getenv("PAYMENT_LINK") or "")
    admin_ids = _parse_admins()

    # <<< –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–æ–¥–ø–∞–ø–∫–∞–º —Å —É—Ä–æ–∫–∞–º–∏ >>>
    course_general = lessons / "course_general"
    by_code = lessons / "by_code"

    if not lessons.exists():
        print(f"[WARN] LESSONS_PATH={lessons} does not exist. Using demo './LESSONS_root'.")
        lessons = Path("./LESSONS_root").resolve()

    return Settings(
        bot_token=token,
        admin_ids=admin_ids,
        db_path=db_path,
        lessons_path=lessons,
        assets_path=assets,
        timezone=tz,
        payment_link=link,
        # <<< –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ >>>
        course_general_path=course_general,
        by_code_path=by_code,
    )


def tzinfo() -> ZoneInfo:
    return ZoneInfo(get_settings().timezone)

def now_utc_str() -> str:
    return datetime.datetime.now(datetime.timezone.utc).replace(microsecond=0).isoformat().replace("+00:00", "Z")

def local_dt_str(utc_iso: str, tz: str) -> str:
    """Format UTC ISO to local time string"""
    try:
        dt = datetime.datetime.fromisoformat(utc_iso.replace("Z", "+00:00")).astimezone(ZoneInfo(tz))
        return dt.strftime("%d %B %Y, %H:%M")
    except Exception:
        return utc_iso

def _pluralize(number, one, few, many):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ –¥–ª—è —á–∏—Å–ª–∞."""
    num = number % 100
    if 11 <= num <= 19:
        return many
    num = number % 10
    if num == 1:
        return one
    if 2 <= num <= 4:
        return few
    return many

def format_deadline_text(utc_iso: str | None, tz: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if not utc_iso:
        return "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    try:
        now = datetime.datetime.now(datetime.timezone.utc)
        deadline_dt = datetime.datetime.fromisoformat(utc_iso.replace("Z", "+00:00"))
        local_deadline = deadline_dt.astimezone(ZoneInfo(tz))
        date_str = local_deadline.strftime("%d %B")
        time_left = deadline_dt - now

        if time_left.total_seconds() <= 0:
            return f"–¥–æ {date_str} (–¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª)"

        days = time_left.days
        if days > 0:
            days_str = _pluralize(days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
            return f"–¥–æ {date_str} (–æ—Å—Ç–∞–ª–æ—Å—å {days} {days_str})"

        hours = int(time_left.total_seconds() / 3600)
        if hours > 0:
            hours_str = _pluralize(hours, "—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤")
            return f"–¥–æ {date_str} (–æ—Å—Ç–∞–ª–æ—Å—å {hours} {hours_str})"

        return f"–¥–æ {date_str} (–æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–∞—Å–∞)"
    except Exception:
        return utc_iso

================================================================================
FILE: bot\main.py
================================================================================
# bot/main.py
import asyncio
import logging
from contextlib import suppress
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from bot.config import get_settings
from bot.middlewares.block_until_done import BlockUntilDoneMiddleware
from bot.routers.onboarding import router as onboarding_router
from bot.routers.student import router as student_router
from bot.routers.lesson_flow import router as lesson_flow_router
from bot.routers.admin import router as admin_router
from bot.routers.admin_reply import router as admin_reply_router
from bot.services.reminder_worker import reminder_loop
from bot.services.db import DB_PATH
import logging
from bot.routers.fallback import router as fallback_router
from bot.routers.debug import router as debug_router
from aiogram import Dispatcher
from bot.routers.tests.entry import router as tests_entry_router
from bot.routers.tests.engine import router as tests_engine_router
from bot.routers.tests.deeplink import router as deeplink_router
from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode

settings = get_settings()
logging.warning("ADMINS -> %s", settings.admin_ids)

logging.basicConfig(
    level=logging.INFO,  # –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)

# —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
logger = logging.getLogger("maestro")
logger.setLevel(logging.INFO)

async def on_startup(bot: Bot) -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –∫–∞–∫ task_of(bot)
    bot.reminder_task = asyncio.create_task(reminder_loop(bot), name="reminder_loop")
    logging.warning("Reminder loop started")

async def on_shutdown(bot: Bot) -> None:
    # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    if (task := getattr(bot, "reminder_task", None)):
        task.cancel()
        with suppress(asyncio.CancelledError):
            await task
    logging.warning("Reminder loop stopped")


async def main() -> None:
    logging.basicConfig(level=logging.INFO)
    settings = get_settings()
    logging.warning("DB in use -> %s", DB_PATH)

    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –†–æ—É—Ç–µ—Ä—ã
    dp.include_router(onboarding_router)
    dp.include_router(tests_entry_router)
    dp.include_router(tests_engine_router)
    dp.include_router(lesson_flow_router)
    dp.include_router(admin_router)
    dp.include_router(admin_reply_router)
    dp.include_router(student_router)

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: fallback –ª–æ–≤–∏—Ç "–ø–æ–Ω—è—Ç–Ω—ã–µ" –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ –¥—Ä—É–≥–∏—Ö
    dp.include_router(fallback_router)

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: debug –ª–æ–≤–∏—Ç –í–û–û–ë–©–ï –í–°–Å –û–°–¢–ê–õ–¨–ù–û–ï. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º.
    dp.include_router(debug_router)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –≤–∏—Å—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã –¥–æ —Å—Ç–∞—Ä—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)

    try:
        # –†–æ–≤–Ω–æ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())

================================================================================
FILE: bot\keyboards\admin.py
================================================================================
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def _b(n: int) -> str:
    return f" ({n})" if n else ""

def admin_main_reply_kb(queue: int = 0, pay_pending: int = 0, onb_pending: int = 0, students_total: int = 0) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text=f"üóÇ –û—á–µ—Ä–µ–¥—å{_b(queue)}")],
            [KeyboardButton(text=f"üë• –£—á–µ–Ω–∏–∫–∏{_b(students_total)}")],  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ —Å—á—ë—Ç—á–∏–∫ –∑–¥–µ—Å—å
            [KeyboardButton(text="üí≥ –ü–ª–∞—Ç–µ–∂–∏")],
            [KeyboardButton(text=f"üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É{_b(pay_pending)}")],
            [KeyboardButton(text=f"üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è){_b(onb_pending)}")],
            [KeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ê–¥–º–∏–Ω-–º–µ–Ω—é",
        selective=True,
    )


================================================================================
FILE: bot\keyboards\student.py
================================================================================
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup,InlineKeyboardMarkup



def student_main_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    # <<< –ù–û–í–û–ï –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ >>>
    kb.button(text="üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è")
    kb.button(text="üéµ –£—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É")
    kb.button(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
    kb.button(text="üÜò –ü–æ–º–æ—â—å")
    kb.button(text="‚ÑπÔ∏è –û –∫—É—Ä—Å–µ")
    kb.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å") # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—É—Ä—Å–æ–≤
    kb.adjust(2, 2, 2) # –ù–æ–≤–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞
    return kb.as_markup(resize_keyboard=True)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º course_code_to_pay >>>
def payment_inline(payment_link: str, course_code_to_pay: str, include_i_paid: bool = True, student_id: int | None = None) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    if payment_link:
        ib.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_link)
    if include_i_paid and student_id is not None:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—à–∏–≤–∞–µ–º –∫–æ–¥ –∫—É—Ä—Å–∞ –≤ callback_data >>>
        ib.button(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_ipaid:{course_code_to_pay}:{student_id}")
    ib.adjust(1)
    return ib.as_markup()

def next_t_inline(progress_id: int, has_next: bool):
    kb = InlineKeyboardBuilder()
    if has_next:
        kb.button(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª", callback_data=f"next_t:{progress_id}")
    else:
        kb.button(text="‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", callback_data=f"submit_start:{progress_id}")
    kb.adjust(1)
    return kb.as_markup()




================================================================================
FILE: bot\middlewares\block_until_done.py
================================================================================
# bot/middlewares/block_until_done.py
from aiogram.types import Message
from aiogram.dispatcher.middlewares.base import BaseMiddleware  # aiogram v3
from typing import Callable, Dict, Any, Awaitable
from bot.services.db import get_db
from aiogram.fsm.context import FSMContext


# –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
ALLOWED_TEXTS = {
    "üÜò –ü–æ–º–æ—â—å", "SOS", "–°–û–°",
    "üèÖ –ú–æ–π —Ä–∞–Ω–≥", "ü•á –ú–æ–π —Ä–∞–Ω–≥", "–ú–æ–π —Ä–∞–Ω–≥",
    "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ", "–û –∫—É—Ä—Å–µ",
    "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "–û–ø–ª–∞—Ç–∏—Ç—å",
    "‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", "–°–¥–∞—Ç—å —É—Ä–æ–∫",
    "üìö –ù–æ–≤—ã–π —É—Ä–æ–∫",
}

class BlockUntilDoneMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        msg: Message = event

        # 0) –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–¥–∞—á–∏ (FSM SubmitForm.waiting_work) ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        state: FSMContext | None = data.get("state")
        if state is not None:
            try:
                cur_state = await state.get_state()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –∫–ª–∞—Å—Å SubmitForm (–±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
                if cur_state and cur_state.endswith("SubmitForm:waiting_work"):
                    return await handler(event, data)
            except Exception:
                pass

        state: FSMContext | None = data.get("state")
        if state:
            cur = await state.get_state()
            if cur:
                return await handler(event, data)

        # 1) –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if msg.text and msg.text.startswith(("/", ".")):
            return await handler(event, data)

        # 2) –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if msg.text and msg.text.strip() in ALLOWED_TEXTS:
            return await handler(event, data)

        # 3) –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —É—Ä–æ–∫ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ
        async with get_db() as db:
            cur = await db.execute(
                """
                SELECT p.id, p.task_code
                FROM progress p
                JOIN students s ON s.id = p.student_id
                WHERE s.tg_id=? AND p.status IN ('sent','returned')
                ORDER BY p.id DESC
                LIMIT 1
                """,
                (msg.from_user.id,),
            )
            prow = await cur.fetchone()

        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not prow:
            return await handler(event, data)

        # –ê–∫—Ç–∏–≤–Ω—ã–π –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω (–Ω–µ DONE) ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
        if (prow["task_code"] or "") != "DONE":
            await msg.answer(
                "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è, –Ω–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫¬ª. "
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –∂–º–∏ ¬´üÜò –ü–æ–º–æ—â—å¬ª."
            )
            return

        # –£—Ä–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ DONE (–∑–∞–≤–µ—Ä—à—ë–Ω) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
        return await handler(event, data)


================================================================================
FILE: bot\routers\admin.py
================================================================================
from __future__ import annotations

import random
import asyncio
import re
from typing import List

from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config import get_settings, now_utc_str, local_dt_str
from bot.keyboards.admin import admin_main_reply_kb
from bot.services import points
from bot.services.db import get_db
from bot.services.ranks import get_rank_by_points

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.keyboards.student import student_main_kb
from bot.services.db import get_db, DB_PATH
from aiogram import Router, types, F
from aiogram.filters import StateFilter, Command


class BroadcastForm(StatesGroup):
    waiting_text = State()


router = Router(name="admin")


_admins = set(get_settings().admin_ids or [])
router.message.filter(F.from_user.id.in_(_admins), StateFilter("*"))
router.callback_query.filter(F.from_user.id.in_(_admins), StateFilter("*"))


# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º–µ–Ω–Ω–æ)
@router.message(Command("ping"))
async def admin_ping(m: types.Message):
    await m.answer("admin ok")

# –ü—Ä–∏–º–µ—Ä –ª–æ–≤–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ —ç–º–æ–¥–∑–∏/–ø—Ä–µ—Ñ–∏–∫—Å—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.message(F.text.func(lambda t: t and t.startswith("üìä")))
async def admin_stats(m: types.Message):
    await m.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–∫")  # —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞

MOTIVATION_TEXTS = [
    "–ö—Ä–∞—Å–∞–≤—á–∏–∫! –î–µ—Ä–∂–∏–º —Ç–µ–º–ø üí™",
    "–° –∫–∞–∂–¥—ã–º —É—Ä–æ–∫–æ–º —Ç—ã —Å–∏–ª—å–Ω–µ–µ üé∏",
    "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –µ–¥–µ–º –¥–∞–ª—å—à–µ! üöÄ",
]

# ----------------- –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã -----------------

def render_broadcast(tpl: str, srow) -> str:
    first = (srow["first_name"] or "").strip()
    last = (srow["last_name"] or "").strip()
    username = (srow["username"] or "").strip()
    name = first or (username and f"@{username}") or "–¥—Ä—É–≥"

    vars = {
        "id": srow["id"],
        "tg_id": srow["tg_id"],
        "username": username,
        "first_name": first,
        "last_name": last,
        "name": name,
    }
    def repl(m: re.Match):
        key = m.group(1)
        return str(vars.get(key, ""))
    # –∑–∞–º–µ–Ω—è–µ–º {key} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è; –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ ‚Üí –ø—É—Å—Ç–æ
    return re.sub(r"\{(\w+)\}", repl, tpl)

def _is_admin(uid: int) -> bool:
    return uid in get_settings().admin_ids

async def _send_chunked(bot: Bot, chat_id: int, lines: List[str], limit: int = 4000):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚â§ limit (TG ~4096)."""
    if not lines:
        return
    chunk, total = [], 0
    for line in lines:
        add = len(line) + 1
        if total + add > limit:
            await bot.send_message(chat_id, "\n".join(chunk))
            chunk, total = [line], add
        else:
            chunk.append(line); total += add
    if chunk:
        await bot.send_message(chat_id, "\n".join(chunk))

# –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –±–µ–π–¥–∂–µ–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
async def _admin_counts():
    """
    queue=submitted —Ä–∞–±–æ—Ç, pay_pending=–æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç,
    onb_pending=–∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, students_total=–≤—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
    """
    async with get_db() as db:
        # –æ—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='submitted'")
        queue = (await cur.fetchone())["c"]

        # –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É (pending)
        cur = await db.execute("SELECT COUNT(*) AS c FROM payment_requests WHERE status='pending'")
        pay_pending = (await cur.fetchone())["c"]

        # –∞–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM students WHERE onboarding_done=1 AND COALESCE(approved,0)=0"
        )
        onb_pending = (await cur.fetchone())["c"]

        # –≤—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
        cur = await db.execute("SELECT COUNT(*) AS c FROM students")
        students_total = (await cur.fetchone())["c"]

    return queue, pay_pending, onb_pending, students_total


# ----------------- –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞ -----------------
@router.message(Command("admin"))
async def admin_mode_on(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    queue, pay_pending, onb_pending, students_total = await _admin_counts()
    await m.answer(
        "üîß –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω.",
        reply_markup=admin_main_reply_kb(queue, pay_pending, onb_pending, students_total),
    )

@router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")
async def admin_mode_off(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await m.answer("–ì–æ—Ç–æ–≤–æ. –ö–ª–∞–≤–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=ReplyKeyboardRemove())

# ----------------- ReplyKeyboard: –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å -----------------
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def msg_adm_stats(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("SELECT COUNT(*) AS c FROM students"); students = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status IN ('sent','returned','submitted')"); active = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='submitted'"); queued = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='approved' AND approved_at >= datetime('now','-7 day') || 'Z'"); approved7 = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COALESCE(SUM(amount),0) AS s FROM payments WHERE paid_at >= datetime('now','-30 day') || 'Z'"); sum30 = (await cur.fetchone())["s"]
    txt = ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
           f"‚Äî –£—á–µ–Ω–∏–∫–∏: {students}\n"
           f"‚Äî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active}\n"
           f"‚Äî –í –æ—á–µ—Ä–µ–¥–∏ (submitted): {queued}\n"
           f"‚Äî –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞ 7–¥: {approved7}\n"
           f"‚Äî –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ 30–¥: {sum30} ‚Ç∏")
    await m.answer(txt)

@router.message(F.text.startswith("üóÇ –û—á–µ—Ä–µ–¥—å"))
async def msg_adm_queue(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("""
            SELECT p.id, p.lesson_code, p.task_code, p.submitted_at, s.tg_id, s.username
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.status='submitted' ORDER BY p.submitted_at DESC
        """)
        rows = await cur.fetchall()
    if not rows:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è.")
        return
    await m.answer("–û—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç (submitted):")
    for r in rows:
        card = (f"PID: {r['id']}\n"
                f"–£—á–µ–Ω–∏–∫: @{r['username'] or 'no_username'} (id {r['tg_id']})\n"
                f"–£—Ä–æ–∫/—Ä–∞–∑–¥–µ–ª: {r['lesson_code']}/{r['task_code']}\n"
                f"–°–¥–∞–Ω–æ: {r['submitted_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"p_ok:{r['id']}")
        ik.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å", callback_data=f"p_back:{r['id']}")
        ik.adjust(2)
        await m.bot.send_message(m.chat.id, card, reply_markup=ik.as_markup())

@router.message(F.text.startswith("üë• –£—á–µ–Ω–∏–∫–∏"))
async def msg_adm_students(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name, onboarding_done, created_at
            FROM students ORDER BY id DESC LIMIT 30
        """)
        rows = await cur.fetchall()
    if not rows:
        await m.answer("–£—á–µ–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await m.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–µ–Ω–∏–∫–∏:")
    for r in rows:
        card = (f"id:{r['id']} ‚Ä¢ tg_id:{r['tg_id']} @{r['username'] or '‚Äî'}\n"
                f"{r['first_name'] or ''} {r['last_name'] or ''} ‚Ä¢ onb:{r['onboarding_done']} ‚Ä¢ {r['created_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚ÑπÔ∏è –ê–Ω–∫–µ—Ç–∞", callback_data=f"stu_info:{r['id']}")
        ik.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"stu_del:{r['id']}")
        ik.adjust(2)
        await m.bot.send_message(m.chat.id, card, reply_markup=ik.as_markup())

@router.message(F.text == "üí≥ –ü–ª–∞—Ç–µ–∂–∏")
async def msg_adm_payments(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_payments(m.bot, m.chat.id)

@router.message(F.text.startswith("üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"))
async def msg_adm_pay_pending(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_pay_requests(m.bot, m.chat.id)

@router.message(F.text.startswith("üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è)"))
async def msg_adm_onb_pending(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_onboarding_pending(m.bot, m.chat.id)

# ----------------- callbacks: –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é -----------------
@router.callback_query(F.data == "adm_payments")
async def cb_adm_payments(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üí≥ –ü–ª–∞—Ç–µ–∂–∏:")
    await _show_payments(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data == "adm_pay_pending")
async def cb_adm_pay_pending(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:")
    await _show_pay_requests(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data == "adm_onb_pending")
async def cb_adm_onb_pending(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è):")
    await _show_onboarding_pending(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data.startswith("stu_info:"))
async def stu_info(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    async with get_db() as db:
        cur = await db.execute("SELECT * FROM students WHERE id=?", (sid,))
        s = await cur.fetchone()
    if not s:
        await cb.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ"); return
    card = (
        "üë§ –ê–Ω–∫–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞\n"
        f"–ò–º—è: {s['first_name'] or ''} {s['last_name'] or ''}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {s['age'] or '‚Äî'} (—Ä–æ–∂–¥.: {s['birth_date'] or '‚Äî'})\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {s['phone'] or '‚Äî'}\n"
        f"–ì–∏—Ç–∞—Ä–∞: {'–µ—Å—Ç—å' if (s['has_guitar'] or 0) else '–Ω–µ—Ç'}\n"
        f"–û–ø—ã—Ç: {s['experience_months'] or 0} –º–µ—Å\n"
        f"–¶–µ–ª—å: {s['goal'] or '‚Äî'}\n"
        f"@{s['username'] or '‚Äî'} ‚Ä¢ tg_id: {s['tg_id']}\n"
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {s['created_at'] or '‚Äî'}"
    )
    await cb.message.edit_text(card)
    await cb.answer()

@router.callback_query(F.data.startswith("stu_del:"))
async def stu_del(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    ik = InlineKeyboardBuilder()
    ik.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"stu_del_go:{sid}")
    ik.button(text="–û—Ç–º–µ–Ω–∞", callback_data="adm_students")
    await cb.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ id:{sid}? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–ª–∞—Ç–µ–∂–∏.",
        reply_markup=ik.as_markup(),
    )
    await cb.answer()

@router.callback_query(F.data.startswith("stu_del_go:"))
async def stu_del_go(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    async with get_db() as db:
        await db.execute("DELETE FROM students WHERE id=?", (sid,))
        await db.commit()
    await cb.message.edit_text("–£–¥–∞–ª–µ–Ω–æ.")
    await cb.answer()

# ----- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç -----
@router.callback_query(F.data.startswith("p_ok:"))
async def p_ok(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])

    # ‚Üì‚Üì‚Üì –ù–ê–®–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1 ‚Üì‚Üì‚Üì
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    async with get_db() as db:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        cur = await db.execute("SELECT status, task_code FROM progress WHERE id=?", (pid,))
        prow = await cur.fetchone()
        if not prow:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–µ—Ä–Ω–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
            await cb.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # ... (–≤—Å—è –≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞)
        status = (prow["status"] or "")
        if status == "approved":
            await cb.message.edit_text(f"{original_text}\n\n‚úÖ –£–∂–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ.")
            await cb.answer("–£–∂–µ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ")
            return
        if status != "submitted":
            await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
            await cb.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
            return

        # –∞–ø—Ä—É–≤
        now = now_utc_str()
        await db.execute(
            "UPDATE progress SET status='approved', approved_at=?, updated_at=? WHERE id=?",
            (now, now, pid),
        )

        # —Å—Ç—É–¥–µ–Ω—Ç
        cur = await db.execute("""
            SELECT s.id AS sid, s.tg_id AS tg_id
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.id = ?
        """, (pid,))
        row = await cur.fetchone()
        if not row:
            await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        sid, tg_id = row["sid"], row["tg_id"]

        # +100 –±–∞–ª–ª–æ–≤ –∑–∞ —É—Ä–æ–∫ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
        try:
            await points.add(sid, f"lesson_approved:{pid}", 100)
        except Exception:
            pass

        # —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved'", (sid,))
        appr = (await cur.fetchone())["c"]

        bonus = None
        if appr == 8:
            bonus = ("module1_bonus:s{sid}", 500, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–¢—ã –∑–∞–∫—Ä—ã–ª 1-–π –º–æ–¥—É–ª—å ‚Äî 8 —É—Ä–æ–∫–æ–≤ üí™\n\nüéØ –ë–æ–Ω—É—Å: +500 –±–∞–ª–ª–æ–≤")
        elif appr == 16:
            bonus = ("module2_bonus:s{sid}", 500, "üèÜ –§–∏–Ω–∞–ª!\n–¢—ã –ø—Ä–æ—à—ë–ª 16 —É—Ä–æ–∫–æ–≤.\n\nüéØ –ë–æ–Ω—É—Å: +500 –±–∞–ª–ª–æ–≤\n–ë–µ–π–¥–∂: ¬´–í—ã–ø—É—Å–∫–Ω–∏–∫ Maestro¬ª üèÖ")
        if bonus:
            try:
                await points.add(sid, bonus[0], bonus[1])
            except Exception:
                pass

        await db.commit()

    # –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞–Ω–≥–∞
    total = await points.total(sid)
    async with get_db() as db:
        cur = await db.execute("SELECT rank FROM students WHERE id=?", (sid,))
        prev_rank = (await cur.fetchone())["rank"] or ""
    rank_name, next_thr = get_rank_by_points(total)

    now = now_utc_str()
    async with get_db() as db:
        if rank_name != prev_rank:
            await db.execute("UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
                             (rank_name, total, now, sid))
        else:
            await db.execute("UPDATE students SET rank_points=?, updated_at=? WHERE id=?",
                             (total, now, sid))
        await db.commit()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
    rank_up_text = (f"üèÖ –ù–æ–≤—ã–π —Ä–∞–Ω–≥: <b>{rank_name}</b>!\n–¢–≤–æ–∏ –±–∞–ª–ª—ã: <b>{total}</b>"
                    f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞: <b>{next_thr - total}</b>") if (rank_name != prev_rank and next_thr is not None) else None
    accept_text = "‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! +100 –±–∞–ª–ª–æ–≤ üéØ"
    if appr == 8 or appr == 16:
        accept_text += f"\n\n{bonus[2]}"
    accept_text += f"\n–¢–≤–æ–π —Å—á—ë—Ç: <b>{total}</b> –±–∞–ª–ª–æ–≤"
    final_text = f"{rank_up_text}\n\n{accept_text}" if rank_up_text else accept_text

    # ...
    try:  # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ try
        await cb.message.bot.send_message(tg_id, final_text)

        kb = InlineKeyboardBuilder()
        kb.button(text="üìö –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"stu:take_next:{sid}")
        kb.adjust(1)
        await cb.message.bot.send_message(tg_id, random.choice(MOTIVATION_TEXTS), reply_markup=kb.as_markup())

        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –£—á–µ–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        await cb.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ")

    except Exception as e:  # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É
        # –ï—Å–ª–∏ —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –∞–¥–º–∏–Ω—É
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É {tg_id}: {e}")
        await cb.message.edit_text(
            f"{original_text}\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. (–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
        await cb.answer("–ü—Ä–∏–Ω—è—Ç–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å", show_alert=True)


# –§–∞–π–ª: Bot/routers/admin.py

@router.callback_query(F.data.startswith("p_back:"))
async def p_back(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É...")

    async with get_db() as db:
        cur = await db.execute("SELECT status FROM progress WHERE id=?", (pid,))
        prow = await cur.fetchone()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    if not prow:
        await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
        await cb.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if prow["status"] == "returned":
        await cb.message.edit_text(f"{original_text}\n\n‚ö†Ô∏è –£–∂–µ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.")
        await cb.answer("–£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É ‚ö†Ô∏è")
        return
    if prow["status"] == "approved":
        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –†–∞–±–æ—Ç–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞.")
        await cb.answer("–†–∞–±–æ—Ç–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", show_alert=True)
        return
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à–Ω–µ–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–ª—è–µ–º
    if prow["status"] not in ("submitted", "returned"):
        await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
        await cb.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
        return

    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    async with get_db() as db:
        await db.execute("UPDATE progress SET status='returned', returned_at=?, updated_at=? WHERE id=?",
                         (now_utc_str(), now_utc_str(), pid))
        cur = await db.execute("""
            SELECT s.tg_id AS tg_id
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.id = ?
        """, (pid,))
        row = await cur.fetchone()
        await db.commit()

    if row and row["tg_id"]:
        await cb.message.bot.send_message(row["tg_id"], "‚Ü©Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ò—Å–ø—Ä–∞–≤—å –∏ —Å–¥–∞–≤–∞–π —Å–Ω–æ–≤–∞ üí™")

    # 4. –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    await cb.message.edit_text(f"{original_text}\n\n‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ. –£—á–µ–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await cb.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
# ----- –ø–ª–∞—Ç–µ–∂–∏ -----
async def _show_payments(bot: Bot, chat_id: int):
    settings = get_settings(); tz = settings.timezone
    async with get_db() as db:
        cur = await db.execute("""
            SELECT p.id, s.username, s.tg_id, p.amount, p.method, p.note, p.paid_at
            FROM payments p JOIN students s ON s.id = p.student_id
            ORDER BY COALESCE(p.paid_at,'') DESC, p.id DESC
            LIMIT 20
        """); pays = await cur.fetchall()
        cur = await db.execute("""
            SELECT pr.id, pr.amount, pr.created_at, s.username, s.tg_id
            FROM payment_requests pr JOIN students s ON s.id = pr.student_id
            WHERE pr.status='pending'
            ORDER BY pr.created_at DESC
        """); reqs = await cur.fetchall()
        cur = await db.execute("""
            SELECT COALESCE(SUM(amount),0) AS s
            FROM payments
            WHERE paid_at >= datetime('now','-30 day') || 'Z'
        """); sum30 = (await cur.fetchone())["s"]

    await bot.send_message(chat_id, f"üí≥ –ü–ª–∞—Ç–µ–∂–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)\n–ò—Ç–æ–≥–æ –∑–∞ 30 –¥–Ω–µ–π: {sum30} ‚Ç∏")

    if pays:
        lines = []
        for p in pays:
            paid = local_dt_str(p["paid_at"], tz) if p["paid_at"] else "‚Äî"
            user = p["username"] or "no_username"
            method = p["method"] or "manual"
            note = (f" ‚Ä¢ {p['note']}" if (p["note"] or "").strip() else "")
            lines.append(f"{paid} ‚Ä¢ @{user} ({p['tg_id']}) ‚Äî {p['amount']} ‚Ç∏ [{method}]{note}")
        await _send_chunked(bot, chat_id, lines)
    else:
        await bot.send_message(chat_id, "–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    if reqs:
        await bot.send_message(chat_id, "–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        for r in reqs:
            ik = InlineKeyboardBuilder()
            ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{r['tg_id']}")
            ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"adm_pay_no:{r['tg_id']}")
            ik.adjust(2)
            created = local_dt_str(r["created_at"], tz) if r["created_at"] else "‚Äî"
            await bot.send_message(
                chat_id,
                f"@{r['username'] or 'no_username'} ({r['tg_id']}) ‚Äî {r['amount']} ‚Ç∏, {created}",
                reply_markup=ik.as_markup(),
            )
    else:
        await bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")

async def _show_pay_requests(bot: Bot, chat_id: int):
    async with get_db() as db:
        cur = await db.execute("""
            SELECT pr.id, pr.amount, pr.created_at, s.username, s.tg_id
            FROM payment_requests pr JOIN students s ON s.id = pr.student_id
            WHERE pr.status='pending' ORDER BY pr.created_at ASC
        """); reqs = await cur.fetchall()
    if not reqs:
        await bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        return
    await bot.send_message(chat_id, "–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
    for r in reqs:
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{r['tg_id']}")
        ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"adm_pay_no:{r['tg_id']}")
        ik.adjust(2)
        await bot.send_message(chat_id,
            f"@{r['username'] or 'no_username'} ({r['tg_id']}) ‚Äî {r['amount']} ‚Ç∏, {r['created_at']}",
            reply_markup=ik.as_markup())

async def _show_onboarding_pending(bot: Bot, chat_id: int):
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name, created_at
            FROM students
            WHERE onboarding_done = 1 AND COALESCE(approved, 0) = 0
            ORDER BY created_at ASC
        """); rows = await cur.fetchall()
    if not rows:
        await bot.send_message(chat_id, "–ù–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return
    await bot.send_message(chat_id, "–ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:")
    for r in rows:
        card = (f"id:{r['id']} ‚Ä¢ tg_id:{r['tg_id']} @{r['username'] or '‚Äî'}\n"
                f"{r['first_name'] or ''} {r['last_name'] or ''} ‚Ä¢ {r['created_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"onb_ok:{r['id']}")
        ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"onb_rej:{r['id']}")
        ik.adjust(2)
        await bot.send_message(chat_id, card, reply_markup=ik.as_markup())

# ----- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã -----
@router.callback_query(F.data.startswith("adm_pay_ok:"))
async def adm_pay_ok(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    tg_id = int(cb.data.split(":")[1])
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ–ø–ª–∞—Ç—É...")

    settings = get_settings()

    # –Ω–∞–π–¥—ë–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        srow = await cur.fetchone()
    if not srow:
        await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
    sid = srow["id"]

    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –∞–Ω—Ç–∏–¥—É–±–ª—å
    async with get_db() as db:
        cur = await db.execute("SELECT COUNT(*) AS c FROM payments WHERE student_id=? AND COALESCE(paid_at,'')<>''", (sid,))
        paid_cnt = (await cur.fetchone())["c"]
    if paid_cnt > 0:
        await cb.answer("—Ç—ã –∂–µ –æ–ø–ª–∞—Ç–∏–ª —É–∂–µ, –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –∫—É—Ä—Å—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∞–º—è—Ç–∏) ‚úÖ", show_alert=True); return

    # –±–µ—Ä—ë–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é pending-–∑–∞—è–≤–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å), —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ—ë –∏ —Å—É–º–º—É
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, amount FROM payment_requests WHERE student_id=? AND status='pending' ORDER BY id ASC LIMIT 1",
            (sid,),
        )
        pr = await cur.fetchone()
        amount = pr["amount"] if pr else settings.payment_price
        if pr:
            await db.execute("UPDATE payment_requests SET status='confirmed', resolved_at=? WHERE id=?",
                             (now_utc_str(), pr["id"]))

        # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ
        now = now_utc_str()
        await db.execute(
            "INSERT INTO payments(student_id, amount, method, note, paid_at, created_at) VALUES(?,?,?,?,?,?)",
            (sid, amount, "manual", "confirmed by admin", now, now),
        )
        await db.commit()
        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    try:
        await cb.message.bot.send_message(tg_id,
                                          "‚úÖ –£–≥–æ–≤–æ—Ä–∏–ª, –∑–∞—Ö–æ–¥–∏, –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –∫—Å—Ç–∞—Ç–∏ :) –ñ–º–∏ ¬´üìö –ù–æ–≤—ã–π —É—Ä–æ–∫¬ª.")
    except Exception:
        pass
    await cb.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

@router.callback_query(F.data.startswith("adm_pay_no:"))
async def adm_pay_no(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    tg_id = int(cb.data.split(":")[1])

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û—Ç–∫–ª–æ–Ω—è—é –∑–∞—è–≤–∫—É...")

    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
    if not row:
        await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
    sid = row["id"]

    async with get_db() as db:
        cur = await db.execute(
            "SELECT id FROM payment_requests WHERE student_id=? AND status='pending' ORDER BY id ASC LIMIT 1",
            (sid,),
        )
        p = await cur.fetchone()
        if p:
            await db.execute("UPDATE payment_requests SET status='rejected', resolved_at=? WHERE id=?",
                             (now_utc_str(), p["id"]))
            await db.commit()
            await cb.message.edit_text(f"{original_text}\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    try:
        await cb.message.bot.send_message(tg_id, "‚ùóÔ∏è–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–∂–º–∏ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –µ—â—ë —Ä–∞–∑.")
    except Exception:
        pass
    await cb.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

# ----- –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ -----
@router.callback_query(F.data.startswith("onb_ok:"))
async def onb_ok(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return

    sid = int(cb.data.split(":")[1])
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û–¥–æ–±—Ä—è—é –∞–Ω–∫–µ—Ç—É...")

    # 1) –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –∏ –¥–æ—Å—Ç–∞—Ç—å tg_id
    async with get_db() as db:
        await db.execute("UPDATE students SET approved=1, updated_at=? WHERE id=?",
                         (now_utc_str(), sid))
        await db.commit()
        cur = await db.execute("SELECT tg_id, COALESCE(rank,'') AS rank FROM students WHERE id=?", (sid,))
        row = await cur.fetchone()

    if not row:
        await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return

    tg_id = row["tg_id"]
    prev_rank = row["rank"] or ""

    # 2) –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å +50 –∑–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –ø–æ UNIQUE(student_id, source))
    try:
        await points.add(sid, "onboarding_bonus", 50)
    except Exception:
        pass

    # 3) –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å rank/rank_points
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)
    async with get_db() as db:
        if rank_name != prev_rank:
            await db.execute(
                "UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
                (rank_name, total, now_utc_str(), sid),
            )
        else:
            await db.execute(
                "UPDATE students SET rank_points=?, updated_at=? WHERE id=?",
                (total, now_utc_str(), sid),
            )
        await db.commit()

    # 4) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await cb.message.edit_text(f"{original_text}\n\n‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    await cb.answer("–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ", show_alert=True)

    # —Å—Ç—É–¥–µ–Ω—Ç—É ‚Äî —Å—Ç–∞—Ç—É—Å, –±–∞–ª–ª—ã, —Ä–∞–Ω–≥ + –º–µ–Ω—é
    msg = f"‚úÖ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.\n–ù–∞—á–∏—Å–ª–µ–Ω–æ: +50 –±–∞–ª–ª–æ–≤.\n"
    msg += f"üèÖ –¢–≤–æ–π —Ä–∞–Ω–≥: <b>{rank_name}</b> ‚Ä¢ –ë–∞–ª–ª—ã: <b>{total}</b>"
    if next_thr is not None:
        msg += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞: <b>{next_thr - total}</b>"
    await cb.bot.send_message(tg_id, msg)
    await cb.bot.send_message(tg_id, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é üëá", reply_markup=student_main_kb())


@router.callback_query(F.data.startswith("onb_rej:"))
async def onb_rej(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    sid = int(cb.data.split(":")[1])
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û—Ç–∫–ª–æ–Ω—è—é –∞–Ω–∫–µ—Ç—É...")

    async with get_db() as db:
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ¬´–≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ¬ª: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        await db.execute(
            "UPDATE students SET approved=0, onboarding_done=0, updated_at=? WHERE id=?",
            (now_utc_str(), sid),
        )
        await db.commit()
        cur = await db.execute("SELECT tg_id FROM students WHERE id=?", (sid,))
        row = await cur.fetchone()

    await cb.message.edit_text(f"{original_text}\n\n‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await cb.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå", show_alert=True)

    if row and row["tg_id"]:
        # –º–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª ‚Äî –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π onb_go
        ik = InlineKeyboardBuilder()
        ik.button(text="üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", callback_data="onb_go")
        ik.adjust(1)
        await cb.bot.send_message(
            row["tg_id"],
            "‚ùå –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –µ—ë –∑–∞–Ω–æ–≤–æ ‚Äî –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç.",
            reply_markup=ik.as_markup(),
        )
@router.message(F.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞")
async def msg_broadcast_start(m: types.Message, state: FSMContext):
    if not _is_admin(m.from_user.id):
        return
    await state.set_state(BroadcastForm.waiting_text)
    await m.answer(
        "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã: {name}, {first_name}, {last_name}, {username}, {tg_id}.\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–ü—Ä–∏–≤–µ—Ç, {name}! –ó–∞–≤—Ç—Ä–∞ —É—Ä–æ–∫ –≤ 19:00¬ª\n\n"
        "–ù–∞–ø–∏—à–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
    )

@router.message(BroadcastForm.waiting_text, F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def msg_broadcast_cancel(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É.")

@router.message(BroadcastForm.waiting_text)
async def msg_broadcast_run(m: types.Message, state: FSMContext):
    if not _is_admin(m.from_user.id):
        return
    tpl = m.text.strip()
    if not tpl:
        await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return

    # –±–µ—Ä—ë–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name
            FROM students
            WHERE tg_id IS NOT NULL
        """)
        students = await cur.fetchall()

    ok = fail = 0
    await m.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({len(students)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)‚Ä¶")

    for s in students:
        try:
            text = render_broadcast(tpl, s)  # ‚Üê –ü–û–î–°–¢–ê–í–õ–Ø–ï–ú {name}, {first_name} –∏ —Ç.–¥.
            await m.bot.send_message(s["tg_id"], text)
            ok += 1
        except Exception:
            fail += 1
        await asyncio.sleep(0.05)

    await state.clear()
    await m.answer(f"–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}.")

@router.message(Command("db"))
async def db_health(m: types.Message):
    try:
        async with get_db() as db:
            tables = []
            for t in ("students","test_results","points"):
                try:
                    cur = await db.execute(f"SELECT COUNT(*) FROM {t}")
                    n = (await cur.fetchone())[0]
                    tables.append(f"{t}={n}")
                except Exception as e:
                    tables.append(f"{t}=ERR({e})")
        await m.answer(f"DB={DB_PATH}\n" + "\n".join(tables))
    except Exception as e:
        await m.answer(f"DB open failed: {e}")

================================================================================
FILE: bot\routers\admin_reply.py
================================================================================
from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from bot.config import get_settings, now_utc_str
from bot.services.db import get_db

router = Router(name="admin_reply")

from aiogram.exceptions import (
    TelegramAPIError,
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNotFound,
)


class ReplyForm(StatesGroup):
    waiting_text = State()


@router.callback_query(F.data.startswith("adm_reply:"))
async def adm_reply_start(cb: types.CallbackQuery, state: FSMContext):
    # –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≥–∞—Å–∏–º –∫—Ä—É—Ç–∏–ª–∫—É
    try:
        await cb.answer()
    except Exception:
        pass

    # –ø–∞—Ä—Å–∏–º tg_id –∏–∑ callback_data
    try:
        tg_id = int(cb.data.split("adm_reply:", 1)[1])
    except Exception:
        await cb.message.answer("–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏.")
        return

    await state.set_state(ReplyForm.waiting_text)
    await state.update_data(tg_id=tg_id)
    await cb.message.answer(f"–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg_id {tg_id}).")

    # –æ—Ç–º–µ—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ 'answered'
    async with get_db() as db:
        await db.execute(
            """
            UPDATE help_requests
            SET status='answered', answered_at=?
            WHERE student_id = (SELECT id FROM students WHERE tg_id=?)
              AND status='open'
            """,
            (now_utc_str(), tg_id),
        )
        await db.commit()


@router.message(ReplyForm.waiting_text, F.text)
async def adm_reply_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("tg_id")
    if not tg_id:
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."); await state.clear(); return

    try:
        await message.bot.send_message(tg_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
    finally:
        await state.clear()

================================================================================
FILE: bot\routers\debug.py
================================================================================
# bot/routers/debug.py
from __future__ import annotations
import logging, json
from aiogram import Router, types

router = Router(name="debug")

# 1) –õ–æ–≤–∏–º –õ–Æ–ë–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ —Ç–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã
@router.message()
async def debug_unhandled_message(message: types.Message):
    try:
        logging.warning("UNHANDLED MESSAGE: %s", message.model_dump_json())
    except Exception:
        logging.warning("UNHANDLED MESSAGE (fallback): %s", message)

# 2) –õ–æ–≤–∏–º –õ–Æ–ë–´–ï callback_query (–∫–Ω–æ–ø–∫–∏), –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ
@router.callback_query()
async def debug_unhandled_callback(cb: types.CallbackQuery):
    logging.warning("UNHANDLED CALLBACK: data=%r chat=%s from=%s",
                    cb.data, getattr(cb.message, 'chat', None), cb.from_user.id)
    await cb.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∂—É—Ä–Ω–∞–ª.", show_alert=False)

# 3) –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–∑ –ª—é–±—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ)
try:
    from aiogram.types.error_event import ErrorEvent

    @router.errors()
    async def debug_errors(event: ErrorEvent):
        logging.exception("HANDLER ERROR on update=%s", event.update, exc_info=event.exception)
        # –ú—è–≥–∫–æ —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, callback –±–µ–∑ message
        msg = getattr(event.update, "message", None)
        if isinstance(msg, types.Message):
            await msg.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –£–∂–µ —á–∏–Ω–∏–º üîß")
        # –≤–µ—Ä–Ω—É—Ç—å True/None ‚Äî —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ —Å—á–∏—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π
        return True
except Exception:
    # –ï—Å–ª–∏ –≤ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ aiogram –Ω–µ—Ç ErrorEvent ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç –±–ª–æ–∫.
    pass


================================================================================
FILE: bot\routers\fallback.py
================================================================================
# bot/routers/fallback.py
import random
from aiogram import Router, types, F
from aiogram.filters import StateFilter
from bot.keyboards.student import student_main_kb

router = Router(name="fallback")

_fun_replies = [
    "–≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ —Å–∏–ª—å–Ω–æ... –Ω–æ –¥–∞–≤–∞–π –ø–æ –¥–µ–ª—É üòÖ",
    "–Ø –º—É–∑—ã–∫–∞–Ω—Ç - –µ–Ω–æ—Ç, –∞ –Ω–µ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç üôÉ",
    "–°–Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫ —Å–¥–∞–π, –ø–æ—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º üé∏",
    "–ï—Å–ª–∏ —ç—Ç–æ –∞–∫–∫–æ—Ä–¥ ‚Äî —è –µ–≥–æ –Ω–µ –∑–Ω–∞—é üòÇ",
    "–ù—É —Ç—ã –ø–æ–Ω—è–ª... –∂–º–∏ –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ —Å—é–¥–∞ –ø–∏—à–∏ üëá",
    "–ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ —É—Ä–æ–Ω–∏–ª –º–µ–¥–∏–∞—Ç–æ—Ä, –ø–æ–¥–æ–∂–¥–∏, —è –µ–≥–æ –Ω–∞–π–¥—É...",
    "–Ø –∂–µ –±–æ—Ç, –∞ –Ω–µ —Ç–≤–æ—è –±–∞–±—É—à–∫–∞ ü§®",
]

# --- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ù–ï–ü–û–ù–Ø–¢–ù–û–ì–û –¢–ï–ö–°–¢–ê ---
@router.message(StateFilter(None), F.text, ~F.text.startswith("/"))
async def unified_fallback_text(m: types.Message):
    # –û—Ç–≤–µ—á–∞–µ–º —à—É—Ç–∫–æ–π —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 35%
    if random.random() < 0.35:
        await m.answer(random.choice(_fun_replies))
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
        await m.answer("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=student_main_kb())

# --- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ù–ï–ê–ö–¢–ò–í–ù–´–• –ö–ù–û–ü–û–ö ---
@router.callback_query(StateFilter(None))
async def fallback_cb_unified(cb: types.CallbackQuery):
    # –ú—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ª–æ–≤–∏—Ç—å –í–°–ï –∫–æ–ª–±—ç–∫–∏ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
    # —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ "—Ä–∞–±–æ—á–∏–µ" –∫–æ–ª–±—ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–∞—Ö,
    # –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç —Ä–∞–Ω—å—à–µ –≤ main.py.
    # –≠—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ, —á–µ–º –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å –≤—Å–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã.
    await cb.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=False)

================================================================================
FILE: bot\routers\forms.py
================================================================================
# bot/routers/forms.py
from aiogram.fsm.state import StatesGroup, State

class HelpForm(StatesGroup):
    waiting_text = State()

class SubmitForm(StatesGroup):
    waiting_work = State()

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Å—é–¥–∞
class LessonCodeForm(StatesGroup):
    waiting_code = State()

================================================================================
FILE: bot\routers\lesson_flow.py
================================================================================
from __future__ import annotations

from pathlib import Path
from aiogram import Router, F, types, Bot
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.routers.forms import SubmitForm
from bot.services.db import get_db
from bot.services.lessons import list_t_blocks, sort_materials
from bot.keyboards.student import next_t_inline
from bot.config import get_settings, now_utc_str, local_dt_str
from bot.routers.forms import HelpForm
from aiogram import exceptions as tg_exc


import re


router = Router(name="lesson_flow")

TELEGRAM_LINK_RE = re.compile(
    r"^https?://t\.me/(?:(?P<user>[A-Za-z0-9_]+)/(?P<msg>\d+)|c/(?P<intid>\d+)/(?P<msg2>\d+))$"
)

def parse_tg_link(url: str):
    m = TELEGRAM_LINK_RE.match(url.strip())
    if not m:
        return None
    if m.group("user"):
        return ("@" + m.group("user"), int(m.group("msg")))
    return (-100 * int(m.group("intid")), int(m.group("msg2")))

# === (–ë–´–õ–û —É —Ç–µ–±—è –≤ –ø—Ä–æ–µ–∫—Ç–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–µ—Ä–∂–∏–º –∑–¥–µ—Å—å) ===
# –ö–Ω–æ–ø–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–¥–∞—á–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def _final_submit_kb(pid: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"submit_start:{pid}")
    kb.button(text="üÜò –ü–æ–º–æ—â—å", callback_data=f"ask_help:{pid}")
    kb.button(text="üîÅ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"restart_lesson:{pid}")
    kb.adjust(1)
    return kb.as_markup()


# === NEW: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞) ===
def _resume_submit_kb(pid: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"submit_start:{pid}")   # —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–±—ç–∫
    kb.button(text="üÜò –ü–æ–º–æ—â—å", callback_data=f"ask_help:{pid}")                  # —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–±—ç–∫
    kb.button(text="üîÅ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ", callback_data=f"restart_lesson:{pid}")  # –Ω–æ–≤—ã–π –∫–æ–ª–±—ç–∫
    kb.adjust(1)
    return kb.as_markup()


def _is_video_url(url: str) -> bool:
    url = url.strip().lower()
    # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª (CDN/S3 –∏ —Ç.–ø.). –î–ª—è YouTube/TG-–ø–æ—Å—Ç–æ–≤ –≤–µ—Ä–Ω—ë—Ç False.
    VIDEO_EXTS = (".mp4", ".mov", ".m4v", ".mkv", ".avi")
    return url.startswith(("http://", "https://")) and url.split("?")[0].endswith(VIDEO_EXTS)


# === NEW: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π/–ø–æ—Å–ª–µ–¥–Ω–∏–π T-—Ä–∞–∑–¥–µ–ª —É—Ä–æ–∫–∞ –±–µ–∑ —Å–¥–≤–∏–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
async def send_current_t_view(bot: Bot, chat_id: int, progress_id: int):
    settings = get_settings()

    # 1) —á–∏—Ç–∞–µ–º progress -> lesson_code, task_code
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code, task_code FROM progress WHERE id=?",
            (progress_id,),
        )
        pr = await cur.fetchone()

    if not pr:
        await bot.send_message(chat_id, "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    lesson_code = (pr["lesson_code"] or "").strip()
    task_code = (pr["task_code"] or "").strip()

    # 2) —Å–ø–∏—Å–æ–∫ T-–±–ª–æ–∫–æ–≤
    try:
        course_code, lesson_folder = full_lesson_code.split(":", 1)
    except ValueError:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ —É—Ä–æ–∫–∞.")
        return

    # 3) –∫–∞–∫–æ–π T –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if task_code.startswith("T"):
        t_code = task_code               # –Ω–∞ —á—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    elif task_code == "DONE":
        t_code = t_list[-1]              # —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π T
    else:
        t_code = t_list[0]               # –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª ‚Üí –ø–µ—Ä–≤—ã–π T

    # 4) –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await bot.send_message(
        chat_id,
        f"üß© –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª <b>{t_code}</b> —É—Ä–æ–∫–∞ <b>{lesson_code}</b> üëá",
        parse_mode="HTML",
    )

    # 5) –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ä–∞–∑–¥–µ–ª–∞ (—Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ send_next_t_block)
    files = sort_materials(lesson_dir / t_code)
    for p in files:
        ext = p.suffix.lower()
        try:
            if ext in {".mp4", ".mov", ".m4v", ".avi", ".mkv"}:
                await bot.send_video(chat_id, video=FSInputFile(str(p)))
            elif ext in {".jpg", ".jpeg", ".png", ".webp", ".gif"}:
                await bot.send_photo(chat_id, photo=FSInputFile(str(p)))
            elif ext in {".txt", ".md"}:
                txt = p.read_text(encoding="utf-8", errors="ignore").strip()
            elif ext in {".docx", ".pdf", ".xlsx", ".pptx"}:
                await bot.send_document(chat_id, document=FSInputFile(str(p)))

                # –ï—Å–ª–∏ —ç—Ç–æ t.me-—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç ‚Äî –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
                if "\n" not in txt and " " not in txt:
                    tg = parse_tg_link(txt)
                    if tg:
                        from_chat_id, msg_id = tg
                        await bot.copy_message(chat_id=chat_id, from_chat_id=from_chat_id, message_id=msg_id)
                        continue
                    else:
                        await bot.send_message(chat_id, f"üì∫ –í–∏–¥–µ–æ: {txt}")
                else:
                    if len(txt) > 4000:
                        txt = txt[:3900] + "...\n(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
                    await bot.send_message(chat_id, txt)
            else:
                await bot.send_document(chat_id, document=FSInputFile(str(p)))
        except Exception as e:
            await bot.send_message(chat_id, f"(–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {p.name}: {e})")

    # 6) –¥–µ–π—Å—Ç–≤–∏—è: –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å/–ø–æ–º–æ—â—å/—Ä–µ—Å—Ç–∞—Ä—Ç
    await bot.send_message(
        chat_id,
        "–ì–æ—Ç–æ–≤ —Å–¥–∞–≤–∞—Ç—å ‚Äî –∂–º–∏ ¬´üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–∞–±–æ—Ç—É¬ª. –ó–∞–ø—É—Ç–∞–ª—Å—è ‚Äî ¬´üÜò –ü–æ–º–æ—â—å¬ª. "
        "–ù—É–∂–Ω–æ —Å –Ω—É–ª—è ‚Äî ¬´üîÅ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ¬ª.",
        reply_markup=_resume_submit_kb(progress_id),
    )


async def send_next_t_block(bot: Bot, chat_id: int, progress_id: int, first: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–õ–ï–î–£–Æ–©–ò–ô T-–±–ª–æ–∫ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É.
    –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç ‚Äî –ø–æ–º–µ—á–∞–µ—Ç DONE –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è bot-–∏–Ω—Å—Ç–∞–Ω—Å (–Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π).
    """
    settings = get_settings()

    # 1) –î–æ—Å—Ç–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    async with get_db() as db:
        cur = await db.execute(
            """
            SELECT p.id, p.student_id, p.lesson_code, p.task_code, p.deadline_at
            FROM progress p
            WHERE p.id=?
            """,
            (progress_id,),
        )
        pr = await cur.fetchone()

    if not pr:
        await bot.send_message(chat_id, "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # ...
    full_lesson_code: str = pr["lesson_code"]
    task_code: str | None = pr["task_code"]

    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —É—Ä–æ–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏ >>>
    try:
        course_code, lesson_folder = full_lesson_code.split(":", 1)
    except ValueError:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ —É—Ä–æ–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –°—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —É—Ä–æ–∫–æ–º
    lesson_dir = settings.lessons_path / course_code / lesson_folder

    # 2) –°–ø–∏—Å–æ–∫ T-–±–ª–æ–∫–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞
    t_list = list_t_blocks(lesson_dir)
    if not t_list:
        await bot.send_message(chat_id, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # 3) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ T
    if task_code and task_code.startswith("T"):
        try:
            current_idx = t_list.index(task_code)
        except ValueError:
            current_idx = -1
    else:
        # –µ—â—ë –Ω–µ –±—ã–ª–æ T ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
        current_idx = -1

    next_idx = current_idx + 1

    # 4) –ï—Å–ª–∏ next_idx –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ‚Äî —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Å–µ T —É–∂–µ –≤—ã–¥–∞–Ω—ã (–ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
    if next_idx >= len(t_list):
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥—É–±–ª–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        async with get_db() as db:
            await db.execute(
                "UPDATE progress SET task_code='DONE', updated_at=? WHERE id=?",
                (now_utc_str(), progress_id),
            )
            await db.commit()

        dl = local_dt_str(pr["deadline_at"], settings.timezone) if pr["deadline_at"] else "‚Äî"
        await bot.send_message(
            chat_id,
            f"–£—Ä–æ–∫ –≥–æ—Ç–æ–≤ ‚úÖ\n–î–µ–¥–ª–∞–π–Ω: <b>{dl}</b>\nüéØ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—à—å: <b>100 –±–∞–ª–ª–æ–≤</b>\n\n"
            f"–°–¥–∞–π —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=_final_submit_kb(progress_id),
        )
        return

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¢–ï–ö–£–©–ï–ì–û next T-–±–ª–æ–∫–∞
    t_code = t_list[next_idx]
    t_dir = lesson_dir / t_code
    files = sort_materials(t_dir)

    if first:
        await bot.send_message(
            chat_id,
            f"üé∏ –£—Ä–æ–∫ <b>{lesson_code}</b>. –ó–∞–¥–∞–Ω–∏–µ <b>{t_code}</b>\n–°–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ üëá",
        )
    else:
        await bot.send_message(chat_id, f"–ó–∞–¥–∞–Ω–∏–µ <b>{t_code}</b> üëá")

    for p in files:
        ext = p.suffix.lower()
        try:
            if ext in {".mp4", ".mov", ".m4v", ".avi", ".mkv"}:
                await bot.send_video(chat_id, video=FSInputFile(str(p)))
            elif ext in {".jpg", ".jpeg", ".png", ".webp", ".gif"}:
                await bot.send_photo(chat_id, photo=FSInputFile(str(p)))
            elif ext in {".txt", ".md"}:
                txt = p.read_text(encoding="utf-8", errors="ignore").strip()

                # 1) –ï—Å–ª–∏ —ç—Ç–æ t.me-—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç ‚Üí –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∏–¥–µ–æ/–ø–æ—Å—Ç –ø—Ä–∏–¥—ë—Ç –∫–∞–∫ –µ—Å—Ç—å)
                if "\n" not in txt and " " not in txt:
                    tg = parse_tg_link(txt)
                    if tg:
                        from_chat_id, msg_id = tg
                        await bot.copy_message(chat_id=chat_id, from_chat_id=from_chat_id, message_id=msg_id)
                        continue

                # 2) –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª-–≤–∏–¥–µ–æ (mp4/mov/‚Ä¶) ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                if "\n" not in txt and " " not in txt and txt.lower().startswith(("http://", "https://")):
                    if txt.split("?")[0].lower().endswith((".mp4", ".mov", ".m4v", ".mkv", ".avi")):
                        await bot.send_video(chat_id, video=txt)
                    else:
                        # –ø—Ä–æ—á–∏–µ URL ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)
                        await bot.send_message(chat_id, f"üì∫ –í–∏–¥–µ–æ: {txt}")
                else:
                    # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                    if len(txt) > 4000:
                        txt = txt[:3900] + "...\n(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
                    await bot.send_message(chat_id, txt)

            else:
                await bot.send_document(chat_id, document=FSInputFile(str(p)))
        except Exception as e:
            await bot.send_message(chat_id, f"(–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {p.name}: {e})")

    # 6) –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ?
    has_next = (next_idx + 1) < len(t_list)

    if has_next:
        # –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø–µ—Ä–µ—Ö–æ–¥ –∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π T
        await bot.send_message(
            chat_id,
            "–ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É?",
            reply_markup=next_t_inline(progress_id, has_next=True),
        )
        async with get_db() as db:
            await db.execute(
                "UPDATE progress SET task_code=?, updated_at=? WHERE id=?",
                (t_code, now_utc_str(), progress_id),
            )
            await db.commit()
    else:
        # –≠—Ç–æ –±—ã–ª –ü–û–°–õ–ï–î–ù–ò–ô –±–ª–æ–∫ ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–æ—Å–∏–º —Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É
        async with get_db() as db:
            await db.execute(
                "UPDATE progress SET task_code='DONE', updated_at=? WHERE id=?",
                (now_utc_str(), progress_id),
            )
            await db.commit()

        dl = local_dt_str(pr["deadline_at"], settings.timezone) if pr["deadline_at"] else "‚Äî"
        await bot.send_message(
            chat_id,
            f"‚úÖ –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω \n–î–µ–¥–ª–∞–π–Ω: <b>{dl}</b>\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫.",
            reply_markup=_final_submit_kb(progress_id),
        )


@router.callback_query(F.data.startswith("next_t:"))
async def cb_next_t(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])
    await cb.answer()

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    try:
        await cb.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ

    await send_next_t_block(cb.message.bot, cb.message.chat.id, pid, first=False)


# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SubmitForm –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ forms.py
# from bot.routers.forms import SubmitForm

@router.callback_query(F.data.startswith("submit_start:"))
async def cb_submit_start(cb: types.CallbackQuery, state: FSMContext): # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ state
    pid = int(cb.data.split(":")[1])
    async with get_db() as db:
        await db.execute(
            "UPDATE progress SET status='sent', updated_at=? WHERE id=?",
            (now_utc_str(), pid),
        )
        await db.commit()

    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    await state.set_state(SubmitForm.waiting_work)
    await state.update_data(progress_id=pid) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞

    await cb.answer()
    await cb.message.answer(
        "–ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–æ–º ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
    )

@router.callback_query(F.data.startswith("ask_help:"))
async def cb_ask_help(cb: types.CallbackQuery, state: FSMContext):
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —É—á–µ–Ω–∏–∫–∞ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(HelpForm.waiting_text)
    await cb.message.answer("–û–ø–∏—à–∏, —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∞–º.")
    await cb.answer()


# === NEW: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–∫–∞ —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º task_code –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–µ–π –ø–µ—Ä–≤–æ–≥–æ T ===
@router.callback_query(F.data.startswith("restart_lesson:"))
async def cb_restart_lesson(cb: types.CallbackQuery):
    try:
        pid = int(cb.data.split(":")[1])
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.", show_alert=True)
        return

    async with get_db() as db:
        await db.execute(
            "UPDATE progress SET task_code=NULL, status='sent', updated_at=? WHERE id=?",
            (now_utc_str(), pid),
        )
        await db.commit()

    await cb.answer("–£—Ä–æ–∫ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ.")
    # –≤—ã–¥–∞—ë–º –ø–µ—Ä–≤—ã–π T-–±–ª–æ–∫ —à—Ç–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    await send_next_t_block(cb.message.bot, cb.message.chat.id, pid, first=True)



================================================================================
FILE: bot\routers\onboarding.py
================================================================================
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboards.student import student_main_kb
from bot.config import get_settings, now_utc_str
from bot.services.db import get_db
from bot.services import points

from bot.keyboards.admin import admin_main_reply_kb
from aiogram.types import ReplyKeyboardRemove
from logging import getLogger
logger = getLogger("maestro")



router = Router(name="onboarding")


class Onb(StatesGroup):
    waiting_start = State()
    first_name = State()
    last_name = State()
    birth_or_age = State()
    has_guitar = State()
    experience = State()
    goal = State()
    phone = State()
    rules = State()
    confirm = State()


WELCOME_TEXT = (
     "ü¶ù <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ</b>, –µ–Ω–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –≥–∏—Ç–∞—Ä–µ.\n"
    "–ó–¥–µ—Å—å –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏, –∑–∞–¥–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
    "–ê –º–æ–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏ ‚Äî –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¥–æ–º–∞—à–∫–∏ –∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –ì–æ—Ç–æ–≤?\n"
    "–ñ–º–∏ ¬´–ü–æ–≥–Ω–∞–ª–∏¬ª!"
)


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    settings = get_settings()

    # upsert student
    async with get_db() as db:
        await db.execute(
            "INSERT INTO students(tg_id, username, created_at, last_seen) "
            "VALUES(?,?,?,?) "
            "ON CONFLICT(tg_id) DO UPDATE SET "
            "username=excluded.username, last_seen=excluded.last_seen",
            (
                message.from_user.id,
                (message.from_user.username or ""),
                now_utc_str(),
                now_utc_str(),
            ),
        )
        await db.commit()


        # check admin
        if message.from_user.id in settings.admin_ids:
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_main_reply_kb())
            return

        # check onboarding_done
        cur = await db.execute(
            "SELECT onboarding_done, approved FROM students WHERE tg_id=?",
            (message.from_user.id,),
        )
        row = await cur.fetchone()
        if row and row["onboarding_done"]:
            if row["approved"]:
                await message.answer("–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é üëá", reply_markup=student_main_kb())
            else:
                await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –ú–æ–∏ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã —É–∂–µ –µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç, –ø–æ–¥–æ–∂–¥–¥–∏ –Ω–µ–º–Ω–æ–≥–æ")
            return

    # start onboarding
    ib = InlineKeyboardBuilder()
    ib.button(text="üëâ –ü–æ–≥–Ω–∞–ª–∏", callback_data="onb_go")
    ib.button(text="‚ÑπÔ∏è –ö—Ç–æ —Ç–∞–∫–∏–µ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã?", callback_data="about_maestroffs")
    await message.answer(WELCOME_TEXT, reply_markup=ib.as_markup())
    await state.set_state(Onb.waiting_start)

@router.callback_query(F.data == "about_maestroffs")
async def cb_about_maestroffs(cb: types.CallbackQuery):
    txt = (
        "ü¶ù –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–∞.\n"
        "–û–Ω–∏:\n"
        "‚Ä¢ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Ç–≤–æ—é –¥–æ–º–∞—à–∫—É –∏ –¥–∞—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏;\n"
        "‚Ä¢ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ ¬´–ü–æ–º–æ—â–∏¬ª;\n"
        "‚Ä¢ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—à–∫–∏.\n\n"
        "–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–µ—à—å—Å—è ‚Äî –∂–º–∏ ¬´üÜò –ü–æ–º–æ—â—å¬ª –≤ —É—Ä–æ–∫–µ, –æ–¥–∏–Ω –∏–∑ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–æ–≤ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è."
    )
    ib = InlineKeyboardBuilder()
    ib.button(text="üëâ –ü–æ–≥–Ω–∞–ª–∏", callback_data="onb_go")
    await cb.answer()
    await cb.message.answer(txt)


@router.callback_query(F.data == "onb_go")
async def onb_go(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (—Ç–æ–ª—å–∫–æ –∏–º—è)")
    await state.set_state(Onb.first_name)
    await cb.answer()


@router.message(Onb.first_name)
async def onb_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=(message.text or "").strip())
    await message.answer("–ö–ª–∞—Å—Å! –•–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤—å —Ñ–∞–º–∏–ª–∏—é (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´-¬ª)")
    await state.set_state(Onb.last_name)


@router.message(Onb.last_name)
async def onb_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=(message.text or "").strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12)")
    await state.set_state(Onb.birth_or_age)


@router.message(Onb.birth_or_age)
async def onb_birth(message: types.Message, state: FSMContext):
    await state.update_data(birth_or_age=(message.text or "").strip())
    kb = InlineKeyboardBuilder()
    kb.button(text="üé∏ –ï—Å—Ç—å", callback_data="g_has:1")
    kb.button(text="–ü–æ–∫–∞ –Ω–µ—Ç, –ø–ª–∞–Ω–∏—Ä—É—é", callback_data="g_has:0")
    kb.adjust(1)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≥–∏—Ç–∞—Ä–∞? üé∏", reply_markup=kb.as_markup())
    await state.set_state(Onb.has_guitar)


@router.callback_query(Onb.has_guitar, F.data.startswith("g_has:"))
async def onb_has_guitar(cb: types.CallbackQuery, state: FSMContext):
    has = int(cb.data.split(":")[1])
    await state.update_data(has_guitar=has)
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —É–∂–µ –∏–≥—Ä–∞–µ—à—å? (–º–æ–∂–Ω–æ 0)")
    await state.set_state(Onb.experience)
    await cb.answer()


@router.message(Onb.experience)
async def onb_experience(message: types.Message, state: FSMContext):
    txt = (message.text or "").strip()
    try:
        exp = int("".join(ch for ch in txt if (ch.isdigit() or ch == "-")))
    except Exception:
        exp = 0
    await state.update_data(experience_months=max(0, exp))
    await message.answer("–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –∑–∞ 1-3 –º–µ—Å—è—Ü–∞ ")
    await state.set_state(Onb.goal)


@router.message(Onb.goal)
async def onb_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=(message.text or "").strip())
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7 ‚Ä¶)")
    await state.set_state(Onb.phone)


@router.message(Onb.phone)
async def onb_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=(message.text or "").strip())
    rules = (
        "üìú –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ —Å—Ä–æ–∫;\n"
        "‚Äî —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–∞–µ–º—Å—è;\n"
        "‚Äî –∫–∞–π—Ñ—É–µ–º –æ—Ç –º—É–∑—ã–∫–∏ üé∂\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, –∏ –ø–æ–ª–µ—Ç–µ–ª–∏!\n"
        "_ –ù–∞–º –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É, –±—É–∫–≤–∞–ª—å–Ω–æ 2-5 –º–∏–Ω—É—Ç –∏ –æ—Ç–∫—Ä–æ–µ–º –¥–æ—Å—Ç—É–ø"
    )

    ib = InlineKeyboardBuilder()
    ib.button(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data="rules_ok")
    await message.answer(rules, reply_markup=ib.as_markup())
    await state.set_state(Onb.rules)


@router.callback_query(Onb.rules, F.data == "rules_ok")
async def onb_rules_ok(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # persist
    async with get_db() as db:
        # parse age / birth_date
        age = None
        birth_date = None
        txt = (data.get("birth_or_age") or "").strip()
        if txt.isdigit():
            age = int(txt)
        else:
            birth_date = txt or None

        await db.execute(
            "UPDATE students SET first_name=?, last_name=?, birth_date=?, age=?, has_guitar=?, "
            "experience_months=?, goal=?, phone=?, onboarding_done=1, consent=1, last_seen=? "
            "WHERE tg_id=?",
            (
                data.get("first_name"),
                data.get("last_name"),
                birth_date,
                age,
                int(data.get("has_guitar") or 0),
                int(data.get("experience_months") or 0),
                data.get("goal"),
                data.get("phone"),
                now_utc_str(),
                cb.from_user.id,
            ),
        )
        await db.commit()

        # Fetch student id
        cur = await db.execute(
            "SELECT id FROM students WHERE tg_id=?", (cb.from_user.id,)
        )
        row = await cur.fetchone()
        student_id = row["id"] if row else None

        # award onboarding bonus (+50), idempotent via UNIQUE(student_id, source)
        # +50 –∑–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
        if student_id:
            try:
                await points.add(student_id, "onboarding_bonus", 50)
            except Exception:
                pass

        # --- –†–∞—Å—Å—á—ë—Ç —Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ --- #
        #total = await points.total(student_id)
        #rank_name, next_thr = get_rank_by_points(total)

        #async with get_db() as db:
         #   await db.execute(
          #      "UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
           #     (rank_name, total, now_utc_str(), student_id),
            #)
            #await db.commit()

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ —Ä–∞–Ω–≥
            #msg = f"üèÖ –¢–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞–Ω–≥: <b>{rank_name}</b>\n–ë–∞–ª–ª—ã: <b>{total}</b>"
           # if next_thr is not None:
           #     msg += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: <b>{next_thr - total}</b>"
          #  await cb.message.answer(msg)



    await cb.message.answer(
        "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã –¥–∞–¥–∏–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()
    # (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ onb_ok/onb_rej ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)

    # Notify admins
    settings = get_settings()
    if settings.admin_ids:
        card = (
            "üÜï –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞\n"
            f"–ò–º—è: {data.get('first_name','')} {data.get('last_name','')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç/—Ä–æ–∂–¥.: {data.get('birth_or_age','')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}\n"
            f"–ì–∏—Ç–∞—Ä–∞: {'–µ—Å—Ç—å' if int(data.get('has_guitar') or 0) else '–Ω–µ—Ç'}\n"
            f"–û–ø—ã—Ç: {int(data.get('experience_months') or 0)} –º–µ—Å\n"
            f"–¶–µ–ª—å: {data.get('goal','')}\n"
            f"@{cb.from_user.username or 'no_username'} ‚Ä¢ tg_id: {cb.from_user.id}\n"
        )
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
        for admin_id in settings.admin_ids:
            try:
                ik = InlineKeyboardBuilder()

                ik.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"onb_ok:{student_id}")
                ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"onb_rej:{student_id}")
                ik.adjust(2)
                await cb.bot.send_message(admin_id, card, reply_markup=ik.as_markup())
            except Exception:
                pass

================================================================================
FILE: bot\routers\student.py
================================================================================
from __future__ import annotations

import os
import random

from pathlib import Path

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.routers.lesson_flow import send_next_t_block

from bot.keyboards.student import student_main_kb, payment_inline, next_t_inline
from bot.config import get_settings, now_utc_str, local_dt_str
from bot.services.lessons import (
    list_l_lessons,
    next_l_after,
    list_t_blocks,
    sort_materials,
    parse_l_num,
)

from bot.services.lessons import list_l_lessons
from bot.config import get_course
from bot.services.admin_cards import render_submission_card
from bot.services import points
from bot.services.ranks import get_rank_by_points
from bot.routers.forms import HelpForm, SubmitForm, LessonCodeForm # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï

from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from bot.services.admin_cards import help_reply_kb
from aiogram import Router , types, F, Bot
from bot.services.db import get_db
from aiogram.types import FSInputFile
from aiogram.filters import StateFilter
from bot.keyboards.student import student_main_kb
from bot.config import COURSES

router = Router(name="student")


def _cancel_kb() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞")
    return kb.as_markup(resize_keyboard=True)


KNOWN_BUTTONS = {
    "üìö –ù–æ–≤—ã–π —É—Ä–æ–∫", "üîë –£—Ä–æ–∫ –ø–æ –∫–æ–¥—É", "‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", "üÜò –ü–æ–º–æ—â—å",
    "üèÖ –ú–æ–π —Ä–∞–Ω–≥", "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ", "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
}


async def _submit_active(message: types.Message) -> bool:
    """–ü–æ–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ submitted –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∞–¥–º–∏–Ω–∞–º + –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # 1) –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    async with get_db() as db:
        cur = await db.execute(
            "SELECT s.id as sid, p.id as pid FROM students s "
            "LEFT JOIN progress p ON p.student_id=s.id AND p.status IN ('sent','returned','submitted') "
            "WHERE s.tg_id=?",
            (message.from_user.id,),
        )
        row = await cur.fetchone()
        if not row or row["pid"] is None:
            return False  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä

        pid = row["pid"]

        # 2) –æ—Ç–º–µ—Ç–∏—Ç—å submitted
        now = now_utc_str()
        await db.execute(
            "UPDATE progress SET status='submitted', submitted_at=?, updated_at=? WHERE id=?",
            (now, now, pid),
        )
        await db.commit()

        # 3) –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code, task_code, submitted_at FROM progress WHERE id=?",
            (pid,),
        )
        prow = await cur.fetchone()

    from bot.services.admin_cards import render_submission_card
    settings = get_settings()

    card_text, kb = render_submission_card(
        pid,
        message.from_user,
        lesson_code=prow["lesson_code"],
        task_code=prow["task_code"],
        submitted_at_utc=prow["submitted_at"],
    )

    # –ö–∞—Ä—Ç–æ—á–∫–∞ + –∫–æ–ø–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
    for admin_id in settings.admin_ids:
        try:
            await message.bot.send_message(admin_id, card_text, reply_markup=kb)
            await message.copy_to(admin_id)
        except Exception:
            pass

    # 5) –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É
    await message.answer("–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ –ø–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å")
    return True

# bot/routers/student.py

# ... (–∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞) ...
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç:


# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ú–ï–ù–Æ –ö–£–†–°–û–í >>>
@router.message(F.text == "üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è")
async def training_program_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Inline-–∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞."""
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:")

    kb = InlineKeyboardBuilder()
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–∞—à–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –∫—É—Ä—Å–æ–≤ –∏–∑ config.py
    for course_code, course in COURSES.items():
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        kb.button(text=course.title, callback_data=f"show_course:{course_code}")

    kb.adjust(1) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ

    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
        reply_markup=kb.as_markup()
    )

# --- —Å–¥–∞—á–∞ –ú–ï–î–ò–ê (–≤–Ω–µ FSM –ø–æ–º–æ—â–∏ –∏ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏) ---
@router.message(
    StateFilter(None),
    F.content_type.in_({"photo", "video", "document"})
)
async def handle_submission_media(message: types.Message):
    await _submit_active(message)



@router.callback_query(F.data == "tests:back")
async def tests_back(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤
    kb = student_main_kb() if callable(student_main_kb) else student_main_kb
    await cb.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    await cb.answer()



@router.message(Command("myid", "my_id"))
async def cmd_myid(message: types.Message):
    await _get_or_create_student(message.from_user.id, message.from_user.username)
    await message.answer(f"–¢–≤–æ–π tg_id: <code>{message.from_user.id}</code>")


# ====== Main menu buttons ======
@router.message(F.text == "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ")
async def about_course(message: types.Message):
    txt = (
        "üé∂ <b>–û –∫—É—Ä—Å–µ</b>\n\n"
        "–£ —Ç–µ–±—è –≤–ø–µ—Ä–µ–¥–∏ <b>16 —É—Ä–æ–∫–æ–≤ 1- –æ–≥–æ –º–æ–¥—É–ª—è</b>, –≥–¥–µ —Ç—ã —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –æ—Å–≤–æ–∏—à—å:\n"
        "‚Äî –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –ø–µ—Å–Ω–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏,\n‚Äî —á–∏—Ç–∞—Ç—å —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã,\n‚Äî –∏–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏–∏,\n"
        "‚Äî –∫–∞–∫ —Å–æ–µ–¥–∏–Ω—è—Ç—å –∞–∫–∫–æ—Ä–¥—ã, –≥–æ–ª–æ—Å –∏ –±–æ–π,\n‚Äî –ø–æ–Ω–∏–º–∞—Ç—å –æ—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏.\n\n"
        "–ê –µ—â—ë —Ç–µ–±—è –∂–¥—É—Ç <b>—É—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É</b> ‚Äî —Ä–∞–∑–±–æ—Ä—ã —Ö–∏—Ç–æ–≤ üé∏\n\n"
        "üëâ –ü—Ä–æ–π–¥–∏ –ø–µ—Ä–≤—ã–µ 3 —É—Ä–æ–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≥–∏—Ç–∞—Ä–∞ –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è!\n\n"
        "üìû –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∑–≤–æ–Ω–∏: <b>+7 777 505 5788</b>"
    )
    await message.answer(txt)

@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def btn_help(message: types.Message, state: FSMContext):
    await state.set_state(HelpForm.waiting_text)
    await message.answer("üÜò –¢—ã –Ω–∞–∂–∞–ª SOS\n"
    "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Å—Ç—Ä–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç"
)

@router.message(HelpForm.waiting_text, F.text)
async def handle_help_text(message: types.Message, state: FSMContext):
    settings = get_settings()

    # 1) –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ (–±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ full_name)
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, first_name, last_name, username FROM students WHERE tg_id=?",
            (message.from_user.id,)
        )
        srow = await cur.fetchone()

    if not srow:
        await state.clear()
        await message.answer("–£–ø—Å, –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ, –ù–∞–∂–º–∏ /start")
        return

    student_id = srow["id"]
    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    fn = (srow["first_name"] or "").strip()
    ln = (srow["last_name"] or "").strip()
    display_name = (f"{fn} {ln}".strip()
                    or (f"@{srow['username']}" if srow["username"] else "")
                    or message.from_user.full_name
                    or f"id {message.from_user.id}")

    # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –û–¢–ö–†–´–¢–û–ô –∑–∞—è–≤–∫–∏
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id FROM help_requests WHERE student_id=? AND status='open' LIMIT 1",
            (student_id,),
        )
        exists = await cur.fetchone()

    if exists:
        await state.clear()
        await message.answer("–¢–∞–∫-—Å —Ç–∞–∫—Å-, –¥–∞–≤–∞–π –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á—É - —Å–º–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å üôå")
        return

    # 3) —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ help_requests
    now = now_utc_str()
    async with get_db() as db:
        await db.execute(
            "INSERT INTO help_requests (student_id, status, created_at) VALUES (?,?,?)",
            (student_id, "open", now),
        )
        await db.commit()

    # 4) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    username = f"@{message.from_user.username}" if message.from_user.username else f"id {message.from_user.id}"
    card = (
        "üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏\n"
        f"{display_name} ({username})\n\n"
        f"{message.text}"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"adm_reply:{message.from_user.id}")
    kb.adjust(1)
    for admin_id in settings.admin_ids:
        try:
            await message.bot.send_message(admin_id, card, reply_markup=kb.as_markup())
        except Exception:
            pass

    await state.clear()
    await message.answer("–ü–µ—Ä–µ–¥–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥—è—Ç—Å—è —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç—è—Ç ( –æ–±—ã—á–Ω–æ 1-5 –º–∏–Ω—É—Ç—ã üëå")

@router.message(F.text == "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def my_progress(message: types.Message):
    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –ù–∞–∂–º–∏ /start")
        return
    sid = row["id"]

    # –æ—á–∫–∏ –∏ —Ä–∞–Ω–≥
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)

    # —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved'",
            (sid,),
        )
        lessons = (await cur.fetchone())["c"]

    txt = (
        f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"‚Ä¢ –£—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ: <b>{lessons}</b>\n"
        f"‚Ä¢ –ë–∞–ª–ª—ã: <b>{total}</b>\n"
        f"‚Ä¢ –†–∞–Ω–≥: <b>{rank_name}</b>"
    )
    if next_thr is not None:
        txt += f"\n‚Ä¢ üî• –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{next_thr - total}</b> –æ—á–∫–æ–≤!"

    await message.answer(txt)

@router.message(F.text == "üèÖ –ú–æ–π —Ä–∞–Ω–≥")
async def my_rank(message: types.Message):
    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ tg_id
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()

    if not row:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ /start")
        return

    sid = row["id"]

    # —Å—É–º–º–∞—Ä–Ω—ã–µ –±–∞–ª–ª—ã –∏ —Ä–∞–Ω–≥
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)

    txt = f"üèÖ –¢–≤–æ–π —Ä–∞–Ω–≥: <b>{rank_name}</b>\nüéØ –ë–∞–ª–ª—ã: <b>{total}</b>"
    if next_thr is not None:
        txt += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: <b>{next_thr - total}</b>"

    await message.answer(txt)

@router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")
async def pay(message: types.Message):
    settings = get_settings()
    await _get_or_create_student(message.from_user.id, message.from_user.username)
    txt = (
        "üé∂ üé∂ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
        f"–ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å üòÖ\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∑–∞ <b>4999</b> (—ç—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –ø–∞—Ä–∞ –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ ‚òïÔ∏è)"
    )
    # Check if already has confirmed payment
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM payments p JOIN students s ON s.id=p.student_id WHERE s.tg_id=?",
            (message.from_user.id,),
        )
        r = await cur.fetchone()
        if r and r["c"] > 0:
            await message.answer("–£–≥–æ–≤–æ—Ä–∏–ª, –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å ‚úÖ", reply_markup=student_main_kb())
            return

        # Check pending request
        cur = await db.execute(
            "SELECT pr.id FROM payment_requests pr JOIN students s ON s.id=pr.student_id "
            "WHERE s.tg_id=? AND pr.status='pending'",
            (message.from_user.id,),
        )
        pend = await cur.fetchone()
        include_button = True
        if pend:
            include_button = False
            txt += "\n\n–í–∞—É, —Å–ø–∞—Å–∏–±–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —è –¥–æ–π–¥—É –¥–æ —Ç–≤–æ–µ–π –æ–ø–ª–∞—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úÖ"

    await message.answer(
        txt,
        reply_markup=payment_inline(
            settings.payment_link, include_i_paid=include_button, student_id=message.from_user.id
        ),
    )


@router.callback_query(F.data.startswith("paid_ipaid:"))
async def cb_paid_paid(cb: types.CallbackQuery):
    try:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–¥–æ–º –∫—É—Ä—Å–∞ >>>
        _, course_code, tg_id_str = cb.data.split(":")
        tg_id = int(tg_id_str)
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    if cb.from_user.id != tg_id:
        await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞", show_alert=True)
        return

    course = get_course(course_code)
    if not course:
        await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    settings = get_settings()
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        r = await cur.fetchone()
        if not r:
            await cb.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        sid = r["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ –≠–¢–û–¢ –∫—É—Ä—Å
        cur = await db.execute("SELECT 1 FROM payments WHERE student_id=? AND course_code=?", (sid, course_code))
        if await cur.fetchone():
            await cb.answer("–≠—Ç–æ—Ç –∫—É—Ä—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω ‚úÖ", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞
        await db.execute(
            "INSERT INTO payment_requests(student_id, amount, status, course_code, created_at) VALUES(?,?,?,?,?)",
            (sid, course.price, 'pending', course.code, now_utc_str()),
        )
        await db.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    card = (
        f"üí≥ <b>–ó–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª</b>\n"
        f"–£—á–µ–Ω–∏–∫: @{cb.from_user.username or 'no_username'} (id {cb.from_user.id})\n"
        f"–°—É–º–º–∞: {course.price} ‚Ç∏"
    )
    ik = InlineKeyboardBuilder()
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º tg_id –∏ course_code >>>
    ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{course.code}:{tg_id}")
    ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"adm_pay_no:{course.code}:{tg_id}")
    ik.adjust(1)
    for admin_id in settings.admin_ids:
        try:
            await cb.bot.send_message(admin_id, card, reply_markup=ik.as_markup())
        except Exception:
            pass

    await cb.message.edit_text(cb.message.text + "\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    await cb.answer()

    await cb.message.edit_text(cb.message.text + "\n\n–î–∞-–î–∞, –≤–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é —â–µ–¥—Ä—ã–π —á–µ–ª–æ–≤–µ–∫, —Å–µ–∫—É–Ω–¥—É, –º–Ω–µ –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å  ‚úÖ")
    await cb.answer()


# ‚¨áÔ∏è –ö–ù–û–ü–ö–ê –ú–ï–ù–Æ ¬´üìö –ù–æ–≤—ã–π —É—Ä–æ–∫¬ª ‚Äî —Ç–æ–Ω–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞
async def _issue_new_lesson(bot: Bot, tg_id: int, chat_id: int, course_code: str) -> None:
    settings = get_settings()
    course = get_course(course_code)
    if not course:
        await bot.send_message(chat_id, "–¢–∞–∫–æ–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    async with get_db() as db:
        # 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        cur = await db.execute("SELECT id, approved FROM students WHERE tg_id=?", (tg_id,))
        s = await cur.fetchone()
        if not s or not s["approved"]:
            await bot.send_message(chat_id, "‚è≥ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –µ—â–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
            return
        sid = s["id"]

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ª—é–±–æ–µ)
        cur = await db.execute(
            "SELECT id FROM progress WHERE student_id=? AND status IN ('sent','returned','submitted')", (sid,))
        if await cur.fetchone():
            await bot.send_message(chat_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–¥–∞–π –µ–≥–æ.")
            return

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏ –æ–ø–ª–∞—Ç—É –¥–ª—è –≠–¢–û–ì–û –∫—É—Ä—Å–∞
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:%")
        )
        approved_cnt = (await cur.fetchone())["c"]

        cur = await db.execute("SELECT 1 FROM payments WHERE student_id=? AND course_code=?", (sid, course_code))
        is_paid = await cur.fetchone()

        if approved_cnt >= course.free_lessons and not is_paid:
            payment_text = (
                f"üö´ –î–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —É—Ä–æ–∫–∞–º –∫—É—Ä—Å–∞ ¬´{course.title}¬ª –ø–ª–∞—Ç–Ω—ã–π.\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞: {course.price} ‚Ç∏.\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            await bot.send_message(
                chat_id,
                payment_text,
                reply_markup=payment_inline(
                    payment_link=settings.payment_link,
                    course_code_to_pay=course_code,
                    student_id=tg_id
                ),
            )
            return

        # 4. –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        course_path = settings.lessons_path / course.code
        cur = await db.execute(
            "SELECT lesson_code FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:L%")
        )
        rows = await cur.fetchall()
        last_num = 0
        for r in rows:
            l_code = (r["lesson_code"] or "").split(":")[-1]
            n = parse_l_num(l_code)
            if n and n > last_num:
                last_num = n

        next_lesson_folder = next_l_after(course_path, last_num)

        if not next_lesson_folder:
            await bot.send_message(chat_id,
                                   f"–ù–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ ¬´{course.title}¬ª –ø–æ–∫–∞ –Ω–µ—Ç. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è üëå")
            return

        # 5. –°–æ–∑–¥–∞–µ–º progress –≤ –ë–î —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º —É—Ä–æ–∫–∞
        full_lesson_code = f"{course.code}:{next_lesson_folder}"

        from datetime import datetime, timedelta, timezone
        sent_at = now_utc_str()
        deadline = (datetime.now(timezone.utc) + timedelta(days=3)).replace(microsecond=0).isoformat().replace("+00:00",
                                                                                                               "Z")
        remind = (datetime.now(timezone.utc) + timedelta(hours=24)).replace(microsecond=0).isoformat().replace("+00:00",
                                                                                                               "Z")

        await db.execute(
            "INSERT INTO progress(student_id, lesson_code, status, sent_at, deadline_at, remind_at, updated_at) "
            "VALUES(?,?,?,?,?,?,?)",
            (sid, full_lesson_code, "sent", sent_at, deadline, remind, sent_at),
        )
        cur = await db.execute("SELECT last_insert_rowid() AS id")
        pid = (await cur.fetchone())["id"]
        await db.commit()

    # 6. –í—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–∞
    await bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ ¬´{next_lesson_folder}¬ª –∏–∑ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª...")
    await send_next_t_block(bot, chat_id, pid, first=True)

# ===== –£—Ä–æ–∫ –ø–æ –∫–æ–¥—É (FSM –≤–º–µ—Å—Ç–æ message.conf) =====
@router.message(F.text == "üéµ –£—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É") # <<< –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
async def btn_lesson_by_code(message: types.Message, state: FSMContext):
    # –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    await state.set_state(LessonCodeForm.waiting_code)
    await message.answer(
        "–í–≤–µ–¥–∏ –∫–æ–¥ —É—Ä–æ–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
        reply_markup=_cancel_kb() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–û—Ç–º–µ–Ω–∞"
    )

@router.message(LessonCodeForm.waiting_code, F.text.regexp(r"^[A-Za-z0-9_\-]{3,}$"))
async def lesson_code_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥ –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    code = message.text.strip()
    await _process_lesson_code(message, code)
    await state.clear()



    # --- —Å–¥–∞—á–∞ –¢–ï–ö–°–¢–û–ú (–Ω–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏, –≤–Ω–µ FSM –ø–æ–º–æ—â–∏) ---


# ===== Utilities =====
async def _get_or_create_student(tg_id: int, username: str | None):
    async with get_db() as db:
        await db.execute(
            "INSERT INTO students(tg_id, username, created_at, last_seen) VALUES(?,?,?,?) "
            "ON CONFLICT(tg_id) DO UPDATE SET username=excluded.username, last_seen=excluded.last_seen",
            (tg_id, username or "", now_utc_str(), now_utc_str()),
        )
        await db.commit()


# bot/routers/student.py
# ...
# <<< –í–°–¢–ê–í–¨ –≠–¢–û–¢ –ö–û–î –í –§–ê–ô–õ student.py >>>

async def _process_lesson_code(message: types.Message, code: str):
    settings = get_settings()
    # –ò—â–µ–º —É—Ä–æ–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ by_code_path
    path = settings.by_code_path / code

    if not path.exists() or not path.is_dir():
        await message.answer("–¢–∞–∫–æ–π –∫–æ–¥ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    async with get_db() as db:
        cur = await db.execute("SELECT id, approved FROM students WHERE tg_id=?", (message.from_user.id,))
        s_row = await cur.fetchone()
        if not s_row or not s_row["approved"]:
            await message.answer("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω, –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º –ø–æ –∫–æ–¥—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–∑–∂–µ.")
            return
        sid = s_row["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ª—é–±–æ–µ)
        cur = await db.execute(
            "SELECT id FROM progress WHERE student_id=? AND status IN ('sent','returned','submitted')", (sid,))
        if await cur.fetchone():
            await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–¥–∞–π –µ–≥–æ.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —É—Ä–æ–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "by_code"
        full_lesson_code = f"by_code:{code}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω
        cur = await db.execute(
            "SELECT 1 FROM progress WHERE student_id=? AND lesson_code=? AND status='approved'",
            (sid, full_lesson_code)
        )
        if await cur.fetchone():
            await message.answer("–¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ –∫–æ–¥—É.")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        from datetime import datetime, timedelta
        sent_at = now_utc_str()

        await db.execute(
            "INSERT INTO progress(student_id, lesson_code, status, sent_at, updated_at) VALUES(?,?,?,?,?)",
            (sid, full_lesson_code, "sent", sent_at, sent_at),
        )
        cur = await db.execute("SELECT last_insert_rowid() AS id")
        pid = (await cur.fetchone())["id"]
        await db.commit()

    # –í—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–∞
    await message.answer(f"–û—Ç–∫—Ä—ã–≤–∞—é —É—Ä–æ–∫ –ø–æ –∫–æ–¥—É ¬´{code}¬ª...")
    await send_next_t_block(message.bot, message.chat.id, pid, first=True)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ StateFilter(None)
@router.message(StateFilter(None), F.photo)
async def handle_unhandled_photo(m: types.Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."""
    await m.answer(
        "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@router.callback_query(F.data.startswith("show_course:"))
async def show_course_lessons(cb: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    ‚úÖ - –ø—Ä–æ–π–¥–µ–Ω
    ‚ñ∂Ô∏è - —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    üîí - –∑–∞–∫—Ä—ã—Ç
    """
    course_code = cb.data.split(":")[1]
    course = get_course(course_code)

    if not course:
        await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await cb.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª...")

    settings = get_settings()
    sid = None

    # 1. –ù–∞—Ö–æ–¥–∏–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (cb.from_user.id,))
        s_row = await cur.fetchone()
        if s_row:
            sid = s_row["id"]

    if not sid:
        await cb.message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞–∂–º–∏ /start")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ –∏–∑ –ø–∞–ø–æ–∫
    course_path = settings.lessons_path / course.code
    all_lessons = list_l_lessons(course_path)

    # 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ü–†–û–ô–î–ï–ù–ù–´–• —É—Ä–æ–∫–æ–≤ –∏–∑ –ë–î
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:%")
        )
        rows = await cur.fetchall()
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫—É—Ä—Å–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ L-–∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä "L01"
        passed_lessons = {row["lesson_code"].split(":")[-1] for row in rows}

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    next_lesson_unlocked = True

    for lesson_folder_name in all_lessons:
        status_icon = ""
        callback_data = ""

        if lesson_folder_name in passed_lessons:
            status_icon = "‚úÖ"
            callback_data = f"lesson:review:{course.code}:{lesson_folder_name}" # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫
        elif next_lesson_unlocked:
            status_icon = "‚ñ∂Ô∏è"
            callback_data = f"lesson:start:{course.code}:{lesson_folder_name}" # –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫
            next_lesson_unlocked = False # –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        else:
            status_icon = "üîí"
            callback_data = "lesson:locked" # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb.button(text=f"{status_icon} {lesson_folder_name}", callback_data=callback_data)

    kb.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

    await cb.message.edit_text(
        f"–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª:",
        reply_markup=kb.as_markup()
    )

# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "‚úÖ –ü–û–í–¢–û–†–ò–¢–¨ –£–†–û–ö" >>>
@router.callback_query(F.data.startswith("lesson:review:"))
async def lesson_review(cb: types.CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —É—Ä–æ–∫–∞ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."""
    try:
        _, _, course_code, lesson_folder = cb.data.split(":")
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞.", show_alert=True)
        return

    # TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞
    await cb.answer(f"–ü–æ–≤—Ç–æ—Ä —É—Ä–æ–∫–∞ ¬´{lesson_folder}¬ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üîí –£–†–û–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" >>>
@router.callback_query(F.data == "lesson:locked")
async def lesson_locked(cb: types.CallbackQuery):
    """–°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    await cb.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.", show_alert=True)

================================================================================
FILE: bot\routers\__init__.py
================================================================================


================================================================================
FILE: bot\services\admin_cards.py
================================================================================
# bot/services/admin_cards.py

from __future__ import annotations

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

from bot.config import get_settings, local_dt_str, now_utc_str


def render_submission_card(
    pid: int,
    tg_user: types.User,
    *,
    lesson_code: str | None,
    task_code: str | None,
    submitted_at_utc: str | None = None,
    add_open_chat_button: bool = True,
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–∞—á–∏ –î–ó –¥–ª—è –∞–¥–º–∏–Ω–∞ + –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (card_text, reply_markup).
    """
    settings = get_settings()
    submitted_at_utc = submitted_at_utc or now_utc_str()

    title = "üìù <b>–ù–æ–≤–∞—è —Å–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</b>"
    lines: list[str] = [
        "‚Äî" * 24,
        f"üë§ –£—á–µ–Ω–∏–∫: @{tg_user.username or tg_user.id}",
        f"üìò –£—Ä–æ–∫: <b>{lesson_code or '‚Äî'}</b>",
        f"üß© –†–∞–∑–¥–µ–ª: <b>{task_code or '‚Äî'}</b>",
        f"üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{local_dt_str(submitted_at_utc, settings.timezone)}</b>",
        f"üÜî PID: <code>{pid}</code>",
    ]
    card_text = "\n".join([title, *lines])

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"p_ok:{pid}")
    kb.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å", callback_data=f"p_back:{pid}")
    if add_open_chat_button:
        kb.button(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=f"tg://user?id={tg_user.id}")
        kb.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"adm_reply:{tg_user.id}")  # <-- –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    kb.adjust(1)

    return card_text, kb.as_markup()

from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

def help_reply_kb(tg_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"adm_reply:{tg_id}")
    kb.button(text="tg-–ø—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={tg_id}")
    kb.adjust(1)  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    return kb.as_markup()

================================================================================
FILE: bot\services\db.py
================================================================================
# bot/services/db.py
import os, logging, contextlib
from pathlib import Path
import aiosqlite

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ë–î: <repo_root>/data/bot.db (–∏–ª–∏ DB_PATH –∏–∑ .env)
REPO_ROOT = Path(__file__).resolve().parents[2]
DEFAULT_DB = REPO_ROOT / "data" / "bot.db"
DEFAULT_DB.parent.mkdir(parents=True, exist_ok=True)

DB_PATH = os.path.expanduser(os.path.expandvars(os.getenv("DB_PATH") or str(DEFAULT_DB)))
_LOGGED = False  # –ª–æ–≥ –ø—É—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑

async def _prepare_conn(db: aiosqlite.Connection) -> None:
    await db.execute("PRAGMA foreign_keys=ON;")
    await db.execute("PRAGMA journal_mode=WAL;")
    await db.execute("PRAGMA busy_timeout=5000;")

@contextlib.asynccontextmanager
async def get_db():
    global _LOGGED
    if not _LOGGED:
        logging.warning("SQLite path: %s", os.path.abspath(DB_PATH))
        _LOGGED = True
    db = await aiosqlite.connect(DB_PATH, timeout=30)
    try:
        db.row_factory = aiosqlite.Row
        await _prepare_conn(db)
        yield db
    finally:
        await db.close()

# –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–º–∏–≥—Ä–∞—Ü–∏–∏ (–≤—ã–∑–æ–≤–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
async def init_db():
    async with aiosqlite.connect(DB_PATH, timeout=30) as db:
        db.row_factory = aiosqlite.Row
        await _prepare_conn(db)

        # --- —Ç–∞–±–ª–∏—Ü—ã ---
        await db.execute("""
            CREATE TABLE IF NOT EXISTS test_results (
                id INTEGER PRIMARY KEY,
                user_id INTEGER NOT NULL,
                test_code TEXT NOT NULL,
                correct_count INTEGER NOT NULL,
                total_count INTEGER NOT NULL,
                passed INTEGER NOT NULL,
                created_at TEXT NOT NULL,
                updated_at TEXT
            );
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS points (
                id INTEGER PRIMARY KEY,
                student_id INTEGER NOT NULL,
                source TEXT NOT NULL,
                amount INTEGER NOT NULL,
                created_at TEXT NOT NULL
            );
        """)

        # --- –∏–Ω–¥–µ–∫—Å—ã (–∞–Ω—Ç–∏–¥—É–±–ª–∏) ---
        await db.execute("DROP INDEX IF EXISTS ux_test_results;")  # —Å—Ç–∞—Ä—ã–π, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        await db.execute("""
            CREATE UNIQUE INDEX IF NOT EXISTS uq_test_results_user_code
            ON test_results(user_id, test_code);
        """)
        await db.execute("""
            CREATE UNIQUE INDEX IF NOT EXISTS idx_points_student_source
            ON points(student_id, source);
        """)

        await db.commit()


================================================================================
FILE: bot\services\lessons.py
================================================================================
from __future__ import annotations
from pathlib import Path
from typing import List, Tuple
import re

VIDEO_EXT = {".mp4", ".mov", ".m4v", ".avi", ".mkv"}
IMAGE_EXT = {".jpg", ".jpeg", ".png", ".webp", ".gif"}
TEXT_EXT  = {".txt", ".md"}

L_PATTERN = re.compile(r"^L(\d{2,})$")
T_PATTERN = re.compile(r"^T(\d{2,})$")

def list_l_lessons(lessons_root: Path) -> List[str]:
    if not lessons_root.exists():
        return []
    items = []
    for p in lessons_root.iterdir():
        if p.is_dir() and L_PATTERN.match(p.name):
            items.append(p.name)
    # sort by numeric value
    def key_fn(name: str) -> int:
        m = L_PATTERN.match(name)
        return int(m.group(1)) if m else 0
    return sorted(items, key=key_fn)

def next_l_after(lessons_root: Path, last_num: int) -> str | None:
    for name in list_l_lessons(lessons_root):
        m = L_PATTERN.match(name)
        if not m:
            continue
        n = int(m.group(1))
        if n > last_num:
            return name
    return None

def list_t_blocks(lesson_dir: Path) -> List[str]:
    if not lesson_dir.exists():
        return []
    items = []
    for p in lesson_dir.iterdir():
        if p.is_dir() and T_PATTERN.match(p.name):
            items.append(p.name)
    def key_fn(name: str) -> int:
        m = T_PATTERN.match(name)
        return int(m.group(1)) if m else 0
    return sorted(items, key=key_fn)

def sort_materials(t_dir: Path) -> List[Path]:
    files = [p for p in t_dir.iterdir() if p.is_file()]

    # –∫–∞—Ä—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    prio_map: dict[str, int] = {}
    prio_map.update({ext: 0 for ext in VIDEO_EXT})
    prio_map.update({ext: 1 for ext in IMAGE_EXT})
    prio_map.update({ext: 2 for ext in TEXT_EXT})

    # –∫–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∏–º—è —Ñ–∞–π–ª–∞)
    return sorted(
        files,
        key=lambda p: (prio_map.get(p.suffix.lower(), 3), p.name.lower())
    )


def parse_l_num(code: str) -> int | None:
    m = L_PATTERN.match(code)
    return int(m.group(1)) if m else None


================================================================================
FILE: bot\services\motivation.py
================================================================================

from __future__ import annotations
import random

# –ö–æ—Ä–æ—Ç–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–¥ –Ω–∞—à —Å—Ç–∏–ª—å
AFTER_ENROLL = [
    "–°—Ç–∞—Ä—Ç—É–µ–º! üöÄ –°–µ–π—á–∞—Å –≥–ª–∞–≤–Ω–æ–µ ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å. –Ø —Ä—è–¥–æ–º.",
    "–ö—Ä–∞—Å–∞–≤—á–∏–∫(–∞)! –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π ‚Äî —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç. –ü–æ–ª–µ—Ç–µ–ª–∏.",
    "–ì–æ—Ç–æ–≤(–∞) –µ–±–∞—à–∏—Ç—å –ø–æ –¥–µ–ª—É? –ë–µ–∑ –≤–æ–¥—ã, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å üí™",
]

BEFORE_LESSON = [
    "5‚Äì10 –º–∏–Ω—É—Ç —Ä–∞–∑–º–∏–Ω–∫–∏ ‚Äî –∏ –≤ –±–æ–π. –†–æ–≤–Ω–∞—è —Å–ø–∏–Ω–∞, —Ä–∞—Å—Å–ª–∞–±—å –ø–ª–µ—á–∏.",
    "–ü–æ—Å—Ç–∞–≤—å —Ç–∞–π–º–µ—Ä 20 –º–∏–Ω—É—Ç: –∏–≥—Ä–∞–µ—à—å ‚Äî –æ—Ç–¥—ã—Ö–∞–µ—à—å ‚Äî –ø–æ–≤—Ç–æ—Ä.",
    "–ì–ª–∞–≤–Ω–æ–µ ‚Äî —á–∏—Å—Ç—ã–µ –Ω–æ—Ç—ã. –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–¥—ë—Ç –ø–æ–∑–∂–µ.",
]

AFTER_SUBMIT = [
    "–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) ‚Äî —É–∂–µ –º–æ–ª–æ–¥–µ—Ü. –Ø –ø—Ä–æ–≤–µ—Ä—é –∏ –¥–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üî•",
    "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å. –£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ç—ë—Ç, –Ω–µ —Å–±–∞–≤–ª—è–π —Ç–µ–º–ø.",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å. –î–∞–ª—å—à–µ ‚Äî –µ—â—ë –ª—É—á—à–µ. üß†+üé∏",
]

APPROVED = [
    "–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ –ß–∏—Å—Ç–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ. –î–∞–ª—å—à–µ —Å–ª–æ–∂–Ω–µ–µ ‚Äî –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.",
    "–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ê–ø–ø—Ä—É–≤! –ó–∞–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫.",
    "–û—Ç–ª–∏—á–Ω–æ. –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.",
]

def pick(pool: list[str]) -> str:
    return random.choice(pool)



================================================================================
FILE: bot\services\points.py
================================================================================
# bot/services/points.py
from __future__ import annotations

import aiosqlite
from typing import Optional

from bot.services.db import get_db
from bot.config import now_utc_str


async def add(student_id: int, source: str, amount: int) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞; False, –µ—Å–ª–∏ —Ç–∞–∫–æ–π source —É–∂–µ –µ—Å—Ç—å (–∞–Ω—Ç–∏–¥—É–±–ª—å).
    –¢—Ä–µ–±—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å points(student_id, source).
    """
    if not source:
        raise ValueError("source must be non-empty")
    if amount == 0:
        return False

    try:
        async with get_db() as db:
            await db.execute(
                "INSERT INTO points(student_id, source, amount, created_at) VALUES(?,?,?,?)",
                (student_id, source, amount, now_utc_str()),
            )
            await db.commit()
        return True
    except aiosqlite.IntegrityError:
        # –ù–∞—Ä–≤–∞–ª–∏—Å—å –Ω–∞ UNIQUE(student_id, source) ‚Äî –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ.
        return False


async def total(student_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–µ –±–∞–ª–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Å—É–º–º–∞ –ø–æ points.amount).
    """
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COALESCE(SUM(amount),0) AS s FROM points WHERE student_id=?",
            (student_id,),
        )
        row = await cur.fetchone()
    return int(row["s"] if row and row["s"] is not None else 0)


================================================================================
FILE: bot\services\ranks.py
================================================================================
# bot/services/ranks.py
from __future__ import annotations
from typing import Optional, Tuple, List

# –ë–∞–∑–æ–≤–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞ –ø–æ—Ä–æ–≥–æ–≤ (–º–æ–∂–µ—à—å –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ 13 —É—Ä–æ–≤–Ω–µ–π ‚Äú–ü—É—Ç—å –ú–∞—ç—Å—Ç—Ä–æ‚Äù)
# –í–∞–∂–Ω–æ: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø–æ—Ä–æ–≥–∞.
RANKS: List[tuple[int, str]] = [
    (0,    "–ù–æ–≤–∏—á–æ–∫"),
    (200,  "–£—á–µ–Ω–∏–∫ I"),
    (500,  "–£—á–µ–Ω–∏–∫ II"),
    (1000, "–ü—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–π"),
    (1500, "–£–≤–µ—Ä–µ–Ω–Ω—ã–π"),
    (2200, "–û–ø—ã—Ç–Ω—ã–π"),
    (3000, "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),
    (4500, "–ú–∞—ç—Å—Ç—Ä–æ"),       # –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∞–≤–∏–ª–∞–º: 4500+
    (6000, "–ê—Ä—Ö–∏–º–∞—ç—Å—Ç—Ä–æ"),   # —Ç–æ–ø: 6000+
]

def get_rank_by_points(total: int) -> tuple[str, Optional[int]]:
    """
    –ü–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–∞–Ω–≥–∞, —Å–ª–µ–¥—É—é—â–∏–π_–ø–æ—Ä–æ–≥_–∏–ª–∏_None).
    –ü—Ä–∏–º–µ—Ä: (\"–£—á–µ–Ω–∏–∫ II\", 1000) ‚Äî –∑–Ω–∞—á–∏—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å (1000 - total).
    """
    current_thr, current_name = RANKS[0]
    for thr, name in RANKS:
        if total >= thr:
            current_thr, current_name = thr, name
        else:
            break

    next_thr: Optional[int] = None
    for thr, _ in RANKS:
        if thr > current_thr:
            next_thr = thr
            break

    return current_name, next_thr


================================================================================
FILE: bot\services\reminder_worker.py
================================================================================
from __future__ import annotations
import asyncio
from datetime import datetime, timezone, timedelta
from pathlib import Path
from aiogram import Bot

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ---
# –ú—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–∏–Ω –±–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
from bot.services.db import get_db
from bot.config import get_settings, now_utc_str
from bot.services.lessons import list_l_lessons, parse_l_num
from . import points  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è points.py
# ---------------------------


# –¢–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏
REMINDER_TEXTS = [
    "üëã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ù–µ –∑–∞–±—É–¥—å –µ–≥–æ —Å–¥–∞—Ç—å!",
    "‚ö° –ü–æ—Ä–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ ‚Äî –∂–¥—É —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É.",
    "üî• –¢—ã –±–ª–∏–∑–æ–∫ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é. –°–¥–∞–π –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ –±–∞–ª–ª—ã!",
]
# –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî –ø–µ—Ä–µ—Å—Ç–∞—ë–º —Å–ª–∞—Ç—å (–≥–∞—Å–∏–º remind_at)
MAX_REMIND_COUNT = len(REMINDER_TEXTS)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (MVP: 24 —á–∞—Å–∞)
REMIND_INTERVAL_HOURS = 24

# –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ –≤–æ—Ä–∫–µ—Ä–∞
LOOP_SLEEP_SECONDS = 600


async def _send_progress_reminders(bot: Bot) -> None:
    """
    –®–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 'sent'/'returned',
    —É –∫–æ—Ç–æ—Ä—ã—Ö remind_at <= now. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ reminded –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏.
    """
    now_iso = now_utc_str()

    async with get_db() as db:
        cur = await db.execute(
            """
            SELECT p.id, p.student_id, p.remind_at, p.reminded, p.status,
                   s.tg_id
            FROM progress p
            JOIN students s ON s.id = p.student_id
            WHERE p.status IN ('sent','returned')
              AND p.remind_at IS NOT NULL
              AND p.remind_at <= ?
            """,
            (now_iso,),
        )
        rows = await cur.fetchall()

        for r in rows:
            pid = r["id"]
            tg_id = r["tg_id"]
            reminded = (r["reminded"] or 0)

            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É, –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —à–ª—ë–º
            if reminded >= MAX_REMIND_COUNT:
                # –ì–∞—Å–∏–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await db.execute(
                    "UPDATE progress SET remind_at=NULL, updated_at=? WHERE id=?",
                    (now_iso, pid),
                )
                continue

            text = REMINDER_TEXTS[min(reminded, MAX_REMIND_COUNT - 1)]

            try:
                await bot.send_message(tg_id, text)
            except Exception:
                # –Ω–µ –≤–∞–ª–∏–º—Å—è –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö/–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                pass

            # –°–¥–≤–∏–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–∫–Ω–æ + —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            next_at = (
                datetime.now(timezone.utc) + timedelta(hours=REMIND_INTERVAL_HOURS)
            ).replace(microsecond=0).isoformat().replace("+00:00", "Z")

            await db.execute(
                "UPDATE progress SET remind_at=?, reminded=COALESCE(reminded,0)+1, updated_at=? WHERE id=?",
                (next_at, now_iso, pid),
            )

        await db.commit()


async def _notify_waiting_lessons(bot: Bot) -> None:
    """
    –ï—Å–ª–∏ —É —É—á–µ–Ω–∏–∫–∞ —Å—Ç–æ–∏—Ç waiting_lessons=1 –∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π L-—É—Ä–æ–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º.
    –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º last_known_max_lesson.
    """
    settings = get_settings()
    lessons_dir = Path(settings.lessons_path)

    lessons = list_l_lessons(lessons_dir)
    current_max = 0
    for code in lessons:
        n = parse_l_num(code) or 0
        if n > current_max:
            current_max = n

    if current_max <= 0:
        return

    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, tg_id, last_known_max_lesson FROM students WHERE waiting_lessons=1"
        )
        students_rows = await cur.fetchall()

        for s in students_rows:
            last_known = s["last_known_max_lesson"] or 0
            if current_max > last_known:
                try:
                    await bot.send_message(
                        s["tg_id"],
                        "–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —É—Ä–æ–∫–∏! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ üé∏"
                    )
                except Exception:
                    pass

                await db.execute(
                    "UPDATE students SET waiting_lessons=0, last_known_max_lesson=? WHERE id=?",
                    (current_max, s["id"]),
                )

        await db.commit()


async def _auto_approve_submitted_lessons(bot: Bot) -> None:
    now_iso = now_utc_str()

    async with get_db() as db:
        # –ò—â–µ–º —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–¥–∞–Ω—ã –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        # –∏ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã.
        cur = await db.execute(
            """
            SELECT p.id, s.tg_id, s.id AS sid
            FROM progress p
            JOIN students s ON s.id = p.student_id
            WHERE p.status = 'submitted'
              AND p.submitted_at <= datetime('now', '-10 minutes') || 'Z'
            """
        )
        rows = await cur.fetchall()

        for r in rows:
            pid, tg_id, sid = r['id'], r['tg_id'], r['sid']

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'approved'
            await db.execute(
                "UPDATE progress SET status='approved', approved_at=?, updated_at=? WHERE id=?",
                (now_iso, now_iso, pid),
            )

            # –ù–∞—á–∏—Å–ª—è–µ–º 100 –±–∞–ª–ª–æ–≤
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
                await points.add(sid, f"lesson_approved_auto:{pid}", 100)
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
            await bot.send_message(tg_id, "‚úÖ –¢–≤–æ—è —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞. –î–µ—Ä–∂–∏ 100 –±–∞–ª–ª–æ–≤!")

        await db.commit()

async def reminder_loop(bot: Bot):
    # ...
    while True:
        try:
            await _send_progress_reminders(bot)
            # –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ü–∏–∫–ª
            await _auto_approve_submitted_lessons(bot)
            #await _notify_waiting_lessons(bot)
        except Exception as e:
            # ... (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
            print("[reminder_loop] error:", e)

        await asyncio.sleep(LOOP_SLEEP_SECONDS)

================================================================================
FILE: bot\tools\clear.py
================================================================================
import asyncio
import aiosqlite
import logging

from bot.config import get_settings
from bot.services.db import get_db, _prepare_conn # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from .migrate_schema import migrate as migrate_schema # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã
from .migrate_points import run_migration as migrate_points # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–∏–Ω—Ç–æ–≤


async def clear_db():
    settings = get_settings()

    async with aiosqlite.connect(settings.db_path) as db:
        # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ foreign key (–∏–Ω–∞—á–µ –Ω–µ –¥–∞—Å—Ç —É–¥–∞–ª–∏—Ç—å)
        await db.execute("PRAGMA foreign_keys = OFF;")

        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cur = await db.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = await cur.fetchall()

        for (table,) in tables:
            if table == "sqlite_sequence":  # —Å–ª—É–∂–µ–±–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã)
                continue
            await db.execute(f"DELETE FROM {table};")

        # —Å–±—Ä–æ—Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–≤
        await db.execute("DELETE FROM sqlite_sequence;")
        await db.commit()

    logging.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã.")


async def prepare_db():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:
    1. –û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏.
    """
    settings = get_settings()
    db_path = settings.db_path

    # –®–∞–≥ 1: –æ—á–∏—Å—Ç–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–µ—é—â—É—é—Å—è –ª–æ–≥–∏–∫—É)
    try:
        await clear_db()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ë–î: {e}")
        # –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã —Ö–æ—Ç—è –±—ã –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        pass

    # –®–∞–≥ 2: –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º)
    logging.info("üîß –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã...")
    try:
        await migrate_schema()
        logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return

    logging.info("üîß –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é —Ç–æ—á–µ–∫ –∏ —Ä–∞–Ω–≥–æ–≤...")
    try:
        await migrate_points()
        logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –∏ —Ä–∞–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –∏ —Ä–∞–Ω–≥–æ–≤: {e}")
        return

    logging.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∫ —Ä–∞–±–æ—Ç–µ!")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(prepare_db())

================================================================================
FILE: bot\tools\migrate_add_course_code.py
================================================================================
# bot/tools/migrate_add_course_code.py
import asyncio
import aiosqlite
from bot.config import get_settings


async def column_exists(db: aiosqlite.Connection, table: str, column: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    try:
        cur = await db.execute(f"PRAGMA table_info({table})")
        cols = {row[1] for row in await cur.fetchall()}
        return column in cols
    except aiosqlite.Error:
        return False


async def main():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É course_code –≤ —Ç–∞–±–ª–∏—Ü—ã payments –∏ payment_requests."""
    settings = get_settings()
    db_path = settings.db_path
    print(f"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ë–î: {db_path}")

    async with aiosqlite.connect(db_path) as db:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É payments
        if not await column_exists(db, "payments", "course_code"):
            print("–î–æ–±–∞–≤–ª—è—é `course_code` –≤ —Ç–∞–±–ª–∏—Ü—É `payments`...")
            await db.execute("ALTER TABLE payments ADD COLUMN course_code TEXT;")
            print("...–≥–æ—Ç–æ–≤–æ.")
        else:
            print("–ö–æ–ª–æ–Ω–∫–∞ `course_code` –≤ `payments` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É payment_requests
        if not await column_exists(db, "payment_requests", "course_code"):
            print("–î–æ–±–∞–≤–ª—è—é `course_code` –≤ —Ç–∞–±–ª–∏—Ü—É `payment_requests`...")
            await db.execute("ALTER TABLE payment_requests ADD COLUMN course_code TEXT;")
            print("...–≥–æ—Ç–æ–≤–æ.")
        else:
            print("–ö–æ–ª–æ–Ω–∫–∞ `course_code` –≤ `payment_requests` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        await db.commit()
        print("–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    asyncio.run(main())

================================================================================
FILE: bot\tools\migrate_fix.py
================================================================================
import asyncio
import aiosqlite
from bot.config import get_settings

NEEDED_STUDENTS_COLS = {
    "approved": "INTEGER NOT NULL DEFAULT 0",
    "rank": "TEXT",
    "rank_points": "INTEGER NOT NULL DEFAULT 0",
    "updated_at": "TEXT",
}

# bot/tools/migrate_fix.py

CREATE_INDEX_SQL = [
    # points: –∞–Ω—Ç–∏–¥—É–±–ª—å –±–æ–Ω—É—Å–æ–≤ [cite: 3]
    "CREATE UNIQUE INDEX IF NOT EXISTS ux_points_student_source ON points(student_id, source)",
    # progress: —É—Å–∫–æ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏/–ø–æ–¥–±–æ—Ä –æ—á–µ—Ä–µ–¥–∏ [cite: 2]
    "CREATE INDEX IF NOT EXISTS idx_progress_status_remind ON progress(status, remind_at)",

    # –ù–û–í–´–ï –ò–ù–î–ï–ö–°–´:
    # –£—Å–∫–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ `tg_id` –≤ —Ç–∞–±–ª–∏—Ü–µ `students`
    "CREATE UNIQUE INDEX IF NOT EXISTS idx_students_tg_id ON students(tg_id)",
    # –£—Å–∫–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    "CREATE INDEX IF NOT EXISTS idx_progress_status ON progress(status)",
    # –£—Å–∫–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    "CREATE INDEX IF NOT EXISTS idx_progress_student ON progress(student_id)",
    # –£—Å–∫–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Å—Ç—É–¥–µ–Ω—Ç—É
    "CREATE INDEX IF NOT EXISTS idx_progress_student_status ON progress(student_id, status)"
]

async def ensure_students_columns(db):
    # —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cur = await db.execute("PRAGMA table_info(students)")
    cols = {row[1] for row in await cur.fetchall()}

    for col, ddl in NEEDED_STUDENTS_COLS.items():
        if col not in cols:
            await db.execute(f"ALTER TABLE students ADD COLUMN {col} {ddl}")

async def ensure_indexes(db):
    for sql in CREATE_INDEX_SQL:
        await db.execute(sql)

async def main():
    settings = get_settings()
    async with aiosqlite.connect(settings.db_path) as db:
        db.row_factory = aiosqlite.Row
        await ensure_students_columns(db)
        await ensure_indexes(db)
        await db.commit()
    print("OK: schema fixed")

if __name__ == "__main__":
    asyncio.run(main())


================================================================================
FILE: bot\tools\migrate_points.py
================================================================================
# bot/tools/migrate_points_ranks.py
from __future__ import annotations

import asyncio
from typing import Iterable

import aiosqlite

# –ë–µ—Ä—ë–º –ø—É—Ç—å –∫ –ë–î –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
from bot.config import get_settings

S = get_settings()


async def column_exists(db: aiosqlite.Connection, table: str, column: str) -> bool:
    cur = await db.execute(f"PRAGMA table_info({table})")
    rows = await cur.fetchall()
    cols = {r[1] for r in rows}  # r[1] = name
    return column in cols


async def table_exists(db: aiosqlite.Connection, table: str) -> bool:
    cur = await db.execute(
        "SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,)
    )
    return await cur.fetchone() is not None


async def index_exists(db: aiosqlite.Connection, index: str) -> bool:
    cur = await db.execute(
        "SELECT name FROM sqlite_master WHERE type='index' AND name=?", (index,)
    )
    return await cur.fetchone() is not None


async def ensure_points_table(db: aiosqlite.Connection) -> None:
    # 1) –¢–∞–±–ª–∏—Ü–∞ points
    await db.execute(
        """
        CREATE TABLE IF NOT EXISTS points (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            source TEXT NOT NULL,
            amount INTEGER NOT NULL,
            created_at TEXT NOT NULL
        )
        """
    )

    # 2) –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (student_id, source)
    if not await index_exists(db, "idx_points_student_source"):
        await db.execute(
            "CREATE UNIQUE INDEX idx_points_student_source ON points(student_id, source)"
        )

    # 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ò–Ω–¥–µ–∫—Å –ø–æ student_id –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è SUM
    if not await index_exists(db, "idx_points_student"):
        await db.execute("CREATE INDEX idx_points_student ON points(student_id)")


async def ensure_students_rank_columns(db: aiosqlite.Connection) -> None:
    # –î–æ–±–∞–≤–ª—è–µ–º rank / rank_points, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not await column_exists(db, "students", "rank"):
        await db.execute("ALTER TABLE students ADD COLUMN rank TEXT")

    if not await column_exists(db, "students", "rank_points"):
        await db.execute("ALTER TABLE students ADD COLUMN rank_points INTEGER DEFAULT 0")


async def run_migration() -> None:
    print(f"[migrate] DB path: {S.db_path}")

    async with aiosqlite.connect(S.db_path) as db:
        db.row_factory = aiosqlite.Row

        # sanity: students –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        if not await table_exists(db, "students"):
            raise SystemExit(
                "–¢–∞–±–ª–∏—Ü–∞ 'students' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ –ë–î."
            )

        await ensure_points_table(db)
        await ensure_students_rank_columns(db)

        await db.commit()

    print("[migrate] OK: points/–∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ), –∫–æ–ª–æ–Ω–∫–∏ rank/rank_points –¥–æ–±–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ).")


if __name__ == "__main__":
    asyncio.run(run_migration())


================================================================================
FILE: bot\tools\migrate_schema.py
================================================================================
# -*- coding: utf-8 -*-
"""
Maestro Bot migration script (SQLite).
Creates tables / adds missing columns / adds indexes idempotently.
Generated: 2025-08-23T15:31:29.721080Z

Usage:
  DB_PATH=./data/bot.db python migrate_maestro_schema.py
"""
import os
import sqlite3
from pathlib import Path

DB_PATH = os.getenv("DB_PATH", "./data/bot.db")

def execute(cur, sql):
    cur.execute(sql)

def table_exists(cur, name: str) -> bool:
    cur.execute("SELECT 1 FROM sqlite_master WHERE type='table' AND name=?", (name,))
    return cur.fetchone() is not None

def index_exists(cur, name: str) -> bool:
    cur.execute("SELECT 1 FROM sqlite_master WHERE type='index' AND name=? ", (name,))
    return cur.fetchone() is not None

def columns(cur, table: str) -> set[str]:
    cur.execute(f"PRAGMA table_info({table})")
    return {row[1] for row in cur.fetchall()}

def add_column(cur, table: str, ddl: str):
    print(f"[migrate] {table}: add column {ddl}")
    cur.execute(f"ALTER TABLE {table} ADD COLUMN {ddl}")

def migrate_students(cur):
    if not table_exists(cur, "students"):
        execute(cur, """
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            full_name TEXT,
            phone TEXT,
            age INTEGER,
            birth_date TEXT,
            has_guitar INTEGER DEFAULT 0,
            experience_months INTEGER DEFAULT 0,
            goal TEXT,
            approved INTEGER DEFAULT 0,
            waiting_lessons INTEGER DEFAULT 0,
            last_known_max_lesson INTEGER DEFAULT 0,
            rank TEXT,
            rank_points INTEGER DEFAULT 0,
            created_at TEXT,
            updated_at TEXT,
            last_seen TEXT
        );
        """)
    cols = columns(cur, "students")
    need = {
        "approved": "INTEGER DEFAULT 0",
        "waiting_lessons": "INTEGER DEFAULT 0",
        "last_known_max_lesson": "INTEGER DEFAULT 0",
        "rank": "TEXT",
        "rank_points": "INTEGER DEFAULT 0",
        "updated_at": "TEXT",
        "last_seen": "TEXT",
    }
    for col, ddl in need.items():
        if col not in cols:
            add_column(cur, "students", f"{col} {ddl}")
    for idx_name, idx_sql in [
        ("idx_students_tg_id", "CREATE UNIQUE INDEX idx_students_tg_id ON students(tg_id)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_progress(cur):
    if not table_exists(cur, "progress"):
        execute(cur, """
        CREATE TABLE progress (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            lesson_id INTEGER,
            lesson_code TEXT,
            task_code TEXT,
            status TEXT NOT NULL,
            sent_at TEXT,
            returned_at TEXT,
            submitted_at TEXT,
            approved_at TEXT,
            deadline_at TEXT,
            remind_at TEXT,
            reminded INTEGER DEFAULT 0,
            updated_at TEXT,
            FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    else:
        cols = columns(cur, "progress")
        if "lesson_id" not in cols: add_column(cur, "progress", "lesson_id INTEGER")
        if "lesson_code" not in cols: add_column(cur, "progress", "lesson_code TEXT")
        if "task_code" not in cols: add_column(cur, "progress", "task_code TEXT")
        if "returned_at" not in cols: add_column(cur, "progress", "returned_at TEXT")
        if "submitted_at" not in cols: add_column(cur, "progress", "submitted_at TEXT")
        if "approved_at" not in cols: add_column(cur, "progress", "approved_at TEXT")
        if "deadline_at" not in cols: add_column(cur, "progress", "deadline_at TEXT")
        if "remind_at" not in cols: add_column(cur, "progress", "remind_at TEXT")
        if "reminded" not in cols: add_column(cur, "progress", "reminded INTEGER DEFAULT 0")
        if "updated_at" not in cols: add_column(cur, "progress", "updated_at TEXT")
    for idx_name, idx_sql in [
        ("idx_progress_student", "CREATE INDEX idx_progress_student ON progress(student_id)"),
        ("idx_progress_status", "CREATE INDEX idx_progress_status ON progress(status)"),
        ("idx_progress_status_remind", "CREATE INDEX idx_progress_status_remind ON progress(status, remind_at)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)


def migrate_payments(cur):
    if not table_exists(cur, "payments"):
        execute(cur, """
        CREATE TABLE payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            amount INTEGER NOT NULL,
            method TEXT,
            note TEXT,
            paid_at TEXT,
            created_at TEXT,
            FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    else:
        cols = columns(cur, "payments")
        if "method" not in cols: add_column(cur, "payments", "method TEXT")
        if "note" not in cols: add_column(cur, "payments", "note TEXT")
        if "created_at" not in cols: add_column(cur, "payments", "created_at TEXT")
    for idx_name, idx_sql in [
        ("idx_payments_paid_at", "CREATE INDEX idx_payments_paid_at ON payments(paid_at)"),
        ("idx_payments_student", "CREATE INDEX idx_payments_student ON payments(student_id)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_payment_requests(cur):
    if not table_exists(cur, "payment_requests"):
        execute(cur, """
        CREATE TABLE payment_requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            amount INTEGER NOT NULL,
            status TEXT NOT NULL,
            created_at TEXT,
            resolved_at TEXT,
            FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    for idx_name, idx_sql in [
        ("idx_payreq_status", "CREATE INDEX idx_payreq_status ON payment_requests(status)"),
        ("idx_payreq_student", "CREATE INDEX idx_payreq_student ON payment_requests(student_id)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_help_requests(cur):
    if not table_exists(cur, "help_requests"):
        execute(cur, """
        CREATE TABLE help_requests(
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          student_id INTEGER NOT NULL,
          status TEXT NOT NULL,
          created_at TEXT NOT NULL,
          answered_at TEXT,
          FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE
        );
        """)
    for idx_name, idx_sql in [
        ("idx_help_requests_student", "CREATE INDEX idx_help_requests_student ON help_requests(student_id)"),
        ("idx_help_requests_status", "CREATE INDEX idx_help_requests_status  ON help_requests(status)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate_test_results(cur):
    if not table_exists(cur, "test_results"):
        print("[migrate] create table test_results")
        execute(cur, """
        CREATE TABLE test_results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            test_code TEXT NOT NULL,
            correct_count INTEGER NOT NULL,
            total_count INTEGER NOT NULL,
            passed INTEGER NOT NULL,
            created_at TEXT NOT NULL,
            UNIQUE(user_id, test_code)
        );
        """)
    else:
        need = {
            "user_id": "INTEGER",
            "test_code": "TEXT",
            "correct_count": "INTEGER",
            "total_count": "INTEGER",
            "passed": "INTEGER",
            "created_at": "TEXT",
        }
        cols = columns(cur, "test_results")
        for col, ddl in need.items():
            if col not in cols:
                add_column(cur, "test_results", f"{col} {ddl}")
    for idx_name, idx_sql in [
        ("idx_test_results_user", "CREATE INDEX idx_test_results_user ON test_results(user_id)"),
        ("idx_test_results_user_code_time", "CREATE INDEX idx_test_results_user_code_time ON test_results(user_id, test_code, created_at)"),
    ]:
        if not index_exists(cur, idx_name):
            execute(cur, idx_sql)

def migrate():
    Path(os.path.dirname(DB_PATH) or ".").mkdir(parents=True, exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    try:
        cur = conn.cursor()
        execute(cur, "PRAGMA foreign_keys = ON;")
        migrate_students(cur)
        migrate_progress(cur)
        migrate_payments(cur)
        migrate_payment_requests(cur)
        migrate_help_requests(cur)
        migrate_test_results(cur) # <-- –î–û–ë–ê–í–õ–ï–ù–û
        conn.commit()
    finally:
        conn.close()

if __name__ == "__main__":
    migrate()

================================================================================
FILE: bot\tools\migrate_unified.py
================================================================================
import asyncio
import os
from pathlib import Path

import aiosqlite
from dotenv import load_dotenv

load_dotenv()

DB_PATH = (os.getenv("DB_PATH") or "maestro.db").strip() or "maestro.db"


async def table_exists(db: aiosqlite.Connection, name: str) -> bool:
    cur = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (name,))
    return await cur.fetchone() is not None


async def column_exists(db: aiosqlite.Connection, table: str, column: str) -> bool:
    cur = await db.execute(f"PRAGMA table_info({table})")
    cols = [r[1] for r in await cur.fetchall()]
    return column in cols


async def index_exists(db: aiosqlite.Connection, name: str) -> bool:
    cur = await db.execute("SELECT name FROM sqlite_master WHERE type='index' AND name=?", (name,))
    return await cur.fetchone() is not None


async def migrate_students(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "students"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS students(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              tg_id INTEGER UNIQUE,
              username TEXT,
              created_at TEXT,
              first_name TEXT,
              last_name TEXT,
              birth_date TEXT,
              age INTEGER,
              has_guitar INTEGER DEFAULT 0,
              experience_months INTEGER DEFAULT 0,
              goal TEXT,
              phone TEXT,
              onboarding_done INTEGER DEFAULT 0,
              consent INTEGER DEFAULT 0,
              waiting_lessons INTEGER DEFAULT 0,
              last_known_max_lesson INTEGER DEFAULT 0,
              last_seen TEXT
            );
            """
        )
    else:
        cols = [
            ("tg_id", "INTEGER"),
            ("username", "TEXT"),
            ("created_at", "TEXT"),
            ("first_name", "TEXT"),
            ("last_name", "TEXT"),
            ("birth_date", "TEXT"),
            ("age", "INTEGER"),
            ("has_guitar", "INTEGER"),
            ("experience_months", "INTEGER"),
            ("goal", "TEXT"),
            ("phone", "TEXT"),
            ("onboarding_done", "INTEGER"),
            ("consent", "INTEGER"),
            ("waiting_lessons", "INTEGER"),
            ("last_known_max_lesson", "INTEGER"),
            ("last_seen", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "students", name):
                if name in {"has_guitar", "experience_months", "onboarding_done", "consent",
                            "waiting_lessons", "last_known_max_lesson"}:
                    await db.execute(f"ALTER TABLE students ADD COLUMN {name} {typ} DEFAULT 0")
                else:
                    await db.execute(f"ALTER TABLE students ADD COLUMN {name} {typ}")
    await db.commit()


async def migrate_progress(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "progress"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS progress(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              lesson_id INTEGER,
              lesson_code TEXT,
              task_code TEXT,
              status TEXT,
              sent_at TEXT,
              submitted_at TEXT,
              returned_at TEXT,
              approved_at TEXT,
              deadline_at TEXT,
              remind_at TEXT,
              reminded INTEGER DEFAULT 0,
              updated_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("lesson_id", "INTEGER"),
            ("lesson_code", "TEXT"),
            ("task_code", "TEXT"),
            ("status", "TEXT"),
            ("sent_at", "TEXT"),
            ("submitted_at", "TEXT"),
            ("returned_at", "TEXT"),
            ("approved_at", "TEXT"),
            ("deadline_at", "TEXT"),
            ("remind_at", "TEXT"),
            ("reminded", "INTEGER"),
            ("updated_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "progress", name):
                if name == "reminded":
                    await db.execute(f"ALTER TABLE progress ADD COLUMN {name} {typ} DEFAULT 0")
                else:
                    await db.execute(f"ALTER TABLE progress ADD COLUMN {name} {typ}")

    if not await index_exists(db, "idx_progress_student_status"):
        await db.execute("CREATE INDEX idx_progress_student_status ON progress(student_id, status)")
    if not await index_exists(db, "idx_progress_remind"):
        await db.execute("CREATE INDEX idx_progress_remind ON progress(remind_at)")
    if not await index_exists(db, "idx_progress_updated"):
        await db.execute("CREATE INDEX idx_progress_updated ON progress(updated_at)")
    await db.commit()


async def migrate_payments(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "payments"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS payments(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              amount INTEGER NOT NULL,
              method TEXT,
              note TEXT,
              paid_at TEXT NOT NULL,
              created_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("amount", "INTEGER"),
            ("method", "TEXT"),
            ("note", "TEXT"),
            ("paid_at", "TEXT"),
            ("created_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "payments", name):
                await db.execute(f"ALTER TABLE payments ADD COLUMN {name} {typ}")
    if not await index_exists(db, "idx_payments_paid_at"):
        await db.execute("CREATE INDEX idx_payments_paid_at ON payments(paid_at)")
    await db.commit()


async def migrate_payment_requests(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "payment_requests"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS payment_requests(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              amount INTEGER,
              status TEXT,
              created_at TEXT,
              resolved_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("amount", "INTEGER"),
            ("status", "TEXT"),
            ("created_at", "TEXT"),
            ("resolved_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "payment_requests", name):
                await db.execute(f"ALTER TABLE payment_requests ADD COLUMN {name} {typ}")
    await db.commit()


async def migrate_points(db: aiosqlite.Connection) -> None:
    if not await table_exists(db, "points"):
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS points(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              student_id INTEGER,
              source TEXT,
              amount INTEGER,
              created_at TEXT
            );
            """
        )
    else:
        cols = [
            ("student_id", "INTEGER"),
            ("source", "TEXT"),
            ("amount", "INTEGER"),
            ("created_at", "TEXT"),
        ]
        for name, typ in cols:
            if not await column_exists(db, "points", name):
                await db.execute(f"ALTER TABLE points ADD COLUMN {name} {typ}")
    await db.commit()


async def migrate_views(db: aiosqlite.Connection) -> None:
    return


async def migrate():
    db_path = Path(DB_PATH)
    db_path.parent.mkdir(parents=True, exist_ok=True)

    async with aiosqlite.connect(db_path.as_posix()) as db:
        await db.execute("PRAGMA foreign_keys = ON;")
        await migrate_students(db)
        await migrate_progress(db)
        await migrate_payments(db)
        await migrate_payment_requests(db)
        await migrate_points(db)
        await migrate_views(db)

    print("[OK] –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(migrate())


================================================================================
FILE: bot\__pycache__\config.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\__pycache__\main.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\tools\__pycache__\clear.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\tools\__pycache__\migrate_fix.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\tools\__pycache__\migrate_points.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\tools\__pycache__\migrate_schema.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\tools\__pycache__\migrate_unified.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\tests\progress.py
================================================================================
# bot/services/tests/progress.py
from typing import Literal
from aiogram import Bot, types
from bot.services.db import get_db
from bot.services.points import add
from bot.services.tests.registry import TestMeta
from bot.config import get_settings, now_utc_str

Status = Literal["locked", "available", "passed"]

PASS_THRESHOLD_PCT = 80
PASS_REWARD = 50
COOLDOWN_HOURS = 24  # 1 –ø–æ–ø—ã—Ç–∫–∞/—Å—É—Ç–∫–∏ (0 ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å)


def is_passed(correct: int, total: int) -> bool:
    return total > 0 and correct * 100 >= total * PASS_THRESHOLD_PCT


def is_unlocked(user_passed: set[str], depends_on: str | None) -> bool:
    return True if not depends_on else (depends_on in user_passed)


async def _get_student_row_by_tg_id(tg_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç row —Å –ø–æ–ª—è–º–∏ id, approved –ø–æ tg_id –∏–ª–∏ None."""
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, COALESCE(approved,0) AS approved FROM students WHERE tg_id=?",
            (tg_id,)
        )
        return await cur.fetchone()


async def user_passed_codes(user_tg_id: int) -> set[str]:
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (user_tg_id,))
        s = await cur.fetchone()
        if not s: return set()
        cur = await db.execute(
            "SELECT test_code FROM test_results WHERE user_id=? AND passed=1", (s["id"],)
        )
        rows = await cur.fetchall()
    return {r[0] for r in rows}


async def write_result_and_reward(
    user_id: int,
    meta: TestMeta,
    correct_count: int,
    total_count: int,
    tg_user: types.User,
    bot: Bot,
):
    passed = is_passed(correct_count, total_count)
    now = now_utc_str()

    # 1) –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ tg_id
    student = await _get_student_row_by_tg_id(user_id)
    if not student:
        return
    student_id = student["id"]
    approved = int(student["approved"])

    # 2) –∞–ø—Å–µ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ (student_id, meta.code)
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id FROM test_results WHERE user_id=? AND test_code=?",
            (student_id, meta.code)
        )
        existing = await cur.fetchone()

        if existing:
            await db.execute(
                "UPDATE test_results "
                "SET correct_count=?, total_count=?, passed=?, updated_at=? "
                "WHERE id=?",
                (correct_count, total_count, int(passed), now, existing["id"])
            )
        else:
            await db.execute(
                "INSERT INTO test_results "
                "(user_id, test_code, correct_count, total_count, passed, created_at, updated_at) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (student_id, meta.code, correct_count, total_count, int(passed), now, now)
            )
        await db.commit()

    # 3) –µ—Å–ª–∏ –ø—Ä–æ—à—ë–ª –∏ –æ–¥–æ–±—Ä–µ–Ω ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º +50 –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if passed and approved:
        # –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: (student_id, source, amount)
        await add(student_id, f"–¢–µ—Å—Ç: {meta.title}", PASS_REWARD)


================================================================================
FILE: bot\services\tests\registry.py
================================================================================
# bot/services/tests/registry.py
from dataclasses import dataclass

@dataclass(frozen=True)
class TestMeta:
    code: str
    title: str
    file: str  # –ø—É—Ç—å –¥–æ JSON
    depends_on: str | None = None  # –∫–æ–¥ —Ç–µ—Å—Ç–∞-–ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞

TESTS: list[TestMeta] = [
    TestMeta(code="theory_1", title="1 —Ç–µ—Å—Ç", file="bot/data/tests/theory_1.json", depends_on=None),
    TestMeta(code="theory_2", title="2 —Ç–µ—Å—Ç", file="bot/data/tests/theory_2.json", depends_on="theory_1"),
    TestMeta(code="theory_3", title="3 —Ç–µ—Å—Ç", file="bot/data/tests/theory_3.json", depends_on="theory_2"),
    TestMeta(code="theory_4", title="4 —Ç–µ—Å—Ç", file="bot/data/tests/theory_4.json", depends_on="theory_3"),
    TestMeta(code="theory_5", title="5 —Ç–µ—Å—Ç", file="bot/data/tests/theory_5.json", depends_on="theory_4"),
    TestMeta(code="theory_6", title="6 —Ç–µ—Å—Ç", file="bot/data/tests/theory_6.json", depends_on="theory_5"),
    TestMeta(code="theory_7", title="7 —Ç–µ—Å—Ç", file="bot/data/tests/theory_7.json", depends_on="theory_6"),
    TestMeta(code="theory_8", title="8 —Ç–µ—Å—Ç", file="bot/data/tests/theory_8.json", depends_on="theory_7"),
    TestMeta(code="theory_9", title="9 —Ç–µ—Å—Ç", file="bot/data/tests/theory_9.json", depends_on="theory_8"),
    TestMeta(code="theory_10", title="10 —Ç–µ—Å—Ç", file="bot/data/tests/theory_10.json", depends_on="theory_9"),
]

def get_tests():
    return TESTS

def get_test(code: str) -> TestMeta | None:
    for t in TESTS:
        if t.code == code:
            return t
    return None

================================================================================
FILE: bot\services\tests\__init__.py
================================================================================


================================================================================
FILE: bot\services\__pycache__\admin_cards.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\__pycache__\db.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\__pycache__\lessons.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\__pycache__\motivation.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\__pycache__\points.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\__pycache__\ranks.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\__pycache__\reminder_worker.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\tests\__pycache__\progress.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\tests\__pycache__\registry.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\services\tests\__pycache__\__init__.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\tests\deeplink.py
================================================================================
# bot/routers/tests/deeplink.py
from aiogram import Router, types
from aiogram.fsm.context import FSMContext  # <-- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from bot.services.tests.registry import get_test
from bot.routers.tests.engine import start_test_quiz

router = Router(name="deeplink")

@router.message(lambda m: m.text and m.text.startswith("/start"))
async def start_with_payload(m: types.Message, state: FSMContext):  # <-- –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä state
    parts = m.text.split(maxsplit=1)
    payload = parts[1] if len(parts) > 1 else ""
    meta = get_test(payload)
    if meta:
        await start_test_quiz(m, m.from_user.id, meta, state)  # <-- –ü–µ—Ä–µ–¥–∞—á–∞ state
    else:
        await m.answer("–ñ–º–∏ ¬´üß† –¢–µ—Å—Ç—ã –ø–æ —Ç–µ–æ—Ä–∏–∏¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

================================================================================
FILE: bot\routers\tests\engine.py
================================================================================
# bot/routers/tests/engine.py

from __future__ import annotations
import logging
import os
import random
import asyncio
import contextlib
import json
from collections import defaultdict
from html import escape as h
from pathlib import Path
from types import SimpleNamespace
from typing import Any, Dict, List, Optional, Tuple

from aiogram import F, Router, types
from aiogram.client.bot import Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.keyboards.student import student_main_kb
from bot.routers.tests.state import TestsFlow
from bot.services.tests.progress import (
    write_result_and_reward,
    is_passed,
    PASS_THRESHOLD_PCT,
)
from bot.services.tests.registry import TestMeta
from bot.config import get_settings

router = Router(name="tests_engine")
log = logging.getLogger(__name__)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò ======================
TIME_PER_Q = 30  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å (Telegram open_period –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 5..600)

# ===================== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ======================
# user_id -> {chat_id, tg_user, meta, qs, idx, correct, last_poll_msg_id, timer_task, state}
SESSIONS: Dict[int, Dict[str, Any]] = {}

# poll_id -> (user_id, idx)
POLL_MAP: Dict[str, tuple[int, int]] = {}

# –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ poll (answer/closed/–Ω–∞—à —Ç–∞–π–º–µ—Ä)
FINALIZED_POLLS: set[str] = set()

# –ª–æ–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥–æ–Ω–æ–∫ –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —à–∞–≥
USER_LOCKS: Dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)

# –ª–∏–º–∏—Ç—ã Telegram –¥–ª—è send_poll
MAX_Q   = 300   # –¥–ª–∏–Ω–∞ question
MAX_OPT = 100   # –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
MAX_EXP = 200   # –¥–ª–∏–Ω–∞ explanation


# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ======================

def _kb_for_question() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º: —Ç–æ–ª—å–∫–æ '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç'."""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚õî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", callback_data="quiz_cancel")]]
    )


# --- –£–î–ê–õ–Å–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
# def _get_admin_ids() -> list[int]:
#     ids: list[int] = []
#     ... (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ ID –∏–∑ .env)
#     return ids

def _load_questions(meta: TestMeta) -> List[SimpleNamespace]:
    """–ß–∏—Ç–∞–µ–º JSON meta.file –∏ –æ—Ç–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ {q, options, correct_idx, why?}."""
    p = Path(meta.file)
    if not p.exists():
        raise FileNotFoundError(f"Test file not found: {p}")

    raw = json.loads(p.read_text(encoding="utf-8"))

    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
    # 1) {"questions": [...]}  2) [...]
    if isinstance(raw, list):
        items = raw
    elif isinstance(raw, dict):
        items = raw.get("questions") or raw.get("items") or raw.get("data")
    else:
        items = None

    if not isinstance(items, list) or not items:
        raise ValueError(f"{p} has no questions array")

    out: List[SimpleNamespace] = []
    for i, it in enumerate(items, 1):
        q = it.get("q")
        options = it.get("options")
        correct_idx = it.get("correct_idx")
        why = it.get("why")
        if not isinstance(q, str) or not q.strip():
            raise ValueError(f"{p}: question #{i} has empty 'q'")
        if not isinstance(options, list) or len(options) < 2:
            raise ValueError(f"{p}: question #{i} has invalid 'options'")
        if not isinstance(correct_idx, int) or not (0 <= correct_idx < len(options)):
            raise ValueError(f"{p}: question #{i} has invalid 'correct_idx'")
        out.append(SimpleNamespace(q=q, options=options, correct_idx=correct_idx, why=why))
    return out


def shuffle_options(options: List[str], correct_idx: int) -> Tuple[List[str], int]:
    """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ."""
    pairs = list(enumerate(options))
    random.shuffle(pairs)
    new_options = [t for _, t in pairs]
    new_correct_idx = next(i for i, (j, _) in enumerate(pairs) if j == correct_idx)
    return new_options, new_correct_idx


def _normalize_poll(prefix: str,
                    question: str,
                    options: List[str],
                    explanation: Optional[str]
                   ) -> Tuple[str, List[str], Optional[str]]:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞/–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤/–æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram, –¥–µ–ª–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.
    """
    # –í–æ–ø—Ä–æ—Å (—É—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–µ—Ñ–∏–∫—Å–∞ "–í–æ–ø—Ä–æ—Å X/Y:\n")
    body = (question or "").strip()
    room = MAX_Q - len(prefix)
    if room < 1:
        room = 1
    if len(body) > room:
        body = body[:room - 1].rstrip() + "‚Ä¶"
    q_text = prefix + body

    # –í–∞—Ä–∏–∞–Ω—Ç—ã: <=100, –±–µ–∑ –ø—É—Å—Ç—ã—Ö, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
    out: List[str] = []
    seen: set[str] = set()
    for i, opt in enumerate(options or []):
        s = (opt or "").strip() or f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}"
        if len(s) > MAX_OPT:
            s = s[:MAX_OPT - 1].rstrip() + "‚Ä¶"
        base, k = s, 1
        while s in seen:
            suffix = f" ({k})"
            s = base[:MAX_OPT - len(suffix)] + suffix
            k += 1
        seen.add(s)
        out.append(s)

    # Explanation: <=200
    exp = None
    if explanation:
        exp = explanation.strip()
        if len(exp) > MAX_EXP:
            exp = exp[:MAX_EXP - 1].rstrip() + "‚Ä¶"

    if not (2 <= len(out) <= 10):
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(out)} (–Ω—É–∂–Ω–æ 2‚Äì10)")

    return q_text, out, exp


def _compose_explanation(q: SimpleNamespace) -> Optional[str]:
    """
    –°–æ–±–∏—Ä–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
    - —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–≤ –¢–ï–ö–£–©–ï–ú –ø–æ—Ä—è–¥–∫–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    - –±–ª–æ–∫ '–ü–æ—á–µ–º—É' –∏–∑ _explanation (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ why
    """
    try:
        correct_text = q.options[q.correct_idx]
    except Exception:
        return None
    why = getattr(q, "_explanation", None) or getattr(q, "why", None)
    parts = [f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}"]
    if isinstance(why, str) and why.strip():
        parts.append(f"–ü–æ—á–µ–º—É: {why.strip()}")
    return "\n".join(parts)


async def _deadline_watch(
    user_id: int,
    poll_id: str,
    chat_id: int,
    idx_at_start: int,
    seconds: int,
    bot: Bot,
) -> None:
    """–°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º–µ—Ä: –≤—Ä–µ–º—è –≤—ã—à–ª–æ ‚Üí —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Üí –¥–∞–ª–µ–µ/—Ñ–∏–Ω–∏—à."""
    try:
        await asyncio.sleep(seconds + 0.5)
    except asyncio.CancelledError:
        return

    lock = USER_LOCKS[user_id]
    async with lock:
        st = SESSIONS.get(user_id)
        if not st:
            return
        if st["idx"] != idx_at_start:
            return
        if poll_id in FINALIZED_POLLS:
            return
        FINALIZED_POLLS.add(poll_id)
        POLL_MAP.pop(poll_id, None)

        msg_id = st.get("last_poll_msg_id")
        if msg_id:
            with contextlib.suppress(Exception):
                await bot.stop_poll(chat_id, msg_id)

        await _finalize_step(user_id, idx_at_start, is_correct=False, bot=bot)
        st.pop("timer_task", None)


# ===================== –û–°–ù–û–í–ù–û–ô –ü–û–¢–û–ö –í–û–ü–†–û–°–ê ======================

async def _send_q(user_id: int, bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (poll) + –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞."""
    st = SESSIONS[user_id]
    idx: int = st["idx"]
    qs = st["qs"]
    q = qs[idx]
    chat_id = st["chat_id"]

    kb = _kb_for_question()

    # 1) –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ (–∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ)
    opts_shuf, cid = shuffle_options(q.options, q.correct_idx)

    # 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram
    prefix = f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(qs)}:\n"
    q_text, opts_norm, expl = _normalize_poll(prefix, q.q, opts_shuf, getattr(q, "why", None))

    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–ß–ù–û —Ç–æ, —á—Ç–æ –ø–æ–∫–∞–∑–∞–ª–∏ (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞/–ø—Ä–æ–≤–µ—Ä–∫–∏)
    q.options = opts_norm
    q.correct_idx = cid
    q._shown_question = q_text
    q._explanation = expl

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º quiz-–æ–ø—Ä–æ—Å
    open_sec = max(5, min(600, TIME_PER_Q))
    poll_msg = await bot.send_poll(
        chat_id=chat_id,
        question=q_text,
        options=opts_norm,
        type="quiz",
        correct_option_id=cid,
        is_anonymous=False,
        open_period=open_sec,      # –≤–∏–∑—É–∞–ª; –ª–æ–≥–∏–∫—É –¥–µ—Ä–∂–∏–º –Ω–∞ —Å–≤–æ—ë–º —Ç–∞–π–º–µ—Ä–µ
        explanation=expl or None,  # –ø–æ–∫–∞–∂–µ—Ç—Å—è –≤ —Ö–∏–Ω—Ç–µ Telegram –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        reply_markup=kb,
    )

    # 5) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º poll_id -> (user, question_idx) –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–¥–ª–∞–π–Ω
    POLL_MAP[poll_msg.poll.id] = (user_id, idx)
    st["last_poll_msg_id"] = poll_msg.message_id

    if (old := st.get("timer_task")):
        old.cancel()
    st["timer_task"] = asyncio.create_task(
        _deadline_watch(user_id, poll_msg.poll.id, chat_id, idx, open_sec, bot),
        name=f"quiz_deadline_{user_id}_{idx}",
    )


async def _finalize_step(user_id: int, idx: int, is_correct: bool, bot: Bot) -> None:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–≥–∞: —Ñ–∏–¥–±–µ–∫, —Å—á—ë—Ç, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É/—Ñ–∏–Ω–∏—à."""
    st = SESSIONS.get(user_id)
    if not st:
        return

    if is_correct:
        await bot.send_message(st["chat_id"], "‚úÖ –í–µ—Ä–Ω–æ", parse_mode=None)
        st["correct"] += 1
    else:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç + –ø–æ—á–µ–º—É
        q = st["qs"][idx]
        expl_text = _compose_explanation(q)
        msg = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
        if expl_text:
            msg += "\n" + expl_text
        await bot.send_message(st["chat_id"], msg, parse_mode=None)

    st["idx"] += 1
    if st["idx"] >= len(st["qs"]):
        await _finish(user_id, bot)
    else:
        await asyncio.sleep(0.2)
        await _send_q(user_id, bot)


async def _finish(user_id: int, bot: Bot) -> None:
    """–§–∏–Ω–∞–ª —Ç–µ—Å—Ç–∞: –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º, —Å–±—Ä–æ—Å FSM, –º–µ–Ω—é."""
    st = SESSIONS.pop(user_id, None)
    if not st:
        return

    # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª
    if (t := st.get("timer_task")):
        t.cancel()

    # –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å –≤–∏—Å—è—á–∏–µ poll'—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for pid, (uid, _) in list(POLL_MAP.items()):
        if uid == user_id:
            POLL_MAP.pop(pid, None)
            FINALIZED_POLLS.add(pid)

    correct = int(st.get("correct", 0))
    total = len(st["qs"])
    passed = is_passed(correct, total)
    chat_id = st["chat_id"]

    # —Å–±—Ä–æ—Å FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
    state: Optional[FSMContext] = st.get("state")
    if state:
        with contextlib.suppress(Exception):
            await state.clear()

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
    if passed:
        text = (
            f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {correct} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö (–ø–æ—Ä–æ–≥ {PASS_THRESHOLD_PCT}% –∏ –≤—ã—à–µ).\n"
            f"–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã (–µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω)."
        )
    else:
        text = (
            f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {correct} –∏–∑ {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö (–º–µ–Ω—å—à–µ {PASS_THRESHOLD_PCT}%).\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞."
        )
    await bot.send_message(chat_id, text, parse_mode=None)

    # –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞/–Ω–∞–≥—Ä–∞–¥–∞
    with contextlib.suppress(Exception):
        await write_result_and_reward(
            user_id=user_id,
            meta=st.get("meta"),
            correct_count=correct,
            total_count=total,
            tg_user=st.get("tg_user"),
            bot=bot,
        )

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    try:
        tg_user = st.get("tg_user")
        meta = st.get("meta")
        title = getattr(meta, "title", None) or str(getattr(meta, "code", ""))
        pct = round((correct * 100) / total) if total else 0
        uname = f"@{tg_user.username}" if getattr(tg_user, "username", None) else "‚Äî"
        admin_msg = (
            "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞\n"
            f"–¢–µ—Å—Ç: {title}\n"
            f"–£—á–µ–Ω–∏–∫: {tg_user.full_name} {uname}\n"
            f"Telegram ID: {user_id}\n"
            f"–ò—Ç–æ–≥: {correct}/{total} ({pct}%) ‚Äî {'–ü–†–û–ô–î–ï–ù' if passed else '–ù–ï –ü–†–û–ô–î–ï–ù'}"
        )
        settings = get_settings()
        admin_ids = settings.admin_ids
        if not admin_ids:
            log.warning("[tests_engine] skip admin notify: no ADMIN ids configured")
        else:
            for aid in admin_ids:
                with contextlib.suppress(Exception):
                    await bot.send_message(aid, admin_msg)

    except Exception:
        pass

    await bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=student_main_kb())


# ===================== API –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–ê ======================

async def start_test_quiz(message: types.Message, user_id: int, meta: TestMeta, state: FSMContext) -> None:
    """–í—ã–∑–æ–≤ –∏–∑ tests/entry.py –∏ deeplink: –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç."""
    bot = message.bot
    chat_id = message.chat.id
    tg_user = message.from_user

    # —Å–±—Ä–æ—Å –∑–∞–ª–∏–ø—à–µ–π —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (st := SESSIONS.pop(user_id, None)):
        if (t := st.get("timer_task")):
            t.cancel()
        for pid, (uid, _) in list(POLL_MAP.items()):
            if uid == user_id:
                POLL_MAP.pop(pid, None)
                FINALIZED_POLLS.add(pid)

    # –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    qs = _load_questions(meta)

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    SESSIONS[user_id] = {
        "chat_id": chat_id,
        "tg_user": tg_user,
        "meta": meta,
        "qs": qs,
        "idx": 0,
        "correct": 0,
        "last_poll_msg_id": None,
        "timer_task": None,
        "state": state,  # —Å–æ—Ö—Ä–∞–Ω–∏–º FSM, —á—Ç–æ–±—ã –ø–æ—á–∏—Å—Ç–∏—Ç—å –≤ _finish
    }

    # –ø–æ–º–µ—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∏–¥—ë—Ç –∫–≤–∏–∑"
    await state.set_state(TestsFlow.RUNNING)

    title_safe = h(getattr(meta, "title", str(getattr(meta, "code", ""))))
    await bot.send_message(
        chat_id,
        f"üß† –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç: <b>{title_safe}</b>\n–ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî {TIME_PER_Q} —Å–µ–∫.",
        parse_mode=ParseMode.HTML,
    )

    await _send_q(user_id, bot)


# ===================== –•–≠–ù–î–õ–ï–†–´ TELEGRAM ======================

@router.poll_answer()
async def on_poll_answer(pa: types.PollAnswer, bot: Bot) -> None:
    pid = pa.poll_id
    bind = POLL_MAP.pop(pid, None)
    if not bind:
        return
    user_id, idx_from_map = bind

    lock = USER_LOCKS[user_id]
    async with lock:
        st = SESSIONS.get(user_id)
        if not st:
            return
        if idx_from_map != st["idx"]:
            return

        # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—à —Ç–∞–π–º–µ—Ä
        if (t := st.pop("timer_task", None)):
            t.cancel()

        # –¥–µ–¥—É–ø –ø–æ poll'—É
        if pid in FINALIZED_POLLS:
            return
        FINALIZED_POLLS.add(pid)

        selected = pa.option_ids[0] if pa.option_ids else None
        is_correct = (selected == st["qs"][st["idx"]].correct_idx)
        await _finalize_step(user_id, st["idx"], is_correct, bot=bot)


@router.poll()
async def on_poll_closed(p: types.Poll, bot: Bot) -> None:
    # —è–¥—Ä–æ ‚Äî –Ω–∞—à —Ç–∞–π–º–µ—Ä; –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ best-effort –ø–æ–¥—á–∏—Å—Ç–∫–∞
    if not p.is_closed:
        return
    pid = p.id

    bind = POLL_MAP.pop(pid, None)
    if not bind:
        return
    user_id, idx_from_map = bind

    lock = USER_LOCKS[user_id]
    async with lock:
        st = SESSIONS.get(user_id)
        if not st:
            return
        if idx_from_map != st["idx"]:
            return

        if (t := st.pop("timer_task", None)):
            t.cancel()

        if pid in FINALIZED_POLLS:
            return
        FINALIZED_POLLS.add(pid)

        await _finalize_step(user_id, st["idx"], is_correct=False, bot=bot)


@router.callback_query(F.data == "quiz_cancel")
async def on_quiz_cancel(cb: types.CallbackQuery, bot: Bot, state: FSMContext) -> None:
    uid = cb.from_user.id
    st = SESSIONS.pop(uid, None)

    # –∑–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π poll
    if st:
        chat_id = st["chat_id"]
        if (t := st.get("timer_task")):
            t.cancel()
        msg_id = st.get("last_poll_msg_id")
        if msg_id:
            with contextlib.suppress(Exception):
                await bot.stop_poll(chat_id, msg_id)

    # –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—ã
    for pid, (u, _) in list(POLL_MAP.items()):
        if u == uid:
            POLL_MAP.pop(pid, None)
            FINALIZED_POLLS.add(pid)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
    try:
        tg_user = cb.from_user
        uname = f"@{tg_user.username}" if getattr(tg_user, "username", None) else "‚Äî"
        admin_msg = (
            "üß™ –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω\n"
            f"–£—á–µ–Ω–∏–∫: {tg_user.full_name} {uname}\n"
            f"Telegram ID: {tg_user.id}"
        )
        settings = get_settings()
        admin_ids = settings.admin_ids
        for aid in admin_ids:
            with contextlib.suppress(Exception):
                await bot.send_message(aid, admin_msg)
    except Exception:
        pass

    # —Å–±—Ä–æ—Å–∏—Ç—å FSM –∏ –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é
    with contextlib.suppress(Exception):
        await state.clear()

    await cb.message.answer("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –û–Ω –Ω–µ —Å–¥–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=student_main_kb())
    await cb.answer()


@router.message(F.text == "/cancel_quiz")
async def cancel_quiz_cmd(m: types.Message, state: FSMContext) -> None:
    uid = m.from_user.id
    st = SESSIONS.pop(uid, None)

    if st:
        chat_id = st["chat_id"]
        if (t := st.get("timer_task")):
            t.cancel()
        msg_id = st.get("last_poll_msg_id")
        if msg_id:
            with contextlib.suppress(Exception):
                await m.bot.stop_poll(chat_id, msg_id)

    for pid, (u, _) in list(POLL_MAP.items()):
        if u == uid:
            POLL_MAP.pop(pid, None)
            FINALIZED_POLLS.add(pid)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
    try:
        tg_user = m.from_user
        uname = f"@{tg_user.username}" if getattr(tg_user, "username", None) else "‚Äî"
        admin_msg = (
            "üß™ –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω\n"
            f"–£—á–µ–Ω–∏–∫: {tg_user.full_name} {uname}\n"
            f"Telegram ID: {uid}"
        )
        settings = get_settings()
        admin_ids = settings.admin_ids
        for aid in admin_ids:
            with contextlib.suppress(Exception):
                await m.bot.send_message(aid, admin_msg)
    except Exception:
        pass

    with contextlib.suppress(Exception):
        await state.clear()

    await m.answer("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –û–Ω –Ω–µ —Å–¥–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=student_main_kb())

================================================================================
FILE: bot\routers\tests\entry.py
================================================================================
# bot/routers/tests/entry.py
from aiogram import Router, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from bot.routers.tests.state import TestsFlow

from bot.keyboards.student import student_main_kb
from bot.services.tests.registry import get_tests, get_test
from bot.services.tests.progress import is_unlocked, user_passed_codes
from bot.routers.tests.engine import start_test_quiz

router = Router(name="tests_entry")


@router.message(F.text == "üß† –¢–µ—Å—Ç—ã –ø–æ —Ç–µ–æ—Ä–∏–∏")
async def tests_menu(m: types.Message, state: FSMContext):
    await state.set_state(TestsFlow.MENU)
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:", reply_markup=ReplyKeyboardRemove())

    kb = InlineKeyboardBuilder()
    all_tests = get_tests()
    passed_codes = await user_passed_codes(m.from_user.id)

    for t in all_tests:
        unlocked = is_unlocked(passed_codes, t.depends_on)
        passed = t.code in passed_codes

        if passed:
            text = f"‚úÖ {t.title}"
        elif unlocked:
            text = f"‚ñ∂Ô∏è {t.title}"
        else:
            text = f"üîí {t.title}"

        if unlocked:
            kb.button(text=text, callback_data=f"tests:start:{t.code}")
        else:
            kb.button(text=text, callback_data=f"tests:locked:{t.code}")

    kb.adjust(1)

    kb.button(text="‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tests:back")

    await m.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:", reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("tests:start:"))
async def tests_start(cb: types.CallbackQuery, state: FSMContext):
    test_code = cb.data.split(":")[2]
    meta = get_test(test_code)

    if not meta:
        await cb.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    passed_codes = await user_passed_codes(cb.from_user.id)
    unlocked = is_unlocked(passed_codes, meta.depends_on)

    if not unlocked:
        await cb.answer("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –µ—â—ë –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        return

    await cb.answer()
    await start_test_quiz(cb.message, cb.from_user.id, meta, state)


@router.callback_query(F.data.startswith("tests:locked:"))
async def tests_locked(cb: types.CallbackQuery):
    await cb.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç.", show_alert=True)


@router.callback_query(F.data == "tests:back")
async def tests_back(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=student_main_kb())
    await cb.answer()

================================================================================
FILE: bot\routers\tests\state.py
================================================================================
from aiogram.fsm.state import StatesGroup, State

class TestsFlow(StatesGroup):
    MENU = State()      # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ (reply-–∫–ª–∞–≤–∞ —Å–∫—Ä—ã—Ç–∞)
    RUNNING = State()   # –∏–¥—ë—Ç —Å–∞–º –∫–≤–∏–∑


================================================================================
FILE: bot\routers\tests\__init__.py
================================================================================


================================================================================
FILE: bot\routers\__pycache__\admin.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\admin_reply.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\debug.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\fallback.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\forms.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\lesson_flow.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\onboarding.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\student.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\__pycache__\__init__.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\tests\__pycache__\deeplink.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\tests\__pycache__\engine.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\tests\__pycache__\entry.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\tests\__pycache__\state.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\routers\tests\__pycache__\__init__.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\middlewares\__pycache__\block_until_done.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\keyboards\__pycache__\admin.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\keyboards\__pycache__\student.cpython-313.pyc
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: bot\data\tests\theory_1.json
================================================================================
[
  {
    "q": "–° –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ –≥–∏—Ç–∞—Ä–µ —Å—á–∏—Ç–∞—é—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä—É–Ω?",
    "options": [
      "–°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑: 1 ‚Äî —Å–∞–º–∞—è —Ç–æ–ª—Å—Ç–∞—è, 6 ‚Äî —Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è",
      "–ü—Ä–∞–≤–∏–ª –Ω–µ—Ç ‚Äî –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ",
      "–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: 1 ‚Äî —Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è, 6 ‚Äî —Å–∞–º–∞—è —Ç–æ–ª—Å—Ç–∞—è",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ –∫–æ—Ä–ø—É—Å—É"
    ],
    "correct_idx": 2,
    "why": "–ü—Ä–∏–Ω—è—Ç–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: 1-—è ‚Äî —Ç–æ–Ω–∫–∞—è (–≤–Ω–∏–∑—É), 6-—è ‚Äî —Ç–æ–ª—Å—Ç–∞—è (–≤–≤–µ—Ä—Ö—É)."
  },
  {
    "q": "–ö–∞–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –Ω–æ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ –æ—Ç 1-–π –∫ 6-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "E, A, D, G, B, E",
      "E, G, B, D, A, E",
      "D, G, B, E, A, E",
      "E, B, G, D, A, E"
    ],
    "correct_idx": 3,
    "why": "–û—Ç 1-–π –∫ 6-–π: E (–º–∏), B (—Å–∏), G (—Å–æ–ª—å), D (—Ä–µ), A (–ª—è), E (–º–∏). –í–∞—Ä–∏–∞–Ω—Ç ‚ÄúE, A, D, G, B, E‚Äù ‚Äî —ç—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –æ—Ç 6-–π –∫ 1-–π."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´—Å—Ç—Ä–æ–π¬ª –≥–∏—Ç–∞—Ä—ã?",
    "options": [
      "–¢–æ–ª—â–∏–Ω–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç—Ä—É–Ω",
      "–ü–æ—Ä—è–¥–æ–∫ –Ω–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å—Ç—Ä—É–Ω—ã",
      "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∞–¥–æ–≤ –Ω–∞ –≥—Ä–∏—Ñ–µ",
      "–¢–∏–ø –¥–µ—Ä–µ–≤–∞ –∫–æ—Ä–ø—É—Å–∞"
    ],
    "correct_idx": 1,
    "why": "–°—Ç—Ä–æ–π ‚Äî —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞–±–æ—Ä —Ü–µ–ª–µ–≤—ã—Ö –Ω–æ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω."
  },
  {
    "q": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç—Ä–æ–π?",
    "options": [
      "–ß—Ç–æ–±—ã —Å—Ç—Ä—É–Ω—ã —Å–ª—É–∂–∏–ª–∏ –¥–æ–ª—å—à–µ",
      "–ß—Ç–æ–±—ã –≥–∏—Ç–∞—Ä–∞ –±—ã–ª–∞ –≥—Ä–æ–º—á–µ",
      "–ß—Ç–æ–±—ã –∞–∫–∫–æ—Ä–¥—ã/–º–µ–ª–æ–¥–∏–∏ –∑–≤—É—á–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –º—É–∑—ã–∫–∞–Ω—Ç—ã –ø–æ–Ω–∏–º–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞",
      "–ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–æ–∫-–º—É–∑—ã–∫—É"
    ],
    "correct_idx": 2,
    "why": "–ï–¥–∏–Ω—ã–π —Å—Ç—Ä–æ–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∞–∫–∫–æ—Ä–¥–æ–≤/—Ç–∞–±–∞ –º–µ–∂–¥—É –º—É–∑—ã–∫–∞–Ω—Ç–∞–º–∏."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∏–≥—Ä–∞—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–Ω–µ¬ª?",
    "options": [
      "–ò–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ç–æ—Ä–æ–º",
      "–ò–≥—Ä–∞—Ç—å —Ñ–ª–∞–∂–æ–ª–µ—Ç–æ–º",
      "–ò–≥—Ä–∞—Ç—å –Ω–∞ 12-–º –ª–∞–¥—É",
      "–ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–≤—É–∫ –±–µ–∑ –∑–∞–∂–∞—Ç–∏—è –ª–∞–¥–∞"
    ],
    "correct_idx": 3,
    "why": "–ü—É—Å—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ ‚Äî —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –±–µ–∑ –ø—Ä–∏–∂–∞—Ç–∏—è –∫ –ª–∞–¥–∞–º; –∑–≤—É—á–∏—Ç –µ—ë –±–∞–∑–æ–≤–∞—è –Ω–æ—Ç–∞ —Å—Ç—Ä–æ—è."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 1-–π —Å—Ç—Ä—É–Ω–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ?",
    "options": [
      "G (—Å–æ–ª—å)",
      "E (–º–∏)",
      "A (–ª—è)",
      "B (—Å–∏)"
    ],
    "correct_idx": 1,
    "why": "1-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî E (–º–∏)."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 2-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "A (–ª—è)",
      "G (—Å–æ–ª—å)",
      "B (—Å–∏)",
      "C (–¥–æ)"
    ],
    "correct_idx": 2,
    "why": "2-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî B (—Å–∏)."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 3-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "G (—Å–æ–ª—å)",
      "D (—Ä–µ)",
      "E (–º–∏)",
      "F (—Ñ–∞)"
    ],
    "correct_idx": 0,
    "why": "3-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî G (—Å–æ–ª—å)."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –∑–≤—É—á–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π 6-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "C (–¥–æ)",
      "D (—Ä–µ)",
      "A (–ª—è)",
      "E (–º–∏)"
    ],
    "correct_idx": 3,
    "why": "6-—è —Å—Ç—Ä—É–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî E (–º–∏)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ 1-–π –∏ 6-–π —Å—Ç—Ä—É–Ω–∞—Ö:",
    "options": [
      "–û–±–µ ‚Äî –Ω–æ—Ç–∞ E –∏ –∑–≤—É—á–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ –≤—ã—Å–æ—Ç–µ",
      "–û–±–µ ‚Äî –Ω–æ—Ç–∞ E, –Ω–æ 1-—è –∑–≤—É—á–∏—Ç –≤—ã—à–µ, –∞ 6-—è ‚Äî –Ω–∏–∂–µ",
      "1-—è ‚Äî A, 6-—è ‚Äî E",
      "–≠—Ç–æ —Ä–∞–∑–Ω—ã–µ –Ω–æ—Ç—ã –≤ –ª—é–±–æ–º —Å—Ç—Ä–æ–µ"
    ],
    "correct_idx": 1,
    "why": "–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ 1-—è –∏ 6-—è ‚Äî –æ–±–µ E; —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä: 1-—è ‚Äî –≤—ã—Å–æ–∫–∞—è, 6-—è ‚Äî –Ω–∏–∑–∫–∞—è."
  }
]


================================================================================
FILE: bot\data\tests\theory_10.json
================================================================================
[
  {
    "q": "–° –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å—á–∏—Ç–∞—é—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä—É–Ω –Ω–∞ –≥–∏—Ç–∞—Ä–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏?",
    "options": [
      "–° –≥–æ–ª–æ–≤—ã –∫ –ø–æ–¥—Å—Ç–∞–≤–∫–µ",
      "–°–≤–µ—Ä—Ö—É –≤–Ω–∏–∑: 1 ‚Äî —Ç–æ–ª—Å—Ç–∞—è, 6 ‚Äî —Ç–æ–Ω–∫–∞—è",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ –∫–æ—Ä–ø—É—Å—É",
      "–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: 1 ‚Äî —Ç–æ–Ω–∫–∞—è, 6 ‚Äî —Ç–æ–ª—Å—Ç–∞—è"
    ],
    "correct_idx": 3,
    "why": "–ù—É–º–µ—Ä–∞—Ü–∏—è –∏–¥—ë—Ç –æ—Ç —Å–∞–º–æ–π —Ç–æ–Ω–∫–æ–π (–≤–Ω–∏–∑—É) –∫ —Å–∞–º–æ–π —Ç–æ–ª—Å—Ç–æ–π (–≤–≤–µ—Ä—Ö—É)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω –æ—Ç 1-–π –∫ 6-–π –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ.",
    "options": [
      "A, D, G, B, E, A",
      "D, G, B, E, A, E",
      "E, B, G, D, A, E",
      "E, A, D, G, B, E"
    ],
    "correct_idx": 2,
    "why": "–û—Ç 1 –∫ 6: E‚ÄìB‚ÄìG‚ÄìD‚ÄìA‚ÄìE. –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (6‚Üí1) ‚Äî E‚ÄìA‚ÄìD‚ÄìG‚ÄìB‚ÄìE."
  },
  {
    "q": "–ö–∞–∫–∏–µ –¥–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –±—É–∫–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ –∑–≤—É—á–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö?",
    "options": [
      "2-—è –∏ 5-—è (B –∏ A)",
      "–¢–æ–ª—å–∫–æ 2-—è –∏ 3-—è",
      "3-—è –∏ 4-—è (G –∏ D)",
      "1-—è –∏ 6-—è (E)"
    ],
    "correct_idx": 3,
    "why": "–û–±–µ ‚Äî E: –ø–µ—Ä–≤–∞—è –≤—ã—Å–æ–∫–∞—è, —à–µ—Å—Ç–∞—è –Ω–∏–∑–∫–∞—è."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´—Å—ã–≥—Ä–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É¬ª?",
    "options": [
      "–ì–ª—É—à–∏—Ç—å —Å—Ç—Ä—É–Ω—É –ª–∞–¥–æ–Ω—å—é",
      "–ó–∞–∂–∞—Ç—å 12-–π –ª–∞–¥",
      "–ò–∑–≤–ª–µ—á—å –∑–≤—É–∫ –±–µ–∑ –∑–∞–∂–∞—Ç–∏—è –Ω–∞ –ª–∞–¥–∞—Ö",
      "–¢—è–Ω—É—Ç—å –±–µ–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—Ç—ã"
    ],
    "correct_idx": 2,
    "why": "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –∑–≤—É—á–∏—Ç –±–µ–∑ –ø—Ä–∏–∂–∞—Ç–∏—è, –µ—ë –Ω–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–µ–º."
  },
  {
    "q": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç—Ä–æ–π –≤—Å–µ–º –≥–∏—Ç–∞—Ä–∏—Å—Ç–∞–º?",
    "options": [
      "–ß—Ç–æ–±—ã —Å—Ç—Ä—É–Ω—ã —Å–ª—É–∂–∏–ª–∏ –¥–æ–ª—å—à–µ",
      "–ß—Ç–æ–±—ã –≥–∏—Ç–∞—Ä–∞ —Å—Ç–∞–ª–∞ –≥—Ä–æ–º—á–µ",
      "–ß—Ç–æ–±—ã –ª–µ–≥—á–µ –±—ã–ª–æ –∏–≥—Ä–∞—Ç—å —Ñ–ª–∞–∂–æ–ª–µ—Ç—ã",
      "–ß—Ç–æ–±—ã –∞–∫–∫–æ—Ä–¥—ã –∏ —Ç–∞–±—ã —Å–æ–≤–ø–∞–¥–∞–ª–∏ –∏ –∑–≤—É—á–∞–ª–∏ –≤–µ—Ä–Ω–æ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏"
    ],
    "correct_idx": 3,
    "why": "–ï–¥–∏–Ω—ã–π —Å—Ç—Ä–æ–π = —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–æ—Ç/—Ç–∞–±–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –∑–≤—É—á–∞–Ω–∏–µ."
  },
  {
    "q": "–¢—é–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É, –Ω–æ —Å—Ç—Ä–µ–ª–∫–∞ —É—Ö–æ–¥–∏—Ç –≤–ª–µ–≤–æ. –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?",
    "options": [
      "–í—ã—à–µ —Ç–æ–Ω–∞: —Å—Ç—Ä—É–Ω—É –Ω—É–∂–Ω–æ –æ—Å–ª–∞–±–∏—Ç—å",
      "–ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ–¥–∏–∞—Ç–æ—Ä",
      "–í—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å",
      "–ù–∏–∂–µ —Ç–æ–Ω–∞: —Å—Ç—Ä—É–Ω—É –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å"
    ],
    "correct_idx": 3,
    "why": "–°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ/–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´flat¬ª ‚Äî –Ω–µ–¥–æ—Ç—è–Ω—É—Ç–æ, –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ."
  },
  {
    "q": "–ö–∞–∫–æ–π —Ç—é–Ω–µ—Ä —á–∞—â–µ –≤—Å–µ–≥–æ —É–¥–æ–±–µ–Ω –Ω–æ–≤–∏—á–∫—É –Ω–∞ –∞–∫—É—Å—Ç–∏–∫–µ?",
    "options": [
      "–õ–∞–º–ø–æ–≤—ã–π —Ç—é–Ω–µ—Ä-–∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä",
      "–ü–µ–¥–∞–ª—å–Ω—ã–π —Ç—é–Ω–µ—Ä",
      "–ö–ª–∏–ø—Å–∞ –Ω–∞ –≥–æ–ª–æ–≤–∫–µ –≥—Ä–∏—Ñ–∞",
      "–¢–æ–ª—å–∫–æ —Å—Ç–µ–Ω–¥–æ–≤—ã–π —Å—Ç—Ä–æ–±–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–π"
    ],
    "correct_idx": 2,
    "why": "–ö–ª–∏–ø—Å–∞ –ª–æ–≤–∏—Ç –≤–∏–±—Ä–∞—Ü–∏–∏ –∫–æ—Ä–ø—É—Å–∞, –ø—Ä–æ—Å—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã –∏ –¥—Ä–µ–¥–Ω–æ—É—Ç",
      "–ù—É–∂–µ–Ω —É—Å–∏–ª–∏—Ç–µ–ª—å –¥–ª—è –∑–≤—É—á–∞–Ω–∏—è",
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã –∏ —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ",
      "–ü–æ–ª–Ω—ã–π –∫–æ—Ä–ø—É—Å –±–µ–∑ —Ä–æ–∑–µ—Ç–∫–∏ (solid-body)"
    ],
    "correct_idx": 2,
    "why": "–ö–ª–∞—Å—Å–∏–∫–∞: –Ω–µ–π–ª–æ–Ω, —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ, –º—è–≥–∫–æ–µ –Ω–µ–≥—Ä–æ–º–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ (—Å—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–Ω–µ)?",
    "options": [
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã, –∑–≤–æ–Ω–∫–æ–µ –∏ –≥—Ä–æ–º–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ",
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –ø–æ—á—Ç–∏ –Ω–µ —Å–ª—ã—à–Ω–æ",
      "–¢–æ–ª—å–∫–æ –Ω–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã",
      "–í—Å–µ–≥–¥–∞ —É–∑–æ—Ä ¬´—Ñ–∞–ª–µ–Ω—á–∏–∫¬ª –Ω–∞ —Ä–æ–∑–µ—Ç–∫–µ"
    ],
    "correct_idx": 0,
    "why": "–°—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–Ω—ã –¥–∞—é—Ç —è—Ä–∫–æ—Å—Ç—å/–≥—Ä–æ–º–∫–æ—Å—Ç—å; —É—Å–∏–ª–∏—Ç–µ–ª—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
  },
  {
    "q": "–ß—Ç–æ –≤–µ—Ä–Ω–æ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—É?",
    "options": [
      "–í—Å–µ–≥–¥–∞ —à–∏—Ä–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ø–æ –≥—Ä–∏—Ñ—É",
      "–°—Ç—Ä—É–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–µ–π–ª–æ–Ω–æ–≤—ã–µ",
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å —Ç–∏—Ö–æ",
      "–ò–º–µ–µ—Ç —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è"
    ],
    "correct_idx": 2,
    "why": "Solid-body –ø–æ—á—Ç–∏ –Ω–µ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –∑–≤—É–∫ ‚Äî –Ω—É–∂–µ–Ω —É—Å–∏–ª–∏—Ç–µ–ª—å/—Ç—Ä–∞–∫—Ç."
  },
  {
    "q": "–ö–∞–∫–∞—è –¥–µ—Ç–∞–ª—å –Ω–∞ –∫–æ—Ä–ø—É—Å–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–Ω—ã —Å–Ω–∏–∑—É?",
    "options": [
      "–†–æ–∑–µ—Ç–∫–∞",
      "–ü–æ—Ä–æ–∂–µ–∫",
      "–ê–Ω–∫–µ—Ä",
      "–ü–æ–¥—Å—Ç–∞–≤–∫–∞ (–±—Ä–∏–¥–∂)"
    ],
    "correct_idx": 3,
    "why": "–°—Ç—Ä—É–Ω—ã –∫—Ä–µ–ø—è—Ç—Å—è –≤/–Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ, –ø–æ—Ä–æ–∂–µ–∫ ‚Äî —É –≥–æ–ª–æ–≤—ã."
  },
  {
    "q": "–ì–¥–µ –Ω–∞ –≥—Ä–∏—Ñ–µ –æ–±—ã—á–Ω–æ —Å—Ç–∞–≤—è—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∫–∏-¬´—Ç–æ—á–∫–∏¬ª –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è?",
    "options": [
      "–ù–∞ 4-–º –∏ 6-–º",
      "–ù–∞ 2-–º –∏ 4-–º",
      "–ù–∞ 1-–º –∏ 2-–º",
      "–ù–∞ 3-–º –∏ 5-–º –ª–∞–¥–∞—Ö"
    ],
    "correct_idx": 3,
    "why": "–ß–∞—Å—Ç–æ –º–µ—Ç–∫–∏ ‚Äî 3-–π, 5-–π –ª–∞–¥ (–¥–∞–ª—å—à–µ ‚Äî 7, 9, 12 –∏ —Ç.–¥.)."
  },
  {
    "q": "–ß—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±—É–ª–∞—Ç—É—Ä–∞ –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏?",
    "options": [
      "–î–∏–Ω–∞–º–∏–∫—É (–≥—Ä–æ–º–∫–æ—Å—Ç—å)",
      "–¢–æ—á–Ω—ã–π —Ä–∏—Ç–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "–ö–∞–∫–∞—è —Å—Ç—Ä—É–Ω–∞ –∏ –∫–∞–∫–æ–π –ª–∞–¥",
      "–¢–µ–º–ø –∏ —Ä–∞–∑–º–µ—Ä"
    ],
    "correct_idx": 2,
    "why": "–¢–∞–±—ã ‚Äî ¬´–∫–∞—Ä—Ç–∞ –ø–∞–ª—å—Ü–µ–≤¬ª: –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –≥—Ä–∏—Ñ–µ, –Ω–µ —Ä–∏—Ç–º."
  },
  {
    "q": "–ö–∞–∫–∞—è –ª–∏–Ω–∏—è —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 1-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "–°—Ä–µ–¥–Ω—è—è (D)",
      "–õ—é–±–∞—è ‚Äî –≤ —Ç–∞–±–∞—Ö –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
      "–ù–∏–∂–Ω—è—è (E)",
      "–í–µ—Ä—Ö–Ω—è—è (e)"
    ],
    "correct_idx": 3,
    "why": "–í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–∞ ‚Äî —Ç–æ–Ω–∫–∞—è –µ (1-—è —Å—Ç—Ä—É–Ω–∞)."
  },
  {
    "q": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Ü–∏—Ñ—Ä–∞ ¬´0¬ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ?",
    "options": [
      "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞",
      "–ì–ª—É—à—ë–Ω–∞—è —Å—Ç—Ä—É–Ω–∞",
      "–ò–≥—Ä–∞—Ç—å —Ç–∏—à–µ",
      "–ë–µ–Ω–¥ –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞"
    ],
    "correct_idx": 0,
    "why": "–ù–æ–ª—å ‚Äî –Ω–µ –∑–∞–∂–∏–º–∞—Ç—å –ª–∞–¥."
  },
  {
    "q": "–ó–∞–ø–∏—Å—å: E|--3--. –ß—Ç–æ —Å—ã–≥—Ä–∞—Ç—å?",
    "options": [
      "6-—è –æ—Ç–∫—Ä—ã—Ç–∞—è",
      "6-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥ (G)",
      "5-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥ (C)",
      "1-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥ (G)"
    ],
    "correct_idx": 1,
    "why": "–ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è ‚Äî 6-—è —Å—Ç—Ä—É–Ω–∞; 3-–π –ª–∞–¥ –Ω–∞ –Ω–µ–π ‚Äî –Ω–æ—Ç–∞ G."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Å–∏–º–≤–æ–ª—ã ¬´h¬ª –∏ ¬´p¬ª –≤ —Ç–∞–±–∞—Ö?",
    "options": [
      "Harmonic –∏ palm mute",
      "Head –∏ pickup",
      "Half-step –∏ power chord",
      "Hammer-on –∏ pull-off ‚Äî –ø—Ä–∏—ë–º—ã –ª–µ–≥–∞—Ç–æ –æ–¥–Ω–æ–π —Ä—É–∫–æ–π"
    ],
    "correct_idx": 3,
    "why": "h ‚Äî —É–¥–∞—Ä–∏—Ç—å –ø–∞–ª–µ—Ü (—Ö–∞–º–º–µ—Ä), p ‚Äî —Å–æ—Ä–≤–∞—Ç—å (–ø—É–ª–ª-–æ—Ñ—Ñ)."
  },
  {
    "q": "–ö–∞–∫–∞—è –ø–∞—Ä–∞ –≤–µ—Ä–Ω–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç ¬´/¬ª –∏ ¬´\\¬ª?",
    "options": [
      "¬´/¬ª ‚Äî –≤–Ω–∏–∑, ¬´\\¬ª ‚Äî –≤–≤–µ—Ä—Ö",
      "–û–±–∞ ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "¬´/¬ª ‚Äî —Å–ª–∞–π–¥ –≤–≤–µ—Ä—Ö, ¬´\\¬ª ‚Äî —Å–ª–∞–π–¥ –≤–Ω–∏–∑",
      "–û–±–∞ ‚Äî –±–µ–Ω–¥"
    ],
    "correct_idx": 2,
    "why": "–ö–æ—Å–∞—è –≤–ø–µ—Ä—ë–¥ ‚Äî –≤–≤–µ—Ä—Ö; –æ–±—Ä–∞—Ç–Ω–∞—è ‚Äî –≤–Ω–∏–∑ –ø–æ –≥—Ä–∏—Ñ—É."
  },
  {
    "q": "–ß—Ç–æ –≤ —Ç–∞–±–∞—Ö –æ–∑–Ω–∞—á–∞–µ—Ç ¬´x¬ª –∏ ¬´~¬ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ?",
    "options": [
      "–¢–∏—Ö–∞—è –Ω–æ—Ç–∞ –∏ —Å–ª–∞–π–¥",
      "–¢—ç–ø –∏ –±–µ–Ω–¥",
      "–í–∏–±—Ä–∞—Ç–æ –∏ –≥–ª—É—à–µ–Ω–∏–µ",
      "–ì–ª—É—à–µ–Ω–∏–µ –∏ –≤–∏–±—Ä–∞—Ç–æ"
    ],
    "correct_idx": 3,
    "why": "x ‚Äî —â–µ–ª—á–æ–∫ –±–µ–∑ –≤—ã—Å–æ—Ç—ã; ~ ‚Äî –∫–æ–ª–µ–±–∞–Ω–∏—è –≤—ã—Å–æ—Ç—ã (–≤–∏–±—Ä–∞—Ç–æ)."
  },
  {
    "q": "–ü–æ—á–µ–º—É –ø–æ –æ–±—ã—á–Ω–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ —Å–ª–æ–∂–Ω–æ —Ç–æ—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "options": [
      "–†–∏—Ç–º –æ–±—ã—á–Ω–æ –Ω–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, –Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å/—Ä–∞–∑–º–µ—Ç–∫–∞",
      "–í —Ç–∞–±–∞—Ö –Ω–µ—Ç —Ü–∏—Ñ—Ä",
      "–¢–∞–±—ã —á–∏—Ç–∞—é—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ",
      "–¢–∞–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥—ã"
    ],
    "correct_idx": 0,
    "why": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–±—ã ‚Äî –±–µ–∑ —Ä–∏—Ç–º–∏–∫–∏; –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ –∞—É–¥–∏–æ/—Ä–∞–∑–º–µ—Ç–∫—É."
  },
  {
    "q": "–ß—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç Songsterr –∫ —Ç–∞–±–∞–º, –æ–±–ª–µ–≥—á–∞—è —á—Ç–µ–Ω–∏–µ —Ä–∏—Ç–º–∞?",
    "options": [
      "–†–∏—Ç–º–∏—á–µ—Å–∫—É—é –Ω–æ—Ç–∞—Ü–∏—é (—á–µ—Ç–≤–µ—Ä—Ç–∏, –≤–æ—Å—å–º—ã–µ –∏ —Ç.–¥.) —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–∞–±–æ–º",
      "–¶–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á—É –≤—ã—Å–æ—Ç—ã –∑–≤—É–∫–∞",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å—Ç—Ä–æ–π–∫—É —Å—Ç—Ä–æ—è",
      "–¢–æ–ª—å–∫–æ —Ç–µ–º–ø –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"
    ],
    "correct_idx": 0,
    "why": "–ï—Å—Ç—å –ª–∏–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –≤–æ—Å—å–º—ã—Ö –Ω–æ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–∞–∫—Ç 4/4?",
    "options": [
      "8",
      "12",
      "6",
      "4"
    ],
    "correct_idx": 0,
    "why": "–ß–µ—Ç–≤–µ—Ä—Ç—å = 2 –≤–æ—Å—å–º—ã—Ö; 4√ó2 = 8."
  },
  {
    "q": "–ö–∞–∫ –æ–±—ã—á–Ω–æ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç —Å—á—ë—Ç –≤–æ—Å—å–º—ã—Ö –≤ 4/4?",
    "options": [
      "1-–µ-–∏-–∞",
      "–†–∞–∑-–¥–≤–∞-—Ç—Ä–∏",
      "1-–∏-–∞",
      "1-–∏, 2-–∏, 3-–∏, 4-–∏"
    ],
    "correct_idx": 3,
    "why": "–î–≤–µ –≤–æ—Å—å–º—ã—Ö –≤ —á–µ—Ç–≤–µ—Ä—Ç–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º ¬´–∏¬ª –º–µ–∂–¥—É –¥–æ–ª—è–º–∏."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–ø—É–ª—å—Å¬ª –≤ –º—É–∑—ã–∫–µ?",
    "options": [
      "–°–º–µ–Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
      "–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤",
      "–†–æ–≤–Ω—ã–µ —É–¥–∞—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–∂–∏—Ç—Å—è —Ä–∏—Ç–º",
      "–°–∞–º —Ä–∏—Å—É–Ω–æ–∫ –¥–ª–∏–Ω/–∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–æ—Ç"
    ],
    "correct_idx": 2,
    "why": "–ü—É–ª—å—Å = –º–µ—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞, —Ä–∏—Ç–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É."
  },
  {
    "q": "–ß–µ–º —Ä–∏—Ç–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—É–ª—å—Å–∞?",
    "options": [
      "–†–∏—Ç–º ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –±–∞—Ä–∞–±–∞–Ω—ã",
      "–†–∏—Ç–º ‚Äî —Ä–∏—Å—É–Ω–æ–∫ –Ω–æ—Ç–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ–≤–µ—Ä—Ö —Ä–æ–≤–Ω–æ–≥–æ –ø—É–ª—å—Å–∞",
      "–†–∏—Ç–º ‚Äî –≤—Å–µ–≥–¥–∞ –≥—Ä–æ–º—á–µ –ø—É–ª—å—Å–∞",
      "–û—Ç–ª–∏—á–∏–π –Ω–µ—Ç"
    ],
    "correct_idx": 1,
    "why": "–ü—É–ª—å—Å –ø–æ—Å—Ç–æ—è–Ω–µ–Ω; —Ä–∏—Ç–º –º–µ–Ω—è–µ—Ç—Å—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∏—Å—É–Ω–æ–∫."
  },
  {
    "q": "–ß—Ç–æ —Å—Ç—Ä–æ–≥–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–ª–∞–¥–æ–º¬ª –Ω–∞ –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–°–∞–º–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –ø–æ–ª–æ—Å–∫–∞",
      "–õ—é–±–∞—è —á–∞—Å—Ç—å –∫–æ—Ä–ø—É—Å–∞",
      "–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ä–æ–∂–∫–∞–º–∏",
      "–õ—é–±–∞—è —Ç–æ—á–∫–∞ –Ω–∞ –Ω–∞–∫–ª–∞–¥–∫–µ"
    ],
    "correct_idx": 2,
    "why": "–õ–∞–¥ ‚Äî –∏–º–µ–Ω–Ω–æ —É—á–∞—Å—Ç–æ–∫ –º–µ–∂–¥—É –ø–æ—Ä–æ–∂–∫–∞–º–∏."
  },
  {
    "q": "–ì–¥–µ –ª—É—á—à–µ —Å—Ç–∞–≤–∏—Ç—å –ø–∞–ª–µ—Ü –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏ –Ω–æ—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞?",
    "options": [
      "–ì–¥–µ —É–≥–æ–¥–Ω–æ ‚Äî –Ω–µ –≤–ª–∏—è–µ—Ç",
      "–ü—Ä—è–º–æ –Ω–∞ –ø–æ—Ä–æ–∂–æ–∫",
      "–ù–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ –º–µ–∂–¥—É –ø–æ—Ä–æ–∂–∫–∞–º–∏",
      "–í–Ω—É—Ç—Ä–∏ –ª–∞–¥–∞, –±–ª–∏–∂–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Ä–æ–∂–∫—É"
    ],
    "correct_idx": 3,
    "why": "–ë–ª–∏–∂–µ –∫ –ø–æ—Ä–æ–∂–∫—É ‚Äî –º–µ–Ω—å—à–µ –¥—Ä–µ–±–µ–∑–≥–∞, —á–∏—â–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–ø–æ–∑–∏—Ü–∏—è¬ª –ª–µ–≤–æ–π —Ä—É–∫–∏?",
    "options": [
      "–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä—É–Ω –Ω–∞–¥ –≥—Ä–∏—Ñ–æ–º",
      "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏ —É —Ä–æ–∑–µ—Ç–∫–∏",
      "–£—á–∞—Å—Ç–æ–∫ –≥—Ä–∏—Ñ–∞; –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = –Ω–æ–º–µ—Ä –ª–∞–¥–∞ –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º",
      "–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥"
    ],
    "correct_idx": 2,
    "why": "–ü–æ–∑–∏—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–æ–Ω—É –ª–µ–≤–æ–π —Ä—É–∫–∏ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–º—É."
  },
  {
    "q": "–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–¥ –∫ –∫–æ—Ä–ø—É—Å—É?",
    "options": [
      "–ù–∞ –ø–æ–ª—Ç–æ—Ä–∞ —Ç–æ–Ω–∞",
      "–ù–∞ —Ç–æ–Ω",
      "–ù–∞ –ø–æ–ª—Ç–æ–Ω–∞",
      "–ù–µ –º–µ–Ω—è–µ—Ç—Å—è"
    ],
    "correct_idx": 2,
    "why": "–ö–∞–∂–¥—ã–π –ª–∞–¥ = +¬Ω —Ç–æ–Ω–∞."
  },
  {
    "q": "–ö–∞–∫–∏–µ –ø–∞—Ä—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç –ù–ï –∏–º–µ—é—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –¥–∏–µ–∑–∞ (–º–µ–∂–¥—É –Ω–∏–º–∏ —É–∂–µ –ø–æ–ª—É—Ç–æ–Ω)?",
    "options": [
      "E‚ÄìF –∏ B‚ÄìC",
      "C‚ÄìD",
      "A‚ÄìB",
      "F‚ÄìG"
    ],
    "correct_idx": 0,
    "why": "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–æ—Ä—è–¥–∞ ‚Äî E‚ÄìF –∏ B‚ÄìC."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –Ω–∞ 1-–π —Å—Ç—Ä—É–Ω–µ (E) –±—É–¥–µ—Ç –Ω–∞ 5-–º –ª–∞–¥—É?",
    "options": [
      "F",
      "A",
      "B",
      "G"
    ],
    "correct_idx": 1,
    "why": "E‚ÄìF‚ÄìF#‚ÄìG‚ÄìG#‚ÄìA (–Ω–∞ 5-–º ‚Äî A)."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ª–∞–¥–æ–≤ –≤–≤–µ—Ä—Ö –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—É –∂–µ –Ω–æ—Ç—É –Ω–∞ –æ–∫—Ç–∞–≤—É –≤—ã—à–µ?",
    "options": [
      "12 –ª–∞–¥–æ–≤",
      "10 –ª–∞–¥–æ–≤",
      "8 –ª–∞–¥–æ–≤",
      "7 –ª–∞–¥–æ–≤"
    ],
    "correct_idx": 0,
    "why": "–û–∫—Ç–∞–≤–∞ = 12 –ø–æ–ª—É—Ç–æ–Ω–æ–≤ ‚áí 12 –ª–∞–¥–æ–≤."
  },
  {
    "q": "–ö–∞–∫ –Ω–∞–π—Ç–∏ –æ–∫—Ç–∞–≤—É –Ω–æ—Ç—ã, –∑–∞–∂–∞—Ç–æ–π –Ω–∞ 6-–π –∏–ª–∏ 5-–π —Å—Ç—Ä—É–Ω–µ, –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä—É–Ω–∞—Ö?",
    "options": [
      "–ù–∞ 2 —Å—Ç—Ä—É–Ω—ã –≤—ã—à–µ –∏ –Ω–∞ 2 –ª–∞–¥–∞ –ø—Ä–∞–≤–µ–µ",
      "–ù–∞ 1 —Å—Ç—Ä—É–Ω—É –≤—ã—à–µ –∏ –Ω–∞ 1 –ª–∞–¥ –ª–µ–≤–µ–µ",
      "–ù–∞ 3 —Å—Ç—Ä—É–Ω—ã –≤—ã—à–µ –∏ –Ω–∞ 3 –ª–∞–¥–∞ –ª–µ–≤–µ–µ",
      "–ë–µ–∑ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏"
    ],
    "correct_idx": 0,
    "why": "–¢–∏–ø–∏—á–Ω—ã–π –æ–∫—Ç–∞–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: +2 —Å—Ç—Ä—É–Ω—ã, +2 –ª–∞–¥–∞."
  },
  {
    "q": "–ß–µ–º—É —Ä–∞–≤–µ–Ω —à–∞–≥ –æ—Ç 3-–≥–æ –∫ 5-–º—É –ª–∞–¥—É –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "–ü–æ–ª—É—Ç–æ–Ω—É",
      "–¢—Ä–∏—Ç–æ–Ω—É",
      "–¢–æ–Ω—É (2 –ø–æ–ª—É—Ç–æ–Ω–∞)",
      "–ü–æ–ª—É—Ç–æ—Ä–∞ —Ç–æ–Ω–∞–º"
    ],
    "correct_idx": 2,
    "why": "–î–≤–∞ –ª–∞–¥–∞ = —Ç–æ–Ω."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫–∫–æ—Ä–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Å—Ç–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é?",
    "options": [
      "–î–≤–µ –Ω–æ—Ç—ã –ø–æ–¥—Ä—è–¥",
      "–û–¥–Ω–∞ –Ω–æ—Ç–∞, –Ω–æ –≥—Ä–æ–º–∫–æ",
      "3 –∏ –±–æ–ª–µ–µ –Ω–æ—Ç, –∑–≤—É—á–∞—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
      "–õ—é–±–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±–æ–≤"
    ],
    "correct_idx": 2,
    "why": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∞–∫–∫–æ—Ä–¥ ‚Äî –º–∏–Ω–∏–º—É–º —Ç—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤—É–∫–∞."
  },
  {
    "q": "–ö–∞–∫ –Ω–∞ —Å–ª—É—Ö –æ—Ç–ª–∏—á–∏—Ç—å –∞–∫–∫–æ—Ä–¥ –æ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–π –Ω–æ—Ç—ã?",
    "options": [
      "–ê–∫–∫–æ—Ä–¥ –≤—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä–µ–µ",
      "–ê–∫–∫–æ—Ä–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≥—Ä–æ–º—á–µ",
      "–†–∞–∑–Ω–∏—Ü—ã –Ω–µ—Ç",
      "–£ –∞–∫–∫–æ—Ä–¥–∞ —Å–ª—ã—à–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤—É–∫–æ–≤ —Å—Ä–∞–∑—É"
    ],
    "correct_idx": 3,
    "why": "–ö–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ ‚Äî –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—ã—Å–æ—Ç."
  },
  {
    "q": "–ß–µ–º –º–∞–∂–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–∏–Ω–æ—Ä–Ω–æ–≥–æ –ø–æ ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–π¬ª –Ω–æ—Ç–µ?",
    "options": [
      "–í –º–∞–∂–æ—Ä–µ –∫–≤–∏–Ω—Ç–∞ –Ω–∏–∂–µ, –≤ –º–∏–Ω–æ—Ä–µ –≤—ã—à–µ",
      "–í –º–∞–∂–æ—Ä–µ —Ç–µ—Ä—Ü–∏—è –≤—ã—à–µ –Ω–∞ –ø–æ–ª—É—Ç–æ–Ω, –≤ –º–∏–Ω–æ—Ä–µ –Ω–∏–∂–µ",
      "–í –º–∞–∂–æ—Ä–µ –±–∞—Å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞",
      "–í –º–∏–Ω–æ—Ä–µ –≤—Å–µ–≥–¥–∞ —á–µ—Ç—ã—Ä–µ –Ω–æ—Ç—ã"
    ],
    "correct_idx": 1,
    "why": "–†–∞–∑–Ω–∏—Ü–∞ –≤ –≤—ã—Å–æ—Ç–µ —Ç–µ—Ä—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–Ω–∏–∫–∏ (¬± –ø–æ–ª—É—Ç–æ–Ω)."
  },
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∞–∂–æ—Ä–Ω–æ–≥–æ —Ç—Ä–µ–∑–≤—É—á–∏—è –≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏:",
    "options": [
      "0‚Äì4‚Äì7",
      "0‚Äì5‚Äì7",
      "0‚Äì3‚Äì7",
      "0‚Äì4‚Äì6"
    ],
    "correct_idx": 0,
    "why": "–¢–æ–Ω–∏–∫–∞, –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è, —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞."
  },
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∏–Ω–æ—Ä–Ω–æ–≥–æ —Ç—Ä–µ–∑–≤—É—á–∏—è –≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏:",
    "options": [
      "0‚Äì4‚Äì7",
      "0‚Äì3‚Äì7",
      "0‚Äì3‚Äì6",
      "0‚Äì5‚Äì7"
    ],
    "correct_idx": 1,
    "why": "–¢–æ–Ω–∏–∫–∞, –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è, —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞."
  },
  {
    "q": "–ö–∞–∫–∏–µ –Ω–æ—Ç—ã –æ–±—Ä–∞–∑—É—é—Ç –∞–∫–∫–æ—Ä–¥ C –º–∞–∂–æ—Ä?",
    "options": [
      "C‚ÄìE‚ÄìA",
      "C‚ÄìD#‚ÄìG",
      "C‚ÄìF‚ÄìG",
      "C‚ÄìE‚ÄìG"
    ],
    "correct_idx": 3,
    "why": "C (—Ç–æ–Ω–∏–∫–∞), E (–±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è), G (–∫–≤–∏–Ω—Ç–∞)."
  },
  {
    "q": "–ö–∞–∫–∏–µ –Ω–æ—Ç—ã –æ–±—Ä–∞–∑—É—é—Ç –∞–∫–∫–æ—Ä–¥ A –º–∏–Ω–æ—Ä (Am)?",
    "options": [
      "A‚ÄìB‚ÄìE",
      "A‚ÄìC#‚ÄìE",
      "A‚ÄìC‚ÄìE",
      "A‚ÄìD‚ÄìE"
    ],
    "correct_idx": 2,
    "why": "Am = —Ç–æ–Ω–∏–∫–∞ A, –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è C, –∫–≤–∏–Ω—Ç–∞ E."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å Am –≤ A –º–∞–∂–æ—Ä, –∏–∑–º–µ–Ω–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ—Ä—Ü–∏—é?",
    "options": [
      "–ü–æ–¥–Ω—è—Ç—å E –¥–æ F",
      "–û–ø—É—Å—Ç–∏—Ç—å C –¥–æ B",
      "–ü–æ–¥–Ω—è—Ç—å C –¥–æ C#",
      "–û–ø—É—Å—Ç–∏—Ç—å A –¥–æ G#"
    ],
    "correct_idx": 2,
    "why": "–ú–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è (C) ‚Üí –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è (C#)."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´O¬ª –≤ –∞–∫–∫–æ—Ä–¥–æ–≤–æ–π —Å—Ö–µ–º–µ –Ω–∞–¥ —Å—Ç—Ä—É–Ω–æ–π?",
    "options": [
      "–§–ª–∞–∂–æ–ª–µ—Ç",
      "–ù–µ –∏–≥—Ä–∞—Ç—å —ç—Ç—É —Å—Ç—Ä—É–Ω—É",
      "–ë–∞—Ä—Ä—ç –Ω–∞ –Ω—É–ª–µ–≤–æ–º –ª–∞–¥—É",
      "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –∑–≤—É—á–∏—Ç"
    ],
    "correct_idx": 3,
    "why": "O = —Å—Ç—Ä—É–Ω–∞ –∑–≤—É—á–∏—Ç –æ—Ç–∫—Ä—ã—Ç–æ; X = –Ω–µ –∏–≥—Ä–∞—Ç—å."
  },
  {
    "q": "–ö–∞–∫–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –æ–±—ã—á–Ω–æ –∑–≤—É—á–∞—Ç –≤ –∞–∫–∫–æ—Ä–¥–µ E –º–∞–∂–æ—Ä?",
    "options": [
      "–¢–æ–ª—å–∫–æ 3",
      "1, 2 –∏ 6",
      "4 –∏ 1",
      "1 –∏ 5"
    ],
    "correct_idx": 1,
    "why": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä–∞ E —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ 1, 2, 6."
  },
  {
    "q": "–ö–∞–∫–æ–π –Ω–∞–±–æ—Ä –∞–∫–∫–æ—Ä–¥–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–∞—Ç–æ–Ω–∏—á–µ—Å–∫–∏–º –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ C –º–∞–∂–æ—Ä?",
    "options": [
      "C, D, E, F, G, A, B",
      "C, Dm, Em, F, G, Am, Bdim",
      "Cm, D, Em, F, G, A, B",
      "C, Dm, E, Fm, G, A, Bm"
    ],
    "correct_idx": 1,
    "why": "–°—Ç—É–ø–µ–Ω–∏ I‚ÄìVII –≤ C: C, Dm, Em, F, G, Am, Bdim."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´—Å—Ç—É–ø–µ–Ω—å¬ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≥–∞–º–º—ã?",
    "options": [
      "–°–º–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –≥—Ä–∏—Ñ–µ",
      "–ù–æ–º–µ—Ä –Ω–æ—Ç—ã –≤ –≥–∞–º–º–µ (I‚ÄìVII)",
      "–ù–æ–º–µ—Ä —Ç–∞–∫—Ç–∞ –≤ –ø–∞—Ä—Ç–∏–∏",
      "–í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ—Ä–æ–∂–∫–∞"
    ],
    "correct_idx": 1,
    "why": "–°—Ç—É–ø–µ–Ω—å ‚Äî –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∑–≤—É–∫–æ—Ä—è–¥–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
  },
  {
    "q": "–ï—Å–ª–∏ –∞–∫–∫–æ—Ä–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç –º—É–∑—ã–∫–∞–Ω—Ç—É?",
    "options": [
      "–ù–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥–∏—Ç–∞—Ä—É",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –≥—Ä–æ–º–∫–æ—Å—Ç—å",
      "–¢–µ–º–ø —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ",
      "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∑–≤—É—á–∞—Ç –ª–æ–≥–∏—á–Ω–æ –∏ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è"
    ],
    "correct_idx": 3,
    "why": "–î–∏–∞—Ç–æ–Ω–∏—á–µ—Å–∫–∏–µ –∞–∫–∫–æ—Ä–¥—ã ¬´—Ä–æ–¥–Ω—ã–µ¬ª –≤ –æ–¥–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –≤ –∞–∫–∫–æ—Ä–¥–µ¬ª?",
    "options": [
      "–°—Ç—Ä—É–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å",
      "–°—Ç—Ä—É–Ω—ã, –∑–∞–∂–∞—Ç—ã–µ –Ω–∞ 12-–º –ª–∞–¥—É",
      "–°—Ç—Ä—É–Ω—ã, –∑–≤—É—á–∞—â–∏–µ –±–µ–∑ –∑–∞–∂–∞—Ç–∏—è, –≤—Ö–æ–¥—è—â–∏–µ –≤ —Å–æ—Å—Ç–∞–≤ –∞–∫–∫–æ—Ä–¥–∞",
      "–°—Ç—Ä—É–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞—Å–æ–≤–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞"
    ],
    "correct_idx": 2,
    "why": "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ ‚Äî 0 –ª–∞–¥; –µ—Å–ª–∏ –µ—ë –Ω–æ—Ç–∞ –≤—Ö–æ–¥–∏—Ç –≤ –∞–∫–∫–æ—Ä–¥ ‚Äî –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å."
  },
  {
    "q": "–¢–µ–º–ø ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ä–∏—Ñ—Ñ–∞",
      "–°–∫–æ—Ä–æ—Å—Ç—å –º—É–∑—ã–∫–∏ –≤ —É–¥–∞—Ä–∞—Ö –≤ –º–∏–Ω—É—Ç—É (BPM)",
      "–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤",
      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Ç–æ–≤ –≤ –ø–µ—Å–Ω–µ"
    ],
    "correct_idx": 1,
    "why": "–¢–µ–º–ø –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ BPM –∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª—å—Å–∞."
  },
  {
    "q": "–ö–∞–∫ —á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä 4/4?",
    "options": [
      "–í —Ç–∞–∫—Ç–µ 4 –¥–æ–ª–∏, –∫–∞–∂–¥–∞—è ‚Äî –≤–æ—Å—å–º–∞—è",
      "–í —Ç–∞–∫—Ç–µ 3 –¥–æ–ª–∏, –∫–∞–∂–¥–∞—è ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å",
      "–í —Ç–∞–∫—Ç–µ 6 –¥–æ–ª–µ–π, –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 3",
      "–í —Ç–∞–∫—Ç–µ 4 –¥–æ–ª–∏, –∫–∞–∂–¥–∞—è ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å"
    ],
    "correct_idx": 3,
    "why": "–í–µ—Ä—Ö–Ω–µ–µ —á–∏—Å–ª–æ ‚Äî —á–∏—Å–ª–æ –¥–æ–ª–µ–π; –Ω–∏–∂–Ω–µ–µ ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∏."
  },
  {
    "q": "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ–Ω –¥–ª—è –≤–∞–ª—å—Å–∞?",
    "options": [
      "6/8",
      "4/4",
      "2/4",
      "3/4"
    ],
    "correct_idx": 3,
    "why": "–í–∞–ª—å—Å ‚Äî ¬´—Ä–∞–∑-–¥–≤–∞-—Ç—Ä–∏¬ª, —Ç–æ –µ—Å—Ç—å 3/4."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—É—ç—Ä-–∞–∫–∫–æ—Ä–¥ (power chord) –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∏–¥–µ?",
    "options": [
      "–¢–æ–ª—å–∫–æ —Ç–µ—Ä—Ü–∏—è –∏ –∫–≤–∏–Ω—Ç–∞",
      "–ú–∞–∂–æ—Ä —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Å–µ–∫—É–Ω–¥–æ–π",
      "–ü–æ–ª–Ω—ã–π –º–∞–∂–æ—Ä–Ω—ã–π —Ç—Ä–µ–∑–≤—É—á–Ω—ã–π –∞–∫–∫–æ—Ä–¥",
      "–û—Å–Ω–æ–≤–∞ + –∫–≤–∏–Ω—Ç–∞ (–∏–Ω–æ–≥–¥–∞ + –æ–∫—Ç–∞–≤–∞)"
    ],
    "correct_idx": 3,
    "why": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–æ—Ä–µ–Ω—å + –∫–≤–∏–Ω—Ç–∞ (+ –æ–∫—Ç–∞–≤–∞)."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Ä–ø–µ–¥–∂–∏–æ?",
    "options": [
      "–ê–∫–∫–æ—Ä–¥, —Å—ã–≥—Ä–∞–Ω–Ω—ã–π –ø–æ –Ω–æ—Ç–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ",
      "–ü—Ä–∏—ë–º –±–µ–Ω–¥-–≤–∏–±—Ä–∞—Ç–æ",
      "–ì–ª—É—à–µ–Ω–∏–µ –ª–∞–¥–æ–Ω—å—é",
      "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π —Ä–∏—Ñ—Ñ"
    ],
    "correct_idx": 0,
    "why": "–ê—Ä–ø–µ–¥–∂–∏–æ ‚Äî —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –∞–∫–∫–æ—Ä–¥, –Ω–æ—Ç—ã –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ."
  },
  {
    "q": "–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Å—Ç–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "–ò–≥—Ä–∞ ¬´–Ω–∞ —Ö–æ–¥—É¬ª –±–µ–∑ –∑–∞—É—á–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏",
      "–ü–æ–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–∞–±–æ–≤",
      "–°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∂–∏–º–∞–Ω–∏–µ –Ω–æ—Ç",
      "–¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –Ω–æ—Ç"
    ],
    "correct_idx": 0,
    "why": "–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è ‚Äî —Å–æ—á–∏–Ω–µ–Ω–∏–µ –≤ –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Å–æ–Ω–∞–Ω—Å –∏ –¥–∏—Å—Å–æ–Ω–∞–Ω—Å –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º —Å–ª—É—Ö–æ–≤–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏?",
    "options": [
      "–≠—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º–ø—ã",
      "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å ‚Äî —É—Å—Ç–æ–π—á–∏–≤–æ/–ø—Ä–∏—è—Ç–Ω–æ; –¥–∏—Å—Å–æ–Ω–∞–Ω—Å ‚Äî –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–æ/–ø—Ä–æ—Å–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
      "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å ‚Äî —Ç–æ–ª—å–∫–æ –≤ –º–∞–∂–æ—Ä–µ; –¥–∏—Å—Å–æ–Ω–∞–Ω—Å ‚Äî —Ç–æ–ª—å–∫–æ –≤ –º–∏–Ω–æ—Ä–µ",
      "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å ‚Äî –≥—Ä–æ–º–∫–æ; –¥–∏—Å—Å–æ–Ω–∞–Ω—Å ‚Äî —Ç–∏—Ö–æ"
    ],
    "correct_idx": 1,
    "why": "–ö–æ–Ω—Å–æ–Ω–∞–Ω—Å—ã —Ä–∞—Å—Å–ª–∞–±–ª—è—é—Ç —Å–ª—É—Ö, –¥–∏—Å—Å–æ–Ω–∞–Ω—Å—ã —Å–æ–∑–¥–∞—é—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ."
  }
]

================================================================================
FILE: bot\data\tests\theory_2.json
================================================================================
[
  {
    "q": "–ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥–æ–ª–æ–≤–∫–µ –≥—Ä–∏—Ñ–∞ –∏ –¥–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ?",
    "options": [
      "–ö–æ–ª–∫–∏: –∏–º–∏ —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç –Ω–∞—Ç—è–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–Ω –∏ –≤—ã—Å–æ—Ç—É –∑–≤—É–∫–∞",
      "–ó–≤—É–∫–æ—Å–Ω–∏–º–∞—Ç–µ–ª–∏: —É—Å–∏–ª–∏–≤–∞—é—Ç –∑–≤—É–∫ –∞–∫—É—Å—Ç–∏–∫–∏",
      "–ü–æ—Ä–æ–∂–µ–∫: –Ω–∞ –Ω—ë–º –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç —Å—Ç—Ä—É–Ω—ã —Å–Ω–∏–∑—É",
      "–ü–æ–¥—Å—Ç–∞–≤–∫–∞: –¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ç–æ—Ä –∏ —Ä–µ–º–µ–Ω—å"
    ],
    "correct_idx": 0,
    "why": "–ì–æ–ª–æ–≤–∫–∞ –≥—Ä–∏—Ñ–∞ –Ω–µ—Å—ë—Ç –∫–æ–ª–∫–∏ (–º–µ—Ö–∞–Ω–∏–∫–∏). –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—è –∏—Ö, –ø–æ–≤—ã—à–∞—é—Ç/–ø–æ–Ω–∏–∂–∞—é—Ç —Å—Ç—Ä–æ–π –∫–∞–∂–¥–æ–π —Å—Ç—Ä—É–Ω—ã."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∞–¥—ã –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã—Å–æ—Ç—É –∑–≤—É–∫–∞?",
    "options": [
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–æ—Å–∫–∏ –Ω–∞ –≥—Ä–∏—Ñ–µ; –∑–∞–∂–∏–º –ø–µ—Ä–µ–¥ –ª–∞–¥–æ–º –ø–æ–≤—ã—à–∞–µ—Ç –Ω–æ—Ç—É, –±–ª–∏–∂–µ –∫ –∫–æ—Ä–ø—É—Å—É ‚Äî –≤—ã—à–µ",
      "–ú–µ—Ç–∫–∏ –Ω–∞ –∫–æ—Ä–ø—É—Å–µ –¥–ª—è –¥–µ–∫–æ—Ä–∞; –Ω–∞ –∑–≤—É–∫ –Ω–µ –≤–ª–∏—è—é—Ç",
      "–í–∏–Ω—Ç—ã —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –∞–Ω–∫–µ—Ä–∞; –ø–æ–Ω–∏–∂–∞—é—Ç —Å—Ç—Ä–æ–π –≤—Å–µ–π –≥–∏—Ç–∞—Ä—ã",
      "–ü—Ä–æ—Ä–µ–∑–∏ –Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ; –¥–µ–ª–∞—é—Ç –∑–≤—É–∫ —Ç–∏—à–µ"
    ],
    "correct_idx": 0,
    "why": "–õ–∞–¥—ã –¥–µ–ª—è—Ç –º–µ–Ω–∑—É—Ä—É. –ß–µ–º –∫–æ—Ä–æ—á–µ —Ä–∞–±–æ—á–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä—É–Ω—ã (–±–ª–∏–∂–µ –∫ –∫–æ—Ä–ø—É—Å—É), —Ç–µ–º –≤—ã—à–µ –≤—ã—Å–æ—Ç–∞."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ –≥—Ä–∏—Ñ –∏ –Ω–∞–∫–ª–∞–¥–∫—É –≥—Ä–∏—Ñ–∞:",
    "options": [
      "–ù–∞–∫–ª–∞–¥–∫–∞ ‚Äî —ç—Ç–æ –≥–æ–ª–æ–≤–∫–∞ —Å –∫–æ–ª–∫–∞–º–∏",
      "–ì—Ä–∏—Ñ ‚Äî —ç—Ç–æ –∫–æ—Ä–ø—É—Å —Å —Ä–æ–∑–µ—Ç–∫–æ–π",
      "–ù–∞–∫–ª–∞–¥–∫–∞ ‚Äî –¥–µ—Ç–∞–ª—å –Ω–∞ –∫–æ—Ä–ø—É—Å–µ –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Ç—Ä—É–Ω —Å–Ω–∏–∑—É",
      "–ù–∞–∫–ª–∞–¥–∫–∞ ‚Äî —Ç—ë–º–Ω–∞—è –ø–ª–æ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –≥—Ä–∏—Ñ–∞, –ø–æ –Ω–µ–π –Ω–∞–∂–∏–º–∞—é—Ç; –≥—Ä–∏—Ñ ‚Äî –¥–ª–∏–Ω–Ω–∞—è —á–∞—Å—Ç—å –º–µ–∂–¥—É –≥–æ–ª–æ–≤–∫–æ–π –∏ –∫–æ—Ä–ø—É—Å–æ–º"
    ],
    "correct_idx": 3,
    "why": "–ì—Ä–∏—Ñ ‚Äî ¬´—à–µ—è¬ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞; –Ω–∞–∫–ª–∞–¥–∫–∞ ‚Äî —Ä–∞–±–æ—á–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–Ω–∞–º–∏ —Å –ª–∞–¥–∞–º–∏/–º–µ—Ç–∫–∞–º–∏."
  },
  {
    "q": "–ì–¥–µ –Ω–∞ –∫–æ—Ä–ø—É—Å–µ –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è —Å—Ç—Ä—É–Ω—ã —Å–Ω–∏–∑—É?",
    "options": [
      "–ù–∞ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–∏ (—Ä–æ–∑–µ—Ç–∫–µ)",
      "–ù–∞ –≥–æ–ª–æ–≤–∫–µ –≥—Ä–∏—Ñ–∞",
      "–ù–∞ –ø–æ—Ä–æ–∂–∫–µ",
      "–ù–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ (–±—Ä–∏–¥–∂–µ)"
    ],
    "correct_idx": 3,
    "why": "–ü–æ–¥—Å—Ç–∞–≤–∫–∞/–±—Ä–∏–¥–∂ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–Ω—ã –Ω–∞ –∫–æ—Ä–ø—É—Å–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥–µ–∫–∏."
  },
  {
    "q": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –ø–æ—Ä–æ–∂–µ–∫?",
    "options": [
      "–≠—Ç–æ –ø–µ–¥–∞–ª—å-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—ã",
      "–ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–Ω—ã –º–µ–∂–¥—É –≥–æ–ª–æ–≤–∫–æ–π –∏ –≥—Ä–∏—Ñ–æ–º, –∑–∞–¥–∞—ë—Ç –∏—Ö –≤—ã—Å–æ—Ç—É –Ω–∞–¥ –ª–∞–¥–∞–º–∏",
      "–°–ª—É–∂–∏—Ç –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–µ–º–Ω—è",
      "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∑–≤—É–∫ —Ç–∞–∫ –∂–µ, –∫–∞–∫ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ"
    ],
    "correct_idx": 1,
    "why": "–ü–æ—Ä–æ–∂–µ–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤—ã—Å–æ—Ç—É (action) —É –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫–æ–Ω—Ü–∞ –º–µ–Ω–∑—É—Ä—ã –∏ —Ä–∞–∑–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–Ω—ã –ø–æ –∫–∞–Ω–∞–≤–∫–∞–º."
  },
  {
    "q": "–ö–∞–∫—É—é —Ä–æ–ª—å –∏–≥—Ä–∞–µ—Ç —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ (—Ä–æ–∑–µ—Ç–∫–∞) –≤ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–í –Ω—ë–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Å—Ç–∏–Ω—ã –¥–ª—è —Å—Ç—Ä–æ—è",
      "–≠—Ç–æ —Ä–∞–∑—ä—ë–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–µ–ª—è",
      "–≠—Ç–æ —á–∏—Å—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç",
      "–ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–≤—É–∫; –∫–æ—Ä–ø—É—Å —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç –∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç –∑–≤—É—á–∞–Ω–∏–µ"
    ],
    "correct_idx": 3,
    "why": "–ü–æ–ª—ã–π –∫–æ—Ä–ø—É—Å –∏ —Ä–æ–∑–µ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä—É—é—Ç –∑–≤—É–∫ –Ω–∞—Ä—É–∂—É."
  },
  {
    "q": "–ö–∞–∫–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≥—Ä—É–∑ –æ—Ç –ø–µ–¥–∞–ª–∏",
      "–ü–ª–æ—Ç–Ω—ã–π –∫–æ—Ä–ø—É—Å –±–µ–∑ —Ä–æ–∑–µ—Ç–∫–∏, –Ω—É–∂–µ–Ω —É—Å–∏–ª–∏—Ç–µ–ª—å",
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã, —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ, –º—è–≥–∫–∏–π —Ç—ë–ø–ª—ã–π –Ω–µ–≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫",
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã, —É–∑–∫–∏–π –≥—Ä–∏—Ñ, –≥—Ä–æ–º–∫–∏–π –∑–≤–æ–Ω–∫–∏–π –∑–≤—É–∫"
    ],
    "correct_idx": 2,
    "why": "–ö–ª–∞—Å—Å–∏–∫–∞: –Ω–µ–π–ª–æ–Ω, —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ, –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤/–¥–µ—Ç–µ–π, –º—è–≥–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ."
  },
  {
    "q": "–ß—Ç–æ –≤–µ—Ä–Ω–æ –æ–± –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–ù–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã –∏ —Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π –≥—Ä–∏—Ñ",
      "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç –∫–ª–µ–Ω–æ–≤—ã–π –≥—Ä–∏—Ñ –∏ –ø–∏–∫–≥–∞—Ä–¥—É",
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–Ω—ã, –∫–æ—Ä–ø—É—Å —á–∞—Å—Ç–æ —Ñ–æ—Ä–º—ã –¥—Ä–µ–¥–Ω–æ—É—Ç, –∑–≤—É–∫ —è—Ä—á–µ –∏ –≥—Ä–æ–º—á–µ –∫–ª–∞—Å—Å–∏–∫–∏",
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –ø–æ—á—Ç–∏ –Ω–µ —Å–ª—ã—à–Ω–æ"
    ],
    "correct_idx": 2,
    "why": "–ê–∫—É—Å—Ç–∏–∫–∞: –º–µ—Ç–∞–ª–ª-—Å—Ç—Ä—É–Ω—ã, –±–æ–ª–µ–µ —É–∑–∫–∏–π –≥—Ä–∏—Ñ, –≤—ã—Å–æ–∫–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å/—è—Ä–∫–æ—Å—Ç—å."
  },
  {
    "q": "–ß—Ç–æ –≤–µ—Ä–Ω–æ –ø—Ä–æ —ç–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä—É?",
    "options": [
      "–ë–µ–∑ —É—Å–∏–ª–∏—Ç–µ–ª—è –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å —Ç–∏—Ö–æ; –¥–ª—è —Å—Ü–µ–Ω—ã –ø–æ–¥–∫–ª—é—á–∞—é—Ç –∫ —É—Å–∏–ª–∏—Ç–µ–ª—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º",
      "–í—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ –¥–µ–∫–µ",
      "–ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–µ–π–ª–æ–Ω–æ–≤—ã–µ —Å—Ç—Ä—É–Ω—ã",
      "–ù–∞ –Ω–µ–π –Ω–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –±–ª—é–∑"
    ],
    "correct_idx": 0,
    "why": "–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç —Ç—Ä–∞–∫—Ç–∞ (—É—Å–∏–ª–∏—Ç–µ–ª—å/—ç—Ñ—Ñ–µ–∫—Ç—ã); –∫–æ—Ä–ø—É—Å —É –Ω–µ—ë —Å–ø–ª–æ—à–Ω–æ–π (solid-body)."
  },
  {
    "q": "–¢—ã –≤–∫–ª—é—á–∏–ª —Ç—é–Ω–µ—Ä –∏ —Å—ã–≥—Ä–∞–ª –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É. –¢—é–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –Ω–æ—Ç—É, –Ω–æ —Å—Ç—Ä–µ–ª–∫–∞ —É—Ö–æ–¥–∏—Ç –≤–ª–µ–≤–æ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
    "options": [
      "–°–∏–ª—å–Ω–µ–µ —É–¥–∞—Ä–∏—Ç—å –ø–æ —Å—Ç—Ä—É–Ω–µ",
      "–°—Ç—Ä—É–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∏–∂–µ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–ª–∫–æ–º",
      "–ù–∏—á–µ–≥–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
      "–°—Ç—Ä—É–Ω–∞ –≤—ã—à–µ ‚Äî –æ—Å–ª–∞–±–∏—Ç—å –∫–æ–ª–∫–æ–º"
    ],
    "correct_idx": 1,
    "why": "–í–ª–µ–≤–æ ‚Äî ¬´–Ω–∏–∂–µ —Ç–æ–Ω–∞¬ª (flat). –ù–∞—Ç—è–∂–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ."
  },
  {
    "q": "–ö–∞–∫–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω –æ—Ç 6-–π –∫ 1-–π –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å—Ç—Ä–æ–µ?",
    "options": [
      "D, G, B, E, A, E",
      "E, B, G, D, A, E",
      "E, A, D, G, B, E",
      "E, D, A, G, B, E"
    ],
    "correct_idx": 2,
    "why": "–û—Ç 6-–π –∫ 1-–π: E‚ÄìA‚ÄìD‚ÄìG‚ÄìB‚ÄìE. –û–±—Ä–∞—Ç–Ω–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ (E‚ÄìB‚ÄìG‚ÄìD‚ÄìA‚ÄìE) ‚Äî —ç—Ç–æ 1‚Üí6."
  },
  {
    "q": "–ü–æ—á–µ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç—é–Ω–µ—Ä–æ–º –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞?",
    "options": [
      "–ß—Ç–æ–±—ã —Å—Ç—Ä—É–Ω—ã —Å–ª—É–∂–∏–ª–∏ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –¥–æ–ª—å—à–µ",
      "–ß—Ç–æ–±—ã –≥–∏—Ç–∞—Ä–∞ —Å—Ç–∞–ª–∞ –≥—Ä–æ–º—á–µ –±–µ–∑ —É—Å–∏–ª–∏–π",
      "–ë–µ–∑ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–æ—Ä–¥—ã —Ñ–∞–ª—å—à–∏–≤—è—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏; —Å–ª—É—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∑–≤—É–∫–µ",
      "–ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —à—É–º–∞ –æ—Ç –∫–∞–±–µ–ª—è"
    ],
    "correct_idx": 2,
    "why": "–¢–æ—á–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Äî –±–∞–∑–∞ –∞–Ω—Å–∞–º–±–ª—è –∏ —Å–ª—É—Ö–∞; –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏–µ–º ‚Äî —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∏–≤—ã—á–∫–∞."
  }
]

================================================================================
FILE: bot\data\tests\theory_3.json
================================================================================
[
  {
    "q": "–ö–∞–∫–∞—è —Å—Ç—Ä—É–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–ï–†–•–ù–ï–ô –ª–∏–Ω–∏–∏ —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã —Å –±—É–∫–≤–æ–π ¬´e¬ª?",
    "options": [
      "6-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–ª—Å—Ç–∞—è E)",
      "2-—è —Å—Ç—Ä—É–Ω–∞ (B)",
      "3-—è —Å—Ç—Ä—É–Ω–∞ (G)",
      "1-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–Ω–∫–∞—è E)"
    ],
    "correct_idx": 3,
    "why": "–í —Ç–∞–±–∞—Ö –≤–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è ‚Äî —Å–∞–º–∞—è —Ç–æ–Ω–∫–∞—è, 1-—è —Å—Ç—Ä—É–Ω–∞ (e)."
  },
  {
    "q": "–ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã —Å –±—É–∫–≤–æ–π ¬´E¬ª ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "6-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–ª—Å—Ç–∞—è E)",
      "4-—è —Å—Ç—Ä—É–Ω–∞ (D)",
      "1-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–Ω–∫–∞—è E)",
      "5-—è —Å—Ç—Ä—É–Ω–∞ (A)"
    ],
    "correct_idx": 0,
    "why": "–ù–∏–∑ —Ç–∞–±–∞ ‚Äî 6-—è —Å—Ç—Ä—É–Ω–∞ (—Ç–æ–ª—Å—Ç–∞—è –º–∏)."
  },
  {
    "q": "–ß—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±—É–ª–∞—Ç—É—Ä–∞ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏)?",
    "options": [
      "–¢–æ—á–Ω—ã–π —Ä–∏—Ç–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—Ç",
      "–ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä—É–Ω–µ –∏ –Ω–∞ –∫–∞–∫–æ–º –ª–∞–¥—É –∏–≥—Ä–∞—Ç—å",
      "–¢–µ–º–ø –∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
      "–î–∏–Ω–∞–º–∏–∫—É (–≥—Ä–æ–º–∫–æ—Å—Ç—å) –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
    ],
    "correct_idx": 1,
    "why": "–¢–∞–±—ã ‚Äî ¬´–∫–∞—Ä—Ç–∞ –ø–∞–ª—å—Ü–µ–≤¬ª: —Å—Ç—Ä—É–Ω–∞ + –ª–∞–¥; —Ä–∏—Ç–º –Ω–µ –∑–∞–¥–∞—é—Ç."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´0¬ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ?",
    "options": [
      "–°–º–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 10-–º –ª–∞–¥—É",
      "–ì–ª—É—à—ë–Ω—ã–π —É–¥–∞—Ä",
      "–ü–∞—É–∑—ã –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏",
      "–û—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É (–±–µ–∑ –ø—Ä–∏–∂–∞—Ç–∏—è)"
    ],
    "correct_idx": 3,
    "why": "–ù–æ–ª—å ‚Äî —Å—ã–≥—Ä–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä—É–Ω—É."
  },
  {
    "q": "–ó–∞–ø–∏—Å—å: E|--3--. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å?",
    "options": [
      "1-—é —Å—Ç—Ä—É–Ω—É –Ω–∞ 3-–º –ª–∞–¥—É (–Ω–æ—Ç–∞ G)",
      "5-—é —Å—Ç—Ä—É–Ω—É –Ω–∞ 3-–º –ª–∞–¥—É (–Ω–æ—Ç–∞ C)",
      "6-—é —Å—Ç—Ä—É–Ω—É –Ω–∞ 3-–º –ª–∞–¥—É (–Ω–æ—Ç–∞ G)",
      "6-—é —Å—Ç—Ä—É–Ω—É –æ—Ç–∫—Ä—ã—Ç—É—é"
    ],
    "correct_idx": 2,
    "why": "–õ–∏–Ω–∏—è E –≤–Ω–∏–∑—É ‚Äî 6-—è —Å—Ç—Ä—É–Ω–∞; 3-–π –ª–∞–¥ –¥–∞—ë—Ç –Ω–æ—Ç—É G."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞—Ç—å —Ç–∞–±—É–ª–∞—Ç—É—Ä—É –ø–æ—à–∞–≥–æ–≤–æ?",
    "options": [
      "–°–ø–µ—Ä–≤–∞ —Ä–∏—Ç–º, –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä—É–Ω—É –∏ –ª–∞–¥",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ: —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫–∫–æ—Ä–¥ –ø–æ –±—É–∫–≤–∞–º, –ø–æ—Ç–æ–º –ª–∞–¥—ã",
      "–°–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–Ω—É ‚Üí –Ω–æ–º–µ—Ä –ª–∞–¥–∞ ‚Üí –∑–∞–∂–∞—Ç—å ‚Üí —Å—ã–≥—Ä–∞—Ç—å",
      "–°–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: —Å—ã–≥—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä—É–Ω—ã, –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å –ª–∞–¥"
    ],
    "correct_idx": 2,
    "why": "–ë–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–µ–Ω–∏—è —Ç–∞–±–∞ ‚Äî —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, –ø–æ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä–µ/—Å—Ç—Ä—É–Ω–µ."
  },
  {
    "q": "–í –ø—Ä–∏–º–µ—Ä–µ –∞–∫–∫–æ—Ä–¥–∞ C –≤ —Ç–∞–±–∞—Ö –≤–µ—Ä—Ö–Ω–∏–µ —Ç—Ä–∏ —Å—Ç—Ä—É–Ω—ã –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫: e|0 B|1 G|0. –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?",
    "options": [
      "–í—Å–µ —Ç—Ä–∏ —Å—Ç—Ä—É–Ω—ã –≥–ª—É—à–∞—Ç—Å—è",
      "1-—è –æ—Ç–∫—Ä—ã—Ç–∞, 2-—è –Ω–∞ 1 –ª–∞–¥—É, 3-—è –æ—Ç–∫—Ä—ã—Ç–∞",
      "–ò–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 2-—é —Å—Ç—Ä—É–Ω—É",
      "1-—è –Ω–∞ 1 –ª–∞–¥—É, 2-—è –æ—Ç–∫—Ä—ã—Ç–∞, 3-—è –Ω–∞ 1 –ª–∞–¥—É"
    ],
    "correct_idx": 1,
    "why": "–¶–∏—Ñ—Ä–∞ ‚Äî –ª–∞–¥, ¬´0¬ª ‚Äî –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–∏–º–≤–æ–ª ¬´h¬ª –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5h7)?",
    "options": [
      "–•–∞–Ω–¥–∞–º–µ–Ω—Ç: —Å—ã–≥—Ä–∞—Ç—å –Ω–æ—Ç—É –º–µ–¥–∏–∞—Ç–æ—Ä–æ–º –≤–Ω–∏–∑",
      "–•–∞–º–º–µ—Ä-–æ–Ω: –¥–æ–±–∏—Ç—å 7-–π –ª–∞–¥ —É–¥–∞—Ä–æ–º –ø–∞–ª—å—Ü–∞ –±–µ–∑ –Ω–æ–≤–æ–≥–æ —É–¥–∞—Ä–∞ –ø–æ —Å—Ç—Ä—É–Ω–µ",
      "–•–æ–ª–¥: –ø–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ—Ç—É –¥–æ–ª—å—à–µ",
      "–•–æ—Ä—É—Å: –ø–æ–¥–∫–ª—é—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç"
    ],
    "correct_idx": 1,
    "why": "h ‚Äî hammer-on: —É–¥–∞—Ä–∏—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∞–¥—É, –Ω–µ –¥—ë—Ä–≥–∞—è —Å—Ç—Ä—É–Ω—É —Å–Ω–æ–≤–∞."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´p¬ª –≤ –∑–∞–ø–∏—Å–∏ 7p5?",
    "options": [
      "–ü–æ–∑–∏—Ü–∏—è: –ø–µ—Ä–µ–π—Ç–∏ –∫ 5-–π –ø–æ–∑–∏—Ü–∏–∏",
      "–ü–µ–¥–∞–ª—å —Å—É—Å—Ç–µ–π–Ω–∞: —É–¥–µ—Ä–∂–∞—Ç—å –Ω–æ—Ç—É",
      "–ü–∞–ª—å–º-–º—å—é—Ç: –ø—Ä–∏–≥–ª—É—à–∏—Ç—å –ª–∞–¥–æ–Ω—å—é",
      "–ü—É–ª–ª-–æ—Ñ—Ñ: —Å–Ω—è—Ç—å –ø–∞–ª–µ—Ü —Å 7-–≥–æ –ª–∞–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–æ–∑–≤—É—á–∞–ª 5-–π"
    ],
    "correct_idx": 3,
    "why": "p ‚Äî pull-off: –æ—Ç—Ç—è–∂–∫–∞ —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–∞–¥–∞ –∫ –Ω–∏–∂–Ω–µ–º—É."
  },
  {
    "q": "–ö–∞–∫–∞—è –ø–∞—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–æ —Å–ª–∞–π–¥–∞–º–∏ ¬´/¬ª –∏ ¬´\\¬ª?",
    "options": [
      "¬´/¬ª ‚Äî —Å–ª–∞–π–¥ –≤–Ω–∏–∑, ¬´\\¬ª ‚Äî –≤–≤–µ—Ä—Ö",
      "–û–±–∞ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –±–µ–Ω–¥",
      "–û–±–∞ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –≥–ª—É—à–µ–Ω–∏–µ",
      "¬´/¬ª ‚Äî —Å–ª–∞–π–¥ –≤–≤–µ—Ä—Ö –ø–æ –≥—Ä–∏—Ñ—É, ¬´\\¬ª ‚Äî —Å–ª–∞–π–¥ –≤–Ω–∏–∑"
    ],
    "correct_idx": 3,
    "why": "–ö–æ—Å–∞—è –≤–ø–µ—Ä—ë–¥ ‚Äî –≤–≤–µ—Ä—Ö, –æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–∞—è ‚Äî –≤–Ω–∏–∑."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–≤—è–∑–∫–∞ 7b8r7 –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "–°—ã–≥—Ä–∞—Ç—å 7-–π –∏ 8-–π –ª–∞–¥—ã –æ–±—ã—á–Ω—ã–º –ª–µ–≥–∞—Ç–æ",
      "–°–¥–µ–ª–∞—Ç—å –¥–≤–∞ —Å–ª–∞–π–¥–∞: 7‚Üí8 –∏ 8‚Üí7",
      "–°—ã–≥—Ä–∞—Ç—å –≥–ª—É—à—ë–Ω—ã–µ —É–¥–∞—Ä—ã –Ω–∞ 7-–º –ª–∞–¥—É",
      "–°–¥–µ–ª–∞—Ç—å –±–µ–Ω–¥ —Å 7-–≥–æ –¥–æ –≤—ã—Å–æ—Ç—ã 8-–≥–æ –ª–∞–¥–∞ –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 7"
    ],
    "correct_idx": 3,
    "why": "b ‚Äî bend –¥–æ –≤—ã—Å–æ—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—Ç—ã; r ‚Äî release, –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä—É–Ω—É –Ω–∞–∑–∞–¥."
  },
  {
    "q": "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≥–ª—É—à—ë–Ω—ã–π —É–¥–∞—Ä, –∞ –∫–∞–∫–æ–π ‚Äî –≤–∏–±—Ä–∞—Ç–æ?",
    "options": [
      "x ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, ~ ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "t ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, x ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "~ ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, x ‚Äî –≤–∏–±—Ä–∞—Ç–æ",
      "( ) ‚Äî –≥–ª—É—à–µ–Ω–∏–µ, ~ ‚Äî –≤–∏–±—Ä–∞—Ç–æ"
    ],
    "correct_idx": 0,
    "why": "x ‚Äî ¬´—Ç—é–∫¬ª –±–µ–∑ –≤—ã—Å–æ—Ç—ã; ~ ‚Äî –∫–æ–ª–µ–±–∞–Ω–∏–µ –≤—ã—Å–æ—Ç—ã (–≤–∏–±—Ä–∞—Ç–æ)."
  }
]

================================================================================
FILE: bot\data\tests\theory_4.json
================================================================================
[
  {
    "q": "–ì–ª–∞–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –Ω–æ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é?",
    "options": [
      "–¢–∞–±—ã –Ω–µ–ª—å–∑—è —á–∏—Ç–∞—Ç—å —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ",
      "–¢–∞–±—ã –ø–æ—á—Ç–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—á–Ω–æ",
      "–¢–∞–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–µ–º–ø –∏ —Ä–∞–∑–º–µ—Ä",
      "–¢–∞–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–æ–º–µ—Ä–∞ –ª–∞–¥–æ–≤"
    ],
    "correct_idx": 1,
    "why": "–¢–∞–±—É–ª–∞—Ç—É—Ä–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –∏–≥—Ä–∞—Ç—å (—Å—Ç—Ä—É–Ω–∞/–ª–∞–¥), –Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ã—á–Ω–æ –Ω–µ –∫–æ–¥–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ."
  },
  {
    "q": "–°–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∏—Ç–º –∏–∑ –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏:",
    "options": [
      "–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–º–µ—Ä –ª–∞–¥–∞",
      "–°–ª—É—à–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å",
      "–ò–≥—Ä–∞—Ç—å –≤—Å–µ –Ω–æ—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–æ–ª–≥–æ",
      "–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ü–≤–µ—Ç —Ü–∏—Ñ—Ä –≤ —Ç–∞–±–µ"
    ],
    "correct_idx": 1,
    "why": "–†–∏—Ç–º –±–µ—Ä—É—Ç –Ω–∞ —Å–ª—É—Ö –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—É. –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –¥–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
  },
  {
    "q": "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã?",
    "options": [
      "–ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª ‚Äî —Ç–µ–º –¥–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)",
      "–ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª ‚Äî —Ç–µ–º –Ω–∏–∂–µ –ø–æ –≤—ã—Å–æ—Ç–µ –Ω–æ—Ç–∞",
      "–ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª ‚Äî —Ç–µ–º —Ç–∏—à–µ –Ω–æ—Ç–∞",
      "–ü—Ä–æ–±–µ–ª—ã –Ω–µ –Ω–µ—Å—É—Ç –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    ],
    "correct_idx": 0,
    "why": "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞–º–µ–∫–∞—Ç—å –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ —ç—Ç–æ –ª–∏—à—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä, –Ω–µ —Ç–æ—á–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ ¬´|¬ª –≤ —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ/Songsterr?",
    "options": [
      "–ì—Ä–∞–Ω–∏—Ü—ã —Ç–∞–∫—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª—è—é—Ç –º—É–∑—ã–∫—É –ø–æ —Å—á—ë—Ç—É)",
      "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–Ω—É",
      "–ú–µ—Å—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã –º–µ–¥–∏–∞—Ç–æ—Ä–∞",
      "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–Ω–¥–∞"
    ],
    "correct_idx": 0,
    "why": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –º–∞—Ä–∫–∏—Ä—É—é—Ç —Ç–∞–∫—Ç—ã –∏ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å—á—ë—Ç–µ."
  },
  {
    "q": "–ß—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç Songsterr –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å ¬´–≥–æ–ª–æ–π¬ª —Ç–∞–±—É–ª–∞—Ç—É—Ä–æ–π?",
    "options": [
      "–ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ —Ç–µ–º–ø–∞ –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
      "–¢–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –∑–≤—É–∫–∞",
      "–†–∏—Ç–º–∏—á–µ—Å–∫—É—é –Ω–æ—Ç–∞—Ü–∏—é: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–∞–±–æ–º",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥–º–µ–Ω—É –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –Ω–∞ –Ω–æ—Ç—ã –±—É–∫–≤–∞–º–∏"
    ],
    "correct_idx": 2,
    "why": "–í Songsterr –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –¥–æ—Ä–æ–∂–∫–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å —Ç–∞–±–æ–º."
  },
  {
    "q": "–ì–¥–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Songsterr –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–º–µ–Ω–Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—Ç?",
    "options": [
      "–í –Ω–æ–º–µ—Ä–µ –ª–∞–¥–∞ —Ä—è–¥–æ–º —Å –±—É–∫–≤–æ–π —Å—Ç—Ä—É–Ω—ã",
      "–í —Ü–≤–µ—Ç–µ —Ü–∏—Ñ—Ä –Ω–∞ —Å—Ç—Ä—É–Ω–∞—Ö",
      "–ù–∞ –ª–∏–Ω–∏–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–æ—Ç —Å–Ω–∏–∑—É (—á–µ—Ç–≤–µ—Ä—Ç–∏, –≤–æ—Å—å–º—ã–µ –∏ —Ç.–¥.)",
      "–í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ —Å–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞"
    ],
    "correct_idx": 2,
    "why": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è –Ω–æ—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å —Ç–∞–±–æ–º."
  },
  {
    "q": "–°–æ–æ—Ç–Ω–µ—Å–∏ —Å–∏–º–≤–æ–ª –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ:",
    "options": [
      "‚ô© ‚Äî –≤–æ—Å—å–º–∞—è, ‚ô™ ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å, ùÖ° ‚Äî –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è",
      "‚ô© ‚Äî —Ü–µ–ª–∞—è, ‚ô™ ‚Äî –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è, ùÖ° ‚Äî –≤–æ—Å—å–º–∞—è",
      "‚ô© ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å (1 —É–¥–∞—Ä), ‚ô™ ‚Äî –≤–æ—Å—å–º–∞—è (¬Ω —É–¥–∞—Ä–∞), ùÖ° ‚Äî —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è (¬º —É–¥–∞—Ä–∞)",
      "‚ô© ‚Äî –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è, ‚ô™ ‚Äî —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è, ùÖ° ‚Äî —á–µ—Ç–≤–µ—Ä—Ç—å"
    ],
    "correct_idx": 2,
    "why": "–°—Ç–∞–Ω–¥–∞—Ä—Ç: —á–µ—Ç–≤–µ—Ä—Ç—å ‚ô© = 1, –≤–æ—Å—å–º–∞—è ‚ô™ = 1/2, —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è ùÖ° = 1/4 –æ—Ç —á–µ—Ç–≤–µ—Ä—Ç–∏."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ —É–¥–∞—Ä–æ–≤ –¥–µ—Ä–∂–∏—Ç—Å—è ùÖû (–ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è –Ω–æ—Ç–∞) –≤ —Ä–∞–∑–º–µ—Ä–µ —Å —á–µ—Ç–≤–µ—Ä—Ç–Ω–æ–π –¥–æ–ª–µ–π –∑–∞ –µ–¥–∏–Ω–∏—Ü—É?",
    "options": [
      "1 —É–¥–∞—Ä",
      "2 —É–¥–∞—Ä–∞",
      "4 —É–¥–∞—Ä–∞",
      "1/2 —É–¥–∞—Ä–∞"
    ],
    "correct_idx": 1,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî –≤–¥–≤–æ–µ –¥–ª–∏–Ω–Ω–µ–µ —á–µ—Ç–≤–µ—Ä—Ç–∏: 2 —Å—á–µ—Ç–∞."
  },
  {
    "q": "–ö–∞–∫ –æ–±—ã—á–Ω–æ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç —Å—á—ë—Ç –¥–ª—è –≤–æ—Å—å–º—ã—Ö –Ω–æ—Ç –≤ –æ–¥–Ω–æ–º —Ç–∞–∫—Ç–µ –Ω–∞ 4/4?",
    "options": [
      "1-–µ-–∏-–∞",
      "—Ä–∞–∑-–¥–≤–∞-—Ç—Ä–∏",
      "1-–∏-–∞",
      "1-–∏, 2-–∏, 3-–∏, 4-–∏"
    ],
    "correct_idx": 3,
    "why": "–í–æ—Å—å–º—ã–µ –¥–µ–ª—è—Ç —á–µ—Ç–≤–µ—Ä—Ç—å –ø–æ–ø–æ–ª–∞–º, –æ–±—ã—á–Ω–æ —Å—á–∏—Ç–∞—é—Ç '1-–∏, 2-–∏‚Ä¶'. '1-–µ-–∏-–∞' ‚Äî —ç—Ç–æ –¥–ª—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—ã—Ö."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ–±—ã—á–Ω–æ–π —Ç–∞–±—É–ª–∞—Ç—É—Ä–µ –≤–∏–¥–∞ e|--0--0--2--0--3--3--2--|:",
    "options": [
      "–ù—É–ª–∏ –≤—Å–µ–≥–¥–∞ –∏–≥—Ä–∞—é—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞ –¥–æ–ª—å—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö",
      "–ß–µ–º –±–æ–ª—å—à–µ –Ω–æ–º–µ—Ä –ª–∞–¥–∞, —Ç–µ–º –¥–ª–∏–Ω–Ω–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "–û–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤–∏–¥ —Ü–∏—Ñ—Ä –Ω–µ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—Ç",
      "–õ—é–±–∞—è —Ü–∏—Ñ—Ä–∞ –≤ —Ç–∞–±–µ ‚Äî –≤—Å–µ–≥–¥–∞ —á–µ—Ç–≤–µ—Ä—Ç—å"
    ],
    "correct_idx": 2,
    "why": "–í —Ç–∞–±–∞—Ö –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –∑–∞—à–∏—Ç–∞ –≤ —Å–∞–º—É —Ü–∏—Ñ—Ä—É/–ª–∞–¥."
  },
  {
    "q": "–ö–∞–∫–æ–π –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Å Songsterr?",
    "options": [
      "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫—Ç–æ–≤—ã–µ —á–µ—Ä—Ç—ã –∏ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã",
      "–í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∏—Ç–º–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–¥–ª—è—Ç—å –∏ –∏–≥—Ä–∞—Ç—å –≤ —Å—á—ë—Ç",
      "–°—Ä–∞–∑—É –∏–≥—Ä–∞—Ç—å –≤–¥–≤–æ–µ –±—ã—Å—Ç—Ä–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
      "–ò–≥—Ä–∞—Ç—å –Ω–∞—É–≥–∞–¥ –±–µ–∑ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º —É—Å–∫–æ—Ä—è—Ç—å –¥–æ –º–∞–∫—Å–∏–º—É–º–∞"
    ],
    "correct_idx": 1,
    "why": "Songsterr —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–µ–¥—ë—Ç —Ä–∏—Ç–º; –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –∏ –∏–≥—Ä–∞ –≤ —Å—á—ë—Ç –ø–æ–≤—ã—à–∞—é—Ç —Ç–æ—á–Ω–æ—Å—Ç—å."
  },
  {
    "q": "–ö–∞–∫–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∏—Ç–º–∞ –∏–∑ —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
    "options": [
      "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏",
      "–ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –º–æ–≥—É—Ç –ø–æ–º–æ–≥–∞—Ç—å, –Ω–æ —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Ä–∏—Ç–º-—Ä–∞–∑–º–µ—Ç–∫–æ–π",
      "–ù–æ–º–µ—Ä –ª–∞–¥–∞ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∑–∞–¥–∞—ë—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
      "–ü—Ä–æ–±–µ–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã –Ω–æ—Ç–Ω—ã–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º"
    ],
    "correct_idx": 1,
    "why": "–ü—Ä–æ–±–µ–ª ‚Äî –ª–∏—à—å –ø–æ–¥—Å–∫–∞–∑–∫–∞. –¢–æ—á–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—é—Ç –∑–≤—É–∫, —Å—á—ë—Ç –∏/–∏–ª–∏ –Ω–æ—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π."
  }
]

================================================================================
FILE: bot\data\tests\theory_5.json
================================================================================
[
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–¥–æ–ª—è¬ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—á—ë—Ç–∞?",
    "options": [
      "–£–¥–∞—Ä –ø–æ –±–∞—Å–æ–≤–æ–π —Å—Ç—Ä—É–Ω–µ",
      "–°–º–µ–Ω–∞ –∞–∫–∫–æ—Ä–¥–∞",
      "–õ—é–±–∞—è –¥–ª–∏–Ω–Ω–∞—è –Ω–æ—Ç–∞",
      "–û–¥–∏–Ω —É–¥–∞—Ä –ø—É–ª—å—Å–∞ (–µ–¥–∏–Ω–∏—Ü–∞ —Å—á—ë—Ç–∞)"
    ],
    "correct_idx": 3,
    "why": "–î–æ–ª—è ‚Äî —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã–π —É–¥–∞—Ä –ø—É–ª—å—Å–∞: 1, 2, 3, 4‚Ä¶"
  },
  {
    "q": "–ö–∞–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ä–∂–∏—Ç—Å—è –≤–µ—Å—å —Ç–∞–∫—Ç 4/4?",
    "options": [
      "–í–æ—Å—å–º–∞—è",
      "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è",
      "–¶–µ–ª–∞—è",
      "–ß–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è"
    ],
    "correct_idx": 2,
    "why": "–¶–µ–ª–∞—è –Ω–æ—Ç–∞ = 4 –¥–æ–ª–∏, –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ü–µ–ª—ã–π —Ç–∞–∫—Ç 4/4."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –¥–æ–ª–µ–π –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è –Ω–æ—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 4/4?",
    "options": [
      "2 –¥–æ–ª–∏",
      "4 –¥–æ–ª–∏",
      "1/2 –¥–æ–ª–∏",
      "1 –¥–æ–ª—è"
    ],
    "correct_idx": 0,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è = 2 —á–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –¥–æ–ª–∏."
  },
  {
    "q": "–ö–∞–∫ –≤—Å–ª—É—Ö –æ–±—ã—á–Ω–æ —Å—á–∏—Ç–∞—é—Ç –≤–æ—Å—å–º—ã–µ –Ω–æ—Ç—ã –≤ —Ç–∞–∫—Ç–µ 4/4?",
    "options": [
      "–†–ê–ó-–∏-–î–í–ê-–∏-–¢–†–ò-–∏-–ß–ï–¢–´–†–ï-–∏",
      "–†–ê–ó-–µ-–∏-–∞",
      "–†–ê–ó-–¥–≤–∞, –¢–†–ò-—á–µ—Ç—ã—Ä–µ",
      "–†–ê–ó-–¥–≤–∞-—Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ"
    ],
    "correct_idx": 0,
    "why": "–í–æ—Å—å–º—ã–µ –¥–µ–ª—è—Ç –∫–∞–∂–¥—É—é —á–µ—Ç–≤–µ—Ä—Ç—å –Ω–∞ –¥–≤–∞ —Å–ª–æ–≥–∞: ¬´—Ä–∞–∑-–∏¬ª."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –≤–æ—Å—å–º—ã—Ö –Ω–æ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ç–∞–∫—Ç 4/4?",
    "options": [
      "2",
      "8",
      "4",
      "16"
    ],
    "correct_idx": 1,
    "why": "–ö–∞–∂–¥–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å = –¥–≤–µ –≤–æ—Å—å–º—ã–µ; 4√ó2 = 8."
  },
  {
    "q": "–°–æ–æ—Ç–Ω–µ—Å–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:",
    "options": [
      "–¶–µ–ª–∞—è ‚Äî 4; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 1; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 2; –≤–æ—Å—å–º–∞—è ‚Äî 1",
      "–¶–µ–ª–∞—è ‚Äî 1; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 2; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 4; –≤–æ—Å—å–º–∞—è ‚Äî 8",
      "–¶–µ–ª–∞—è ‚Äî 2; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 1; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 4; –≤–æ—Å—å–º–∞—è ‚Äî 1/2",
      "–¶–µ–ª–∞—è ‚Äî 4; –ø–æ–ª–æ–≤–∏–Ω–Ω–∞—è ‚Äî 2; —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è ‚Äî 1; –≤–æ—Å—å–º–∞—è ‚Äî 1/2"
    ],
    "correct_idx": 3,
    "why": "–ë–∞–∑–æ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ —Å—á—ë—Ç–µ 4/4: 4‚Äì2‚Äì1‚Äì¬Ω."
  },
  {
    "q": "–ö–∞–∫–∞—è –¥–æ–ª—è –æ–±—ã—á–Ω–æ —Å–∏–ª—å–Ω–∞—è –≤ —Ä–∞–∑–º–µ—Ä–µ 4/4?",
    "options": [
      "–í—Ç–æ—Ä–∞—è",
      "–ß–µ—Ç–≤—ë—Ä—Ç–∞—è",
      "–¢—Ä–µ—Ç—å—è",
      "–ü–µ—Ä–≤–∞—è (¬´–†–ê–ó¬ª)"
    ],
    "correct_idx": 3,
    "why": "–°—Ç–∞—Ä—Ç —Ç–∞–∫—Ç–∞ (1-—è –¥–æ–ª—è) —á–∞—â–µ –∞–∫—Ü–µ–Ω—Ç–Ω–∞—è."
  },
  {
    "q": "–ß–µ–º ¬´–ø—É–ª—å—Å¬ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç ¬´—Ä–∏—Ç–º–∞¬ª?",
    "options": [
      "–†–∞–∑–Ω–∏—Ü—ã –Ω–µ—Ç ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ",
      "–ü—É–ª—å—Å ‚Äî —ç—Ç–æ –¥–ª–∏–Ω–Ω—ã–µ –Ω–æ—Ç—ã, —Ä–∏—Ç–º ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ",
      "–ü—É–ª—å—Å ‚Äî —Ä–æ–≤–Ω—ã–µ —É–¥–∞—Ä—ã —Å—á—ë—Ç–∞; —Ä–∏—Ç–º ‚Äî —É–∑–æ—Ä –¥–ª–∏–Ω/–∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–≤—É–∫–æ–≤ –ø–æ–≤–µ—Ä—Ö –ø—É–ª—å—Å–∞",
      "–ü—É–ª—å—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ–ª–æ–¥–∏–∏, —Ä–∏—Ç–º ‚Äî –Ω–µ—Ç"
    ],
    "correct_idx": 2,
    "why": "–ü—É–ª—å—Å —Å—Ç–∞–±–∏–ª–µ–Ω (–∫–∞–∫ –º–µ—Ç—Ä–æ–Ω–æ–º), —Ä–∏—Ç–º –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–æ–ª–µ–π."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–µ –Ω–æ—Ç—ã –≤ —Ç–∞–∫—Ç–µ 4/4?",
    "options": [
      "¬´–†–ê–ó-–¥–≤–∞-—Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ¬ª ‚Äî –ø–æ –æ–¥–Ω–æ–π –¥–æ–ª–µ",
      "¬´–†–ê–ó-–∏-–î–í–ê-–∏-–¢–†–ò-–∏-–ß–ï–¢–´–†–ï-–∏¬ª ‚Äî –ø–æ –ø–æ–ª–¥–æ–ª–∏",
      "¬´–†–ê–ó-–µ-–∏-–∞¬ª ‚Äî –ø–æ —á–µ—Ç–≤–µ—Ä—Ç–∏ –¥–æ–ª–∏",
      "¬´–†–ê–ó-–¥–≤–∞¬ª –∏ ¬´–¢–†–ò-—á–µ—Ç—ã—Ä–µ¬ª ‚Äî –ø–æ –¥–≤–µ –¥–æ–ª–∏ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ—Ç—É"
    ],
    "correct_idx": 3,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç –¥–≤–µ —á–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –¥–æ–ª–∏."
  },
  {
    "q": "–ï—Å–ª–∏ —Ç—ã —Ö–ª–æ–ø–∞–µ—à—å 4 —Ä–∞–≤–Ω—ã—Ö —É–¥–∞—Ä–∞ ¬´—Ä–∞–∑-–¥–≤–∞-—Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ¬ª, —á—Ç–æ —ç—Ç–æ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º?",
    "options": [
      "–¶–µ–ª—ã–µ",
      "–í–æ—Å—å–º—ã–µ",
      "–ß–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ",
      "–ü–æ–ª–æ–≤–∏–Ω–Ω—ã–µ"
    ],
    "correct_idx": 2,
    "why": "–ö–∞–∂–¥—ã–π —Ö–ª–æ–ø–æ–∫ = 1 –¥–æ–ª—è ‚Üí —á–µ—Ç–≤–µ—Ä—Ç–Ω–∞—è."
  },
  {
    "q": "–ö–∞–∫ —Å–≤—è–∑–∞–Ω—ã –ø–æ–Ω—è—Ç–∏—è ¬´–ø—É–ª—å—Å¬ª, ¬´–¥–æ–ª—è¬ª, ¬´—Ä–∏—Ç–º¬ª?",
    "options": [
      "–ü—É–ª—å—Å ‚Äî —É–∑–æ—Ä –Ω–æ—Ç; –¥–æ–ª—è ‚Äî —Ç–µ–º–ø; —Ä–∏—Ç–º ‚Äî –≥—Ä–æ–º–∫–æ—Å—Ç—å",
      "–ü—É–ª—å—Å –¥–∞—ë—Ç —Ä–æ–≤–Ω—ã–µ —É–¥–∞—Ä—ã; –¥–æ–ª—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –ø—É–ª—å—Å–∞; —Ä–∏—Ç–º ‚Äî –∫–∞–∫ –∑–≤—É—á–∞—Ç –Ω–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –¥–æ–ª–µ–π",
      "–ü—É–ª—å—Å –∏ —Ä–∏—Ç–º –∑–∞–¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ –±–∞—Å-–≥–∏—Ç–∞—Ä–∞",
      "–ü—É–ª—å—Å ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤; –¥–æ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–∫–∞–ª–∞; —Ä–∏—Ç–º ‚Äî –¥–ª—è –≥–∏—Ç–∞—Ä—ã"
    ],
    "correct_idx": 1,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞: –ø—É–ª—å—Å (–º–µ—Ç—Ä), –¥–æ–ª—è (–µ–¥–∏–Ω–∏—Ü–∞), —Ä–∏—Ç–º (—Ä–∏—Å—É–Ω–æ–∫)."
  },
  {
    "q": "–í —Ç–∞–∫—Ç–µ 4/4 —Ç—ã —Å—ã–≥—Ä–∞–ª –¥–≤–µ —Ä–æ–≤–Ω—ã–µ –Ω–æ—Ç—ã, –∫–∞–∂–¥–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ –¥–≤–∞ —Å—á—ë—Ç–∞. –ß—Ç–æ —ç—Ç–æ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —á–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω —Ç–∞–∫—Ç?",
    "options": [
      "–î–≤–µ —á–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ; —Ç–∞–∫—Ç –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É –ø—É—Å—Ç",
      "–î–≤–µ –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–µ; —Ç–∞–∫—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é",
      "–î–≤–µ –≤–æ—Å—å–º—ã–µ; —Ç–∞–∫—Ç –ø–æ—á—Ç–∏ –ø—É—Å—Ç",
      "–î–≤–µ —Ü–µ–ª—ã–µ; —Ç–∞–∫—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω"
    ],
    "correct_idx": 1,
    "why": "–ü–æ–ª–æ–≤–∏–Ω–Ω—ã–µ = –ø–æ 2 –¥–æ–ª–∏ –∫–∞–∂–¥–∞—è; 2√ó2 = 4 –¥–æ–ª–∏ —Ç–∞–∫—Ç–∞."
  }
]

================================================================================
FILE: bot\data\tests\theory_6.json
================================================================================
[
  {
    "q": "–°—Ç—Ä–æ–≥–æ –≥–æ–≤–æ—Ä—è, —á—Ç–æ —Ç–∞–∫–æ–µ ¬´–ª–∞–¥¬ª –Ω–∞ –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–õ—é–±–∞—è –æ—Ç–º–µ—Ç–∫–∞-—Ç–æ—á–∫–∞ –Ω–∞ –Ω–∞–∫–ª–∞–¥–∫–µ",
      "–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ä–æ–∂–∫–∞–º–∏",
      "–õ—é–±–∞—è —á–∞—Å—Ç—å –∫–æ—Ä–ø—É—Å–∞ –≤–æ–∑–ª–µ —Ä–æ–∑–µ—Ç–∫–∏",
      "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –ø–æ–ª–æ—Å–∫–∞ –Ω–∞ –≥—Ä–∏—Ñ–µ"
    ],
    "correct_idx": 1,
    "why": "–í —Ä–∞–∑–¥–µ–ª–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è: –ª–∞–¥ ‚Äî —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ—Ä–æ–∂–∫–∞–º–∏."
  },
  {
    "q": "–ö—É–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –ø–∞–ª–µ—Ü –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏ –Ω–æ—Ç—ã –≤ –ª–∞–¥—É?",
    "options": [
      "–†–æ–≤–Ω–æ –Ω–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é –ø–æ–ª–æ—Å–∫—É",
      "–≠—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ ‚Äî –∑–≤—É–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π",
      "–ü–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –º–µ–∂–¥—É –ª–∞–¥–æ–≤—ã–º–∏ –ø–æ—Ä–æ–∂–∫–∞–º–∏, –∫–∞–∫ –º–æ–∂–Ω–æ –¥–∞–ª—å—à–µ –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ",
      "–í–Ω—É—Ç—Ä–∏ –ª–∞–¥–∞, –±–ª–∏–∂–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π –ø–æ–ª–æ—Å–∫–µ"
    ],
    "correct_idx": 3,
    "why": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–∞–ª–µ—Ü –≤–Ω—É—Ç—Ä–∏ –ª–∞–¥–∞, –±–ª–∏–∂–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Ä–æ–∂–∫—É ‚Äî —á–∏—â–µ –∑–≤—É–∫ –∏ –º–µ–Ω—å—à–µ –¥—Ä–µ–±–µ–∑–≥."
  },
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´–ø–æ–∑–∏—Ü–∏—è¬ª –ª–µ–≤–æ–π —Ä—É–∫–∏?",
    "options": [
      "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ –≥–∏—Ç–∞—Ä—ã –Ω–∞ –∫–æ–ª–µ–Ω–µ",
      "–£—á–∞—Å—Ç–æ–∫ –≥—Ä–∏—Ñ–∞, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–µ–≤–∞—è —Ä—É–∫–∞; –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–µ–Ω –Ω–æ–º–µ—Ä—É –ª–∞–¥–∞ –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º",
      "–õ—é–±–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä—É–Ω –Ω–∞–¥ –≥—Ä–∏—Ñ–æ–º",
      "–õ—é–±–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥"
    ],
    "correct_idx": 1,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞: –ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ª–∞–¥—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü."
  },
  {
    "q": "–ï—Å–ª–∏ —Ç—ã –∏–≥—Ä–∞–µ—à—å –Ω–∞ –ª–∞–¥–∞—Ö 5‚Äì8 —Å —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º –Ω–∞ 5-–º –ª–∞–¥—É, –≤ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?",
    "options": [
      "–í –ø–µ—Ä–≤–æ–π",
      "–í –≤–æ—Å—å–º–æ–π",
      "–í –ø—è—Ç–æ–π",
      "–í —á–µ—Ç–≤—ë—Ä—Ç–æ–π"
    ],
    "correct_idx": 2,
    "why": "–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = –Ω–æ–º–µ—Ä –ª–∞–¥–∞ –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º ‚Üí 5-—è –ø–æ–∑–∏—Ü–∏—è."
  },
  {
    "q": "–ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –∑–≤—É–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–¥ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫ –∫–æ—Ä–ø—É—Å—É?",
    "options": [
      "–ù–µ –º–µ–Ω—è–µ—Ç—Å—è",
      "–ù–∞ –ø–æ–ª—Ç–æ–Ω–∞ –≤—ã—à–µ",
      "–ù–∞ —Ç–æ–Ω –≤—ã—à–µ",
      "–ù–∞ –ø–æ–ª—Ç–æ—Ä–∞ —Ç–æ–Ω–∞ –≤—ã—à–µ"
    ],
    "correct_idx": 1,
    "why": "–ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –ª–∞–¥ –ø–æ–≤—ã—à–∞–µ—Ç –Ω–æ—Ç—É –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞."
  },
  {
    "q": "–ö–∞–∫–æ–≤–∞ —Ä–æ–ª—å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø–æ—Ä–æ–∂–∫–∞ (—É –≥–æ–ª–æ–≤–∫–∏ –≥—Ä–∏—Ñ–∞)?",
    "options": [
      "–†–µ–≥—É–ª–∏—Ä—É–µ—Ç –∞–Ω–∫–µ—Ä–Ω—ã–π —Å—Ç–µ—Ä–∂–µ–Ω—å",
      "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∑–≤—É–∫ –∫–∞–∫ —Ä–æ–∑–µ—Ç–∫–∞",
      "–°–ª—É–∂–∏—Ç –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–µ–º–Ω—è",
      "–ü–æ–¥–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä—É–Ω—ã, –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∏ –æ—Ç–¥–µ–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä—É–Ω—ã –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∏—Ñ–∞"
    ],
    "correct_idx": 3,
    "why": "–í —Ç–µ–∫—Å—Ç–µ: –ø–æ—Ä–æ–∂–µ–∫ –ø–æ–¥–Ω–∏–º–∞–µ—Ç/–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–Ω—ã –∏ –æ—Ç–¥–µ–ª—è–µ—Ç –∑–æ–Ω—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä—É–Ω."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –Ω–∞ 1-–π —Å—Ç—Ä—É–Ω–µ (E) –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 3-–º –ª–∞–¥—É?",
    "options": [
      "F",
      "A",
      "G",
      "F‚ôØ"
    ],
    "correct_idx": 2,
    "why": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1-–π —Å—Ç—Ä—É–Ω—ã: 0 E, 1 F, 2 F‚ôØ, 3 G, 4 G‚ôØ, 5 A."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –Ω–∞ 5-–π —Å—Ç—Ä—É–Ω–µ (A) –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 3-–º –ª–∞–¥—É?",
    "options": [
      "F",
      "B",
      "C",
      "D‚ôØ"
    ],
    "correct_idx": 2,
    "why": "5-—è —Å—Ç—Ä—É–Ω–∞: 0 A, 1 A‚ôØ, 2 B, 3 C, 4 C‚ôØ, 5 D."
  },
  {
    "q": "–ù–∞ –∫–∞–∫–∏—Ö –ø–∞—Ä–∞—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç –ù–ï–¢ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø–æ–ª—É—Ç–æ–Ω–∞ (—Ç–æ –µ—Å—Ç—å –Ω–µ—Ç –¥–∏–µ–∑–∞ –º–µ–∂–¥—É –Ω–∏–º–∏)?",
    "options": [
      "E‚ÄìF –∏ B‚ÄìC",
      "F‚ÄìG",
      "A‚ÄìB",
      "C‚ÄìD"
    ],
    "correct_idx": 0,
    "why": "–ò—Å–∫–ª—é—á–µ–Ω–∏—è: –º–µ–∂–¥—É E‚ÄìF –∏ B‚ÄìC —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –ø–æ–ª—Ç–æ–Ω–∞."
  },
  {
    "q": "–ì–¥–µ –æ–±—ã—á–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Ç–æ—á–∫–∏-–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ –≥—Ä–∏—Ñ–∞?",
    "options": [
      "–ù–∞ 1-–º –∏ 2-–º –ª–∞–¥–∞—Ö",
      "–ù–∞ 3-–º –∏ 5-–º –ª–∞–¥–∞—Ö",
      "–ù–∞ 2-–º –∏ 4-–º –ª–∞–¥–∞—Ö",
      "–ù–∞ 4-–º –∏ 6-–º –ª–∞–¥–∞—Ö"
    ],
    "correct_idx": 1,
    "why": "–í —Ç–µ–∫—Å—Ç–µ —É–∫–∞–∑–∞–Ω–æ: —á–∞—â–µ –≤—Å–µ–≥–æ –º–µ—Ç–∫–∏ –µ—Å—Ç—å –Ω–∞ 3-–º –∏ 5-–º –ª–∞–¥–∞—Ö."
  },
  {
    "q": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´0 –ª–∞–¥¬ª –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–æ—Ç –ø–æ —Å—Ç—Ä—É–Ω–∞–º?",
    "options": [
      "–ó–∞–∂–∞—Ç—å –ø–µ—Ä–≤—ã–π –ª–∞–¥",
      "–ì–ª—É—à—ë–Ω—ã–π —É–¥–∞—Ä",
      "–§–ª–∞–∂–æ–ª–µ—Ç –Ω–∞ 12-–º –ª–∞–¥—É",
      "–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ (–Ω–µ –∑–∞–∂–∞—Ç–∞)"
    ],
    "correct_idx": 3,
    "why": "0 = –æ—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä—É–Ω–∞."
  },
  {
    "q": "–ü–æ—á–µ–º—É 5-–π –ª–∞–¥ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–∞–∫ –æ–ø–æ—Ä–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –æ–±—É—á–µ–Ω–∏—è?",
    "options": [
      "–û–Ω —Å–∞–º—ã–π –º—è–≥–∫–∏–π –ø–æ —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–º –æ—â—É—â–µ–Ω–∏—è–º",
      "–¢–æ–ª—å–∫–æ —Å –Ω–µ–≥–æ –Ω–∞—á–∏–Ω–∞—é—Ç —Å—Ç—Ä–æ–∏—Ç—å –∞–∫–∫–æ—Ä–¥—ã",
      "–ù–∞ –Ω—ë–º –≤—Å–µ–≥–¥–∞ –∑–≤—É—á–∏—Ç –Ω–æ—Ç–∞ C –Ω–∞ –ª—é–±–æ–π —Å—Ç—Ä—É–Ω–µ",
      "–ï–≥–æ —á–∞—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç –≤ –≥–∞–º–º–∞—Ö –∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"
    ],
    "correct_idx": 3,
    "why": "–í –ø—Ä–∏–º–µ—á–∞–Ω–∏—è—Ö: 5-–π –ª–∞–¥ ‚Äî —É–¥–æ–±–Ω–∞—è –æ–ø–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞ (–≥–∞–º–º—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)."
  }
]

================================================================================
FILE: bot\data\tests\theory_7.json
================================================================================
[
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–ª—É—Ç–æ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≥–∏—Ç–∞—Ä—ã?",
    "options": [
      "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–≤–∞ –ª–∞–¥–∞ –ø–æ –≥—Ä–∏—Ñ—É",
      "–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–æ–π –∏ –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–Ω–æ–π",
      "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–¥–∏–Ω –ª–∞–¥ –ø–æ –≥—Ä–∏—Ñ—É",
      "–õ—é–±–æ–π —à–∞–≥ –º–µ–∂–¥—É –¥–≤—É–º—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–æ—Ç–∞–º–∏"
    ],
    "correct_idx": 2,
    "why": "–ü–æ–ª—É—Ç–æ–Ω ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –≤ 12-—Ç–æ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ; –Ω–∞ –≥–∏—Ç–∞—Ä–µ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π –ª–∞–¥."
  },
  {
    "q": "–¢–æ–Ω ‚Äî —ç—Ç–æ‚Ä¶",
    "options": [
      "–õ—é–±–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ª–∞–¥–∞",
      "–î–≤–∞ –ø–æ–ª—É—Ç–æ–Ω–∞, —Ç–æ –µ—Å—Ç—å –¥–≤–∞ –ª–∞–¥–∞ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑",
      "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–ª—É—Ç–æ–Ω–∞",
      "–¢—Ä–∏ –ø–æ–ª—É—Ç–æ–Ω–∞"
    ],
    "correct_idx": 1,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: —Ç–æ–Ω = 2 –ø–æ–ª—É—Ç–æ–Ω–∞ = 2 –ª–∞–¥–∞."
  },
  {
    "q": "–ü–µ—Ä–µ—Ö–æ–¥ —Å 3-–≥–æ –Ω–∞ 5-–π –ª–∞–¥ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ ‚Äî —ç—Ç–æ:",
    "options": [
      "–ü–æ–ª—É—Ç–æ–Ω",
      "–¢—Ä–∏ –ø–æ–ª—É—Ç–æ–Ω–∞",
      "–¢–æ–Ω",
      "–ü–æ–ª—Ç–æ—Ä–∞ —Ç–æ–Ω–∞"
    ],
    "correct_idx": 2,
    "why": "3 ‚Üí 5 = +2 –ª–∞–¥–∞ = 2 –ø–æ–ª—É—Ç–æ–Ω–∞ = —Ç–æ–Ω."
  },
  {
    "q": "–ö–∞–∫–∏–µ –ø–∞—Ä—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ü–û–õ–£–¢–û–ù–û–ú (–±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –¥–∏–µ–∑–∞/–±–µ–º–æ–ª—è)?",
    "options": [
      "G‚ÄìA –∏ A‚ÄìB",
      "A‚ÄìB –∏ D‚ÄìE",
      "C‚ÄìD –∏ F‚ÄìG",
      "E‚ÄìF –∏ B‚ÄìC"
    ],
    "correct_idx": 3,
    "why": "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–æ—Ä—è–¥–∞: –º–µ–∂–¥—É E‚ÄìF –∏ B‚ÄìC –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –ø–æ–ª—É—Ç–æ–Ω, –±–µ–∑ E‚ôØ –∏ B‚ôØ."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 1-–π —Å—Ç—Ä—É–Ω–µ (E) –Ω–∞ 5-–º –ª–∞–¥—É?",
    "options": [
      "B",
      "F‚ôØ",
      "A",
      "G"
    ],
    "correct_idx": 2,
    "why": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0 E, 1 F, 2 F‚ôØ, 3 G, 4 G‚ôØ, 5 A."
  },
  {
    "q": "–ö–∞–∫–∞—è –Ω–æ—Ç–∞ –ø—Ä–æ–∑–≤—É—á–∏—Ç –Ω–∞ 6-–π —Å—Ç—Ä—É–Ω–µ (E) –Ω–∞ 3-–º –ª–∞–¥—É?",
    "options": [
      "A",
      "G",
      "D",
      "F"
    ],
    "correct_idx": 1,
    "why": "0 E, 1 F, 2 F‚ôØ, 3 G."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ª–∞–¥–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—É –∂–µ –Ω–æ—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–π –æ–∫—Ç–∞–≤–µ?",
    "options": [
      "12 –ª–∞–¥–æ–≤",
      "10 –ª–∞–¥–æ–≤",
      "8 –ª–∞–¥–æ–≤",
      "7 –ª–∞–¥–æ–≤"
    ],
    "correct_idx": 0,
    "why": "–û–∫—Ç–∞–≤–∞ = 12 –ø–æ–ª—É—Ç–æ–Ω–æ–≤ ‚Üí –Ω–∞ –≥–∏—Ç–∞—Ä–µ 12 –ª–∞–¥–æ–≤."
  },
  {
    "q": "–ù–æ—Ç–∞ G –Ω–∞ 6-–π —Å—Ç—Ä—É–Ω–µ, 3-–π –ª–∞–¥. –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –µ—ë –û–ö–¢–ê–í–ê –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä—É–Ω–∞—Ö –ø–æ —Ç–∏–ø–∏—á–Ω–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É?",
    "options": [
      "5-—è —Å—Ç—Ä—É–Ω–∞, 3-–π –ª–∞–¥",
      "4-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "3-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 6-–π –ª–∞–¥"
    ],
    "correct_idx": 1,
    "why": "–î–ª—è 6-–π/5-–π —Å—Ç—Ä—É–Ω: –ø–æ–¥–Ω–∏–º–∏—Å—å –Ω–∞ 2 —Å—Ç—Ä—É–Ω—ã –≤—ã—à–µ –∏ —Å–¥–≤–∏–Ω—å—Å—è –Ω–∞ +2 –ª–∞–¥–∞ ‚Üí 4-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥."
  },
  {
    "q": "–ù–æ—Ç–∞ D –Ω–∞ 5-–π —Å—Ç—Ä—É–Ω–µ, 5-–π –ª–∞–¥. –ì–¥–µ –µ—ë –æ–∫—Ç–∞–≤–∞ –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º —Å—Ç—Ä—É–Ω–∞–º?",
    "options": [
      "4-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥",
      "3-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "3-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥"
    ],
    "correct_idx": 2,
    "why": "–î–ª—è 5-–π —Å—Ç—Ä—É–Ω—ã —Ç–æ—Ç –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω: +2 —Å—Ç—Ä—É–Ω—ã –∏ +2 –ª–∞–¥–∞ ‚Üí 3-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥."
  },
  {
    "q": "–ù–æ—Ç–∞ G –Ω–∞ 4-–π —Å—Ç—Ä—É–Ω–µ, 5-–π –ª–∞–¥. –ì–¥–µ –µ—ë –æ–∫—Ç–∞–≤–∞ –Ω–∞ 2-–π —Å—Ç—Ä—É–Ω–µ?",
    "options": [
      "2-—è —Å—Ç—Ä—É–Ω–∞, 5-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 7-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 8-–π –ª–∞–¥",
      "2-—è —Å—Ç—Ä—É–Ω–∞, 10-–π –ª–∞–¥"
    ],
    "correct_idx": 2,
    "why": "–ò–∑-–∑–∞ —Å—Ç—Ä–æ—è G‚ÄìB –º–µ–∂–¥—É 4-–π –∏ 2-–π —Å—Ç—Ä—É–Ω–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è +3 –ª–∞–¥–∞: 5 ‚Üí 8."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ª–∞–¥–æ–≤ –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏ E –∏ A –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ (–≤–≤–µ—Ä—Ö)?",
    "options": [
      "7 –ª–∞–¥–æ–≤",
      "3 –ª–∞–¥–∞",
      "5 –ª–∞–¥–æ–≤",
      "4 –ª–∞–¥–∞"
    ],
    "correct_idx": 2,
    "why": "E‚ÜíF(+1), F‚ôØ(+2), G(+3), G‚ôØ(+4), A(+5) ‚Üí –∏—Ç–æ–≥–æ +5 –ª–∞–¥–æ–≤ (2,5 —Ç–æ–Ω–∞)."
  },
  {
    "q": "–ß—Ç–æ –ù–ï–í–ï–†–ù–û –æ –∑–≤—É–∫–æ—Ä—è–¥–µ –∏–∑ 12 –∑–≤—É–∫–æ–≤?",
    "options": [
      "E‚ÄìF –∏ B‚ÄìC ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –¥–∏–µ–∑–∞",
      "–ú–µ–∂–¥—É –ª—é–±—ã–º–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ –±—É–∫–≤–µ–Ω–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –¥–∏–µ–∑",
      "–í—Å–µ–≥–æ 12 —à–∞–≥–æ–≤ –ø–æ –ø–æ–ª—É—Ç–æ–Ω–∞–º –¥–æ –ø–æ–≤—Ç–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ—Ç—ã",
      "–ü–æ–ª—É—Ç–æ–Ω ‚Äî –±–∞–∑–æ–≤—ã–π —à–∞–≥ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ –≤—ã—Å–æ—Ç–∞–º–∏"
    ],
    "correct_idx": 1,
    "why": "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–æ–∂–Ω–æ –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π E‚ÄìF –∏ B‚ÄìC (–º–µ–∂–¥—É –Ω–∏–º–∏ –Ω–µ—Ç E‚ôØ/B‚ôØ)."
  }
]

================================================================================
FILE: bot\data\tests\theory_8.json
================================================================================
[
  {
    "q": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫–∫–æ—Ä–¥ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∏–∑ —Ä–∞–∑–¥–µ–ª–∞?",
    "options": [
      "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω—ã",
      "–≠—Ç–æ –æ–¥–Ω–∞ –Ω–æ—Ç–∞, –Ω–æ –≥—Ä–æ–º–∫–æ",
      "–≠—Ç–æ 3 –∏ –±–æ–ª–µ–µ –Ω–æ—Ç—ã, —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
      "–≠—Ç–æ 2 –ª—é–±—ã–µ –Ω–æ—Ç—ã –ø–æ–¥—Ä—è–¥ (–∞—Ä–ø–µ–¥–∂–∏–æ)"
    ],
    "correct_idx": 2,
    "why": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: –∞–∫–∫–æ—Ä–¥ ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ 3+) –Ω–æ—Ç, –∑–≤—É—á–∞—â–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
  },
  {
    "q": "–ö–∞–∫ –Ω–∞ —Å–ª—É—Ö –æ—Ç–ª–∏—á–∏—Ç—å –∞–∫–∫–æ—Ä–¥ –æ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–π –Ω–æ—Ç—ã?",
    "options": [
      "–ê–∫–∫–æ—Ä–¥ –∑–≤—É—á–∏—Ç –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤—É–∫–æ–≤ —Å—Ä–∞–∑—É; –æ–¥–∏–Ω–æ—á–Ω–∞—è –Ω–æ—Ç–∞ ‚Äî –æ–¥–∏–Ω –∑–≤—É–∫",
      "–ê–∫–∫–æ—Ä–¥ –≤—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä–µ–µ –ø–æ —Ç–µ–º–ø—É",
      "–ê–∫–∫–æ—Ä–¥ –≤—Å–µ–≥–¥–∞ —Ç–∏—à–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –Ω–æ—Ç—ã",
      "–û—Ç–ª–∏—á–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
    ],
    "correct_idx": 0,
    "why": "–†–∞–∑–¥–µ–ª –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∑–≤—É–∫–æ–≤ –≤ –∞–∫–∫–æ—Ä–¥–µ."
  },
  {
    "q": "–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∑–≤—É–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –∑–≤—É—á–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–æ–º?",
    "options": [
      "–õ—é–±–æ–µ —á–∏—Å–ª–æ –Ω–æ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏",
      "–û–¥–Ω–∞ –Ω–æ—Ç–∞, –Ω–æ —Å –≤–∏–±—Ä–∞—Ç–æ",
      "–î–≤–µ –Ω–æ—Ç—ã –ø–æ–¥—Ä—è–¥",
      "–ù–µ –º–µ–Ω–µ–µ —Ç—Ä—ë—Ö –Ω–æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
    ],
    "correct_idx": 3,
    "why": "¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏: 3 –∏ –±–æ–ª–µ–µ –Ω–æ—Ç—ã, –∑–≤—É—á–∞—â–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ¬ª."
  },
  {
    "q": "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –∑–∞–∂–∏–º–∞–µ—à—å –≤ –ø—Ä–∏–º–µ—Ä–µ –∞–∫–∫–æ—Ä–¥–∞ Am –∏–∑ —Ä–∞–∑–¥–µ–ª–∞?",
    "options": [
      "2-—é, 3-—é –∏ 4-—é —Å—Ç—Ä—É–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–∞–¥–∞—Ö; –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–≤—É—á–∞—Ç –æ—Ç–∫—Ä—ã—Ç–æ",
      "–¢–æ–ª—å–∫–æ 1-—é –∏ 6-—é —Å—Ç—Ä—É–Ω—ã",
      "–í—Å–µ —à–µ—Å—Ç—å —Å—Ç—Ä—É–Ω –Ω–∞ –æ–¥–Ω–æ–º –ª–∞–¥—É",
      "–ù–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω—ã (—Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ)"
    ],
    "correct_idx": 0,
    "why": "–í –ø—Ä–∏–º–µ—Ä–µ Am –æ–ø–∏—Å–∞–Ω–æ: –∑–∞–∂–∞—Ç—ã 2, 3 –∏ 4 —Å—Ç—Ä—É–Ω—ã; —á–∞—Å—Ç—å —Å—Ç—Ä—É–Ω –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏."
  },
  {
    "q": "–ö–∞–∫–∏–µ —Ç—Ä–∏ —Ä–æ–ª–∏ —É –Ω–æ—Ç –≤ –±–∞–∑–æ–≤–æ–º –∞–∫–∫–æ—Ä–¥–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞?",
    "options": [
      "–¢–æ–Ω–∏–∫–∞, —Ç—Ä–µ–º–æ–ª–æ, –≤–∏–±—Ä–∞—Ç–æ",
      "–¢–æ–Ω–∏–∫–∞, –±–∞—Å-–≥–∏—Ç–∞—Ä–∞, –±–∞—Ä–∞–±–∞–Ω—ã",
      "–¢–æ–Ω–∏–∫–∞, –¥–æ–º–∏–Ω–∞–Ω—Ç–∞, —Å—É–±–¥–æ–º–∏–Ω–∞–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É",
      "–¢–æ–Ω–∏–∫–∞ (–æ—Å–Ω–æ–≤–∞), ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω–∞—è¬ª –Ω–æ—Ç–∞ (–∑–∞–¥–∞—ë—Ç –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä), –≤–µ—Ä—Ö–Ω—è—è –Ω–æ—Ç–∞ (–¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)"
    ],
    "correct_idx": 3,
    "why": "–í —Ç–µ–∫—Å—Ç–µ: 1) –æ—Å–Ω–æ–≤–Ω–∞—è (—Ç–æ–Ω–∏–∫–∞), 2) –Ω–æ—Ç–∞ —Å–≤–µ—Ä—Ö—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–∞–¥, 3) –µ—â—ë –≤—ã—à–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å."
  },
  {
    "q": "–ß—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –º–∞–∂–æ—Ä–Ω—ã–º –∏ –º–∏–Ω–æ—Ä–Ω—ã–º –∞–∫–∫–æ—Ä–¥–æ–º –≤ –¥–∞–Ω–Ω–æ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏?",
    "options": [
      "–ü–æ–ª–æ–∂–µ–Ω–∏–µ ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω–æ–π¬ª –Ω–æ—Ç—ã: –≤ –º–∞–∂–æ—Ä–µ –æ–Ω–∞ –≤—ã—à–µ, –≤ –º–∏–Ω–æ—Ä–µ ‚Äî –Ω–∏–∂–µ",
      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–Ω –≤ –∞–∫–∫–æ—Ä–¥–µ",
      "–ì—Ä–æ–º–∫–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
      "–¢–æ–ª—â–∏–Ω–∞ —Å—Ç—Ä—É–Ω"
    ],
    "correct_idx": 0,
    "why": "–†–∞–∑–¥–µ–ª: —Å–¥–≤–∏–≥ —Å—Ä–µ–¥–Ω–µ–π –Ω–æ—Ç—ã –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞ –º–µ–Ω—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä (–º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä)."
  },
  {
    "q": "–ö–∞–∫–æ–π —Å–¥–≤–∏–≥ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–æ—Ä–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –≤ –º–∞–∂–æ—Ä–Ω—ã–π –ø—Ä–∏ –ø—Ä–æ—á–∏—Ö —Ä–∞–≤–Ω—ã—Ö?",
    "options": [
      "–ü–æ–¥–Ω—è—Ç—å –≤–µ—Ä—Ö–Ω—é—é –Ω–æ—Ç—É –Ω–∞ –∫–≤–∞—Ä—Ç—É",
      "–û–ø—É—Å—Ç–∏—Ç—å –±–∞—Å –Ω–∞ —Ç–æ–Ω",
      "–û–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–æ—Ç—ã –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞",
      "–ü–æ–¥–Ω—è—Ç—å ¬´—Å–µ—Ä–µ–¥–∏–Ω–Ω—É—é¬ª –Ω–æ—Ç—É –Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞"
    ],
    "correct_idx": 3,
    "why": "–°–º—ã—Å–ª: –∏–º–µ–Ω–Ω–æ —Å—Ä–µ–¥–Ω—è—è –Ω–æ—Ç–∞ (—Ç–µ—Ä—Ü–∏—è –ø–æ —Å—É—Ç–∏) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–∞–¥; –µ—ë –ø–æ–¥–Ω—è—Ç–∏–µ –¥–µ–ª–∞–µ—Ç –º–∞–∂–æ—Ä —è—Ä—á–µ."
  },
  {
    "q": "–ö–∞–∫–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–æ —Å —Ç–∏–ø–æ–º –∞–∫–∫–æ—Ä–¥–∞?",
    "options": [
      "–ú–∞–∂–æ—Ä ‚Äî —Å–≤–µ—Ç–ª–æ/—É–≤–µ—Ä–µ–Ω–Ω–æ; –º–∏–Ω–æ—Ä ‚Äî –º—è–≥–∫–æ/–≥—Ä—É—Å—Ç–Ω–æ",
      "–ú–∞–∂–æ—Ä ‚Äî –≥—Ä—É—Å—Ç–Ω–æ; –º–∏–Ω–æ—Ä ‚Äî —è—Ä–∫–æ –∏ —Å–æ–ª–Ω–µ—á–Ω–æ",
      "–ú–∞–∂–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–∫–∞; –º–∏–Ω–æ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∂–∞–∑–∞",
      "–ú–∞–∂–æ—Ä ‚Äî –≤—Å–µ–≥–¥–∞ —Ç–∏—Ö–æ; –º–∏–Ω–æ—Ä ‚Äî –≤—Å–µ–≥–¥–∞ –≥—Ä–æ–º–∫–æ"
    ],
    "correct_idx": 0,
    "why": "–¢–∞–±–ª–∏—Ü–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ: –º–∞–∂–æ—Ä ‚Äî ¬´—Å–≤–µ—Ç–ª–æ, –æ—Ç–∫—Ä—ã—Ç–æ¬ª; –º–∏–Ω–æ—Ä ‚Äî ¬´–º—è–≥–∫–æ, —Ç–µ–º–Ω–æ, –≥—Ä—É—Å—Ç–Ω–æ¬ª."
  },
  {
    "q": "–ö–∞–∫–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–∏–ø–∏—Å–∞–Ω–æ ¬´–∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–æ–µ¬ª –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ?",
    "options": [
      "Am ‚Üí Dm ‚Üí E",
      "C ‚Üí G ‚Üí F",
      "Em ‚Üí D ‚Üí C",
      "Dm ‚Üí F ‚Üí E"
    ],
    "correct_idx": 1,
    "why": "–ü—Ä—è–º–æ —É–∫–∞–∑–∞–Ω–æ: C ‚Üí G ‚Üí F ‚Äî ¬´–ñ–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π –∫—É–ø–ª–µ—Ç¬ª."
  },
  {
    "q": "–ö–∞–∫—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç –∫–∞–∫ ¬´–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ¬ª?",
    "options": [
      "C ‚Üí G ‚Üí F",
      "Am ‚Üí Dm ‚Üí E",
      "G ‚Üí C ‚Üí D",
      "E ‚Üí A ‚Üí B"
    ],
    "correct_idx": 1,
    "why": "–í —Ç–µ–∫—Å—Ç–µ: Am ‚Üí Dm ‚Üí E ‚Äî –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ."
  },
  {
    "q": "–ö–∞–∫–æ–µ –∏–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–ª—É—Ö–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É?",
    "options": [
      "–°–ª—É—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞—Å-–≥–∏—Ç–∞—Ä—É –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
      "–ò–≥—Ä–∞—Ç—å –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –≥—Ä–æ–º–∫–æ",
      "–°—Ä–∞–≤–Ω–∏ –æ–¥–∏–Ω –∑–≤—É–∫ (–æ–¥–∏–Ω–æ—á–Ω—É—é –Ω–æ—Ç—É) –∏ –∞–∫–∫–æ—Ä–¥ ‚Äî –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ä–∞–∑–Ω–∏—Ü—É",
      "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä –∏ —É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–±—ã"
    ],
    "correct_idx": 2,
    "why": "–í —Ç–∞–±–ª–∏—Ü–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ¬´–°—Ä–∞–≤–Ω–∏ –æ–¥–∏–Ω –∑–≤—É–∫ –∏ –∞–∫–∫–æ—Ä–¥¬ª ‚Äî –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ."
  },
  {
    "q": "–ì–¥–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª–∞ —á–∞—â–µ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∑–≤—É—á–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ?",
    "options": [
      "–¢–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä—É–Ω–µ",
      "–¢–æ–ª—å–∫–æ –Ω–∞ 6-–π —Å—Ç—Ä—É–Ω–µ",
      "–í—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1‚Äì2 —Å—Ç—Ä—É–Ω–∞—Ö",
      "–ù–∞ 3‚Äì6 —Å—Ç—Ä—É–Ω–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
    ],
    "correct_idx": 3,
    "why": "–ò—Ç–æ–≥–æ–≤—ã–π –±–ª–æ–∫: –∞–∫–∫–æ—Ä–¥ –æ–±—ã—á–Ω–æ –∑–≤—É—á–∏—Ç ¬´–Ω–∞ 3‚Äì6 —Å—Ç—Ä—É–Ω–∞—Ö¬ª."
  }
]

================================================================================
FILE: bot\data\tests\theory_9.json
================================================================================
[
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∞–∂–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ (–≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏) ‚Äî —ç—Ç–æ:",
    "options": [
      "0 ‚Üí +4 ‚Üí +6",
      "0 ‚Üí +4 ‚Üí +7",
      "0 ‚Üí +3 ‚Üí +7",
      "0 ‚Üí +5 ‚Üí +7"
    ],
    "correct_idx": 1,
    "why": "–ú–∞–∂–æ—Ä = —Ç–æ–Ω–∏–∫–∞ (0) + –±–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è (+4) + —á–∏—Å—Ç–∞—è –∫–≤–∏–Ω—Ç–∞ (+7)."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ä–æ–ª—å —É –±–æ–ª—å—à–æ–π —Ç–µ—Ä—Ü–∏–∏ –≤ –º–∞–∂–æ—Ä–Ω–æ–º –∞–∫–∫–æ—Ä–¥–µ?",
    "options": [
      "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ¬´–º–∞–∂–æ—Ä–Ω–æ–µ¬ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞",
      "–î–æ–±–∞–≤–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å",
      "–î–µ–ª–∞–µ—Ç –∑–≤—É–∫ –±–æ–ª–µ–µ ¬´—Ä–∞—Å—Å—ã–ø—á–∞—Ç—ã–º¬ª",
      "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞—Å–æ–≤—É—é –Ω–æ—Ç—É"
    ],
    "correct_idx": 0,
    "why": "–ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è (+4 –ø–æ–ª—É—Ç.) ‚Äî –≥–ª–∞–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä –º–∞–∂–æ—Ä–∞."
  },
  {
    "q": "–ö–∞–∫–∞—è —Ç—Ä–æ–π–∫–∞ –Ω–æ—Ç –≤–µ—Ä–Ω–æ –∑–∞–¥–∞—ë—Ç –∞–∫–∫–æ—Ä–¥ C –º–∞–∂–æ—Ä?",
    "options": [
      "C‚ÄìE‚ÄìA",
      "C‚ÄìD#‚ÄìG",
      "C‚ÄìF‚ÄìG",
      "C‚ÄìE‚ÄìG"
    ],
    "correct_idx": 3,
    "why": "Cmaj —Å—Ç—Ä–æ–∏—Ç—Å—è –∏–∑ C (—Ç–æ–Ω–∏–∫–∞), E (–±. —Ç–µ—Ä—Ü–∏—è), G (–∫–≤–∏–Ω—Ç–∞)."
  },
  {
    "q": "–í –æ—Ç–∫—Ä—ã—Ç–æ–º C –º–∞–∂–æ—Ä (C) –∫–∞–∫–∞—è —Å—Ç—Ä—É–Ω–∞ –æ–±—ã—á–Ω–æ –ù–ï –∏–≥—Ä–∞–µ—Ç—Å—è?",
    "options": [
      "6-—è (–Ω–∏–∑–∫–æ–µ E)",
      "1-—è (–≤—ã—Å–æ–∫–æ–µ E)",
      "3-—è (G)",
      "5-—è (A)"
    ],
    "correct_idx": 0,
    "why": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä–Ω—ã–π C: —à–µ—Å—Ç–∞—è —Å—Ç—Ä—É–Ω–∞ –≥–ª—É—à–∏—Ç—Å—è (X)."
  },
  {
    "q": "–ß—Ç–æ –¥–∞—ë—Ç –∫–≤–∏–Ω—Ç–∞ (+7 –ø–æ–ª—É—Ç–æ–Ω–æ–≤) –≤ —Å–æ—Å—Ç–∞–≤–µ –∞–∫–∫–æ—Ä–¥–∞?",
    "options": [
      "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ ¬´–ø–æ–ª–Ω–æ—Ç—É¬ª –∑–≤—É—á–∞–Ω–∏—è",
      "–í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –±–∞—Å –Ω–∞ –æ–∫—Ç–∞–≤—É –≤—ã—à–µ",
      "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä",
      "–ó–∞–¥–∞–µ—Ç —Ç–µ–º–ø –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
    ],
    "correct_idx": 0,
    "why": "–ö–≤–∏–Ω—Ç–∞ —É–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–∑–≤—É—á–∏–µ, –Ω–µ –º–µ–Ω—è—è ¬´–ª–∞–¥–æ–≤–æ–≥–æ¬ª —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞."
  },
  {
    "q": "–§–æ—Ä–º—É–ª–∞ –º–∏–Ω–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ (–≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö –æ—Ç —Ç–æ–Ω–∏–∫–∏) ‚Äî —ç—Ç–æ:",
    "options": [
      "0 ‚Üí +3 ‚Üí +6",
      "0 ‚Üí +2 ‚Üí +7",
      "0 ‚Üí +3 ‚Üí +7",
      "0 ‚Üí +4 ‚Üí +7"
    ],
    "correct_idx": 2,
    "why": "–ú–∏–Ω–æ—Ä = —Ç–æ–Ω–∏–∫–∞ (0) + –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è (+3) + –∫–≤–∏–Ω—Ç–∞ (+7)."
  },
  {
    "q": "–ö–∞–∫–∏–µ –Ω–æ—Ç—ã –æ–±—Ä–∞–∑—É—é—Ç A –º–∏–Ω–æ—Ä (Am)?",
    "options": [
      "A‚ÄìC#‚ÄìE",
      "A‚ÄìC‚ÄìE",
      "A‚ÄìD‚ÄìE",
      "A‚ÄìB‚ÄìE"
    ],
    "correct_idx": 1,
    "why": "Am = A (—Ç–æ–Ω–∏–∫–∞), C (–º. —Ç–µ—Ä—Ü–∏—è), E (–∫–≤–∏–Ω—Ç–∞)."
  },
  {
    "q": "–ö–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å A –º–∏–Ω–æ—Ä (A‚ÄìC‚ÄìE) –≤ A –º–∞–∂–æ—Ä –ø–æ —Ç–µ—Ä—Ü–∏–∏?",
    "options": [
      "–û–ø—É—Å—Ç–∏—Ç—å A –¥–æ G#",
      "–ü–æ–¥–Ω—è—Ç—å C –¥–æ C# (–Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞ –≤–≤–µ—Ä—Ö)",
      "–û–ø—É—Å—Ç–∏—Ç—å C –¥–æ B (–Ω–∞ –ø–æ–ª—Ç–æ–Ω–∞ –≤–Ω–∏–∑)",
      "–ü–æ–¥–Ω—è—Ç—å E –¥–æ F"
    ],
    "correct_idx": 1,
    "why": "–ú–∏–Ω–æ—Ä‚Üí–º–∞–∂–æ—Ä: –º. —Ç–µ—Ä—Ü–∏—è (+3) ‚Üí –±. —Ç–µ—Ä—Ü–∏—è (+4)."
  },
  {
    "q": "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—Ç–æ–Ω–æ–≤ –º–µ–∂–¥—É —Ç–µ—Ä—Ü–∏–µ–π –∏ –∫–≤–∏–Ω—Ç–æ–π –≤ –º–∞–∂–æ—Ä–µ (–º–µ–∂–¥—É +4 –∏ +7 –æ—Ç —Ç–æ–Ω–∏–∫–∏)?",
    "options": [
      "1 –ø–æ–ª—É—Ç–æ–Ω",
      "3 –ø–æ–ª—É—Ç–æ–Ω–∞",
      "2 –ø–æ–ª—É—Ç–æ–Ω–∞",
      "5 –ø–æ–ª—É—Ç–æ–Ω–æ–≤"
    ],
    "correct_idx": 1,
    "why": "7 ‚àí 4 = 3 –ø–æ–ª—É—Ç–æ–Ω–∞ (–º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è –º–µ–∂–¥—É —Ç–µ—Ä—Ü–∏–µ–π –∏ –∫–≤–∏–Ω—Ç–æ–π)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –¥–ª—è D –º–∞–∂–æ—Ä:",
    "options": [
      "D‚ÄìF#‚ÄìA",
      "D‚ÄìF‚ÄìA",
      "D‚ÄìG‚ÄìA",
      "D‚ÄìE‚ÄìA"
    ],
    "correct_idx": 0,
    "why": "–ë–æ–ª—å—à–∞—è —Ç–µ—Ä—Ü–∏—è –æ—Ç D ‚Äî F# (+4), –∫–≤–∏–Ω—Ç–∞ ‚Äî A (+7)."
  },
  {
    "q": "–í—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –¥–ª—è E –º–∏–Ω–æ—Ä:",
    "options": [
      "E‚ÄìG‚ÄìB",
      "E‚ÄìF#‚ÄìB",
      "E‚ÄìG#‚ÄìB",
      "E‚ÄìA‚ÄìB"
    ],
    "correct_idx": 0,
    "why": "Emin: –º–∞–ª–∞—è —Ç–µ—Ä—Ü–∏—è ‚Äî G (+3), –∫–≤–∏–Ω—Ç–∞ ‚Äî B (+7)."
  },
  {
    "q": "–ö–∞–∫–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–∏–µ –º–∞–∂–æ—Ä–∞ –∏ –º–∏–Ω–æ—Ä–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É?",
    "options": [
      "–û—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ—Ç–æ–π —Ç–µ—Ä—Ü–∏–∏: –≤ –º–∞–∂–æ—Ä–µ –æ–Ω–∞ –≤—ã—à–µ –Ω–∞ –ø–æ–ª—É—Ç–æ–Ω",
      "–ú–∞–∂–æ—Ä –≤—Å–µ–≥–¥–∞ –≥—Ä–æ–º—á–µ, —á–µ–º –º–∏–Ω–æ—Ä",
      "–í –º–∏–Ω–æ—Ä–µ –∫–≤–∏–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª—É—Ç–æ–Ω",
      "–û—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ–º/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∫–≤–∏–Ω—Ç—ã"
    ],
    "correct_idx": 0,
    "why": "–í—Å—è ¬´–º–∞–∂–æ—Ä–Ω–æ—Å—Ç—å/–º–∏–Ω–æ—Ä–Ω–æ—Å—Ç—å¬ª ‚Äî –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ç–µ—Ä—Ü–∏–∏ (¬± –ø–æ–ª—É—Ç–æ–Ω)."
  }
]

================================================================================
FILE: Data\bot.db
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

================================================================================
FILE: data\bot.db
================================================================================
[–ü—Ä–æ–ø—É—â—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]

