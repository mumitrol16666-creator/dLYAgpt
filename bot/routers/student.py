from __future__ import annotations

import os
import random

from pathlib import Path

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.routers.lesson_flow import send_next_t_block

from bot.keyboards.student import student_main_kb, payment_inline, next_t_inline
from bot.config import get_settings, now_utc_str, local_dt_str
from bot.services.lessons import (
    list_l_lessons,
    next_l_after,
    list_t_blocks,
    sort_materials,
    parse_l_num,
)

from bot.services.lessons import list_l_lessons
from bot.config import get_course
from bot.services.admin_cards import render_submission_card
from bot.services import points
from bot.services.ranks import get_rank_by_points
from bot.routers.forms import HelpForm, SubmitForm, LessonCodeForm # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï

from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from bot.services.admin_cards import help_reply_kb
from aiogram import Router , types, F, Bot
from bot.services.db import get_db
from aiogram.types import FSInputFile
from aiogram.filters import StateFilter
from bot.keyboards.student import student_main_kb
from bot.config import COURSES

router = Router(name="student")


def _cancel_kb() -> types.ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="–û—Ç–º–µ–Ω–∞")
    return kb.as_markup(resize_keyboard=True)


KNOWN_BUTTONS = {
    "üìö –ù–æ–≤—ã–π —É—Ä–æ–∫", "üîë –£—Ä–æ–∫ –ø–æ –∫–æ–¥—É", "‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", "üÜò –ü–æ–º–æ—â—å",
    "üèÖ –ú–æ–π —Ä–∞–Ω–≥", "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ", "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
}


async def _submit_active(message: types.Message) -> bool:
    """–ü–æ–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ submitted –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∞–¥–º–∏–Ω–∞–º + –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # 1) –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    async with get_db() as db:
        cur = await db.execute(
            "SELECT s.id as sid, p.id as pid FROM students s "
            "LEFT JOIN progress p ON p.student_id=s.id AND p.status IN ('sent','returned','submitted') "
            "WHERE s.tg_id=?",
            (message.from_user.id,),
        )
        row = await cur.fetchone()
        if not row or row["pid"] is None:
            return False  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä

        pid = row["pid"]

        # 2) –æ—Ç–º–µ—Ç–∏—Ç—å submitted
        now = now_utc_str()
        await db.execute(
            "UPDATE progress SET status='submitted', submitted_at=?, updated_at=? WHERE id=?",
            (now, now, pid),
        )
        await db.commit()

        # 3) –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code, task_code, submitted_at FROM progress WHERE id=?",
            (pid,),
        )
        prow = await cur.fetchone()

    from bot.services.admin_cards import render_submission_card
    settings = get_settings()

    card_text, kb = render_submission_card(
        pid,
        message.from_user,
        lesson_code=prow["lesson_code"],
        task_code=prow["task_code"],
        submitted_at_utc=prow["submitted_at"],
    )

    # –ö–∞—Ä—Ç–æ—á–∫–∞ + –∫–æ–ø–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
    for admin_id in settings.admin_ids:
        try:
            await message.bot.send_message(admin_id, card_text, reply_markup=kb)
            await message.copy_to(admin_id)
        except Exception:
            pass

    # 5) –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É
    await message.answer("–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ –ø–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å")
    return True

# bot/routers/student.py

# ... (–∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞) ...
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç:


# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ú–ï–ù–Æ –ö–£–†–°–û–í >>>
@router.message(F.text == "üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è")
async def training_program_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Inline-–∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞."""
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:")

    kb = InlineKeyboardBuilder()
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –Ω–∞—à–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –∫—É—Ä—Å–æ–≤ –∏–∑ config.py
    for course_code, course in COURSES.items():
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        kb.button(text=course.title, callback_data=f"show_course:{course_code}")

    kb.adjust(1) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ

    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
        reply_markup=kb.as_markup()
    )

# --- —Å–¥–∞—á–∞ –ú–ï–î–ò–ê (–≤–Ω–µ FSM –ø–æ–º–æ—â–∏ –∏ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏) ---
@router.message(
    StateFilter(None),
    F.content_type.in_({"photo", "video", "document"})
)
async def handle_submission_media(message: types.Message):
    await _submit_active(message)



@router.callback_query(F.data == "tests:back")
async def tests_back(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–æ–≤
    kb = student_main_kb() if callable(student_main_kb) else student_main_kb
    await cb.message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    await cb.answer()



@router.message(Command("myid", "my_id"))
async def cmd_myid(message: types.Message):
    await _get_or_create_student(message.from_user.id, message.from_user.username)
    await message.answer(f"–¢–≤–æ–π tg_id: <code>{message.from_user.id}</code>")


# ====== Main menu buttons ======
@router.message(F.text == "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ")
async def about_course(message: types.Message):
    txt = (
        "üé∂ <b>–û –∫—É—Ä—Å–µ</b>\n\n"
        "–£ —Ç–µ–±—è –≤–ø–µ—Ä–µ–¥–∏ <b>16 —É—Ä–æ–∫–æ–≤ 1- –æ–≥–æ –º–æ–¥—É–ª—è</b>, –≥–¥–µ —Ç—ã —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –æ—Å–≤–æ–∏—à—å:\n"
        "‚Äî –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –ø–µ—Å–Ω–∏ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏,\n‚Äî —á–∏—Ç–∞—Ç—å —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã,\n‚Äî –∏–≥—Ä–∞—Ç—å –º–µ–ª–æ–¥–∏–∏,\n"
        "‚Äî –∫–∞–∫ —Å–æ–µ–¥–∏–Ω—è—Ç—å –∞–∫–∫–æ—Ä–¥—ã, –≥–æ–ª–æ—Å –∏ –±–æ–π,\n‚Äî –ø–æ–Ω–∏–º–∞—Ç—å –æ—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ –º—É–∑—ã–∫–∏.\n\n"
        "–ê –µ—â—ë —Ç–µ–±—è –∂–¥—É—Ç <b>—É—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É</b> ‚Äî —Ä–∞–∑–±–æ—Ä—ã —Ö–∏—Ç–æ–≤ üé∏\n\n"
        "üëâ –ü—Ä–æ–π–¥–∏ –ø–µ—Ä–≤—ã–µ 3 —É—Ä–æ–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≥–∏—Ç–∞—Ä–∞ –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è!\n\n"
        "üìû –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∑–≤–æ–Ω–∏: <b>+7 777 505 5788</b>"
    )
    await message.answer(txt)

@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def btn_help(message: types.Message, state: FSMContext):
    await state.set_state(HelpForm.waiting_text)
    await message.answer("üÜò –¢—ã –Ω–∞–∂–∞–ª SOS\n"
    "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Å—Ç—Ä–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç"
)

@router.message(HelpForm.waiting_text, F.text)
async def handle_help_text(message: types.Message, state: FSMContext):
    settings = get_settings()

    # 1) –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ (–±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ full_name)
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, first_name, last_name, username FROM students WHERE tg_id=?",
            (message.from_user.id,)
        )
        srow = await cur.fetchone()

    if not srow:
        await state.clear()
        await message.answer("–£–ø—Å, –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ, –ù–∞–∂–º–∏ /start")
        return

    student_id = srow["id"]
    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    fn = (srow["first_name"] or "").strip()
    ln = (srow["last_name"] or "").strip()
    display_name = (f"{fn} {ln}".strip()
                    or (f"@{srow['username']}" if srow["username"] else "")
                    or message.from_user.full_name
                    or f"id {message.from_user.id}")

    # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –û–¢–ö–†–´–¢–û–ô –∑–∞—è–≤–∫–∏
    async with get_db() as db:
        cur = await db.execute(
            "SELECT id FROM help_requests WHERE student_id=? AND status='open' LIMIT 1",
            (student_id,),
        )
        exists = await cur.fetchone()

    if exists:
        await state.clear()
        await message.answer("–¢–∞–∫-—Å —Ç–∞–∫—Å-, –¥–∞–≤–∞–π –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á—É - —Å–º–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å üôå")
        return

    # 3) —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ help_requests
    now = now_utc_str()
    async with get_db() as db:
        await db.execute(
            "INSERT INTO help_requests (student_id, status, created_at) VALUES (?,?,?)",
            (student_id, "open", now),
        )
        await db.commit()

    # 4) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    username = f"@{message.from_user.username}" if message.from_user.username else f"id {message.from_user.id}"
    card = (
        "üÜò –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏\n"
        f"{display_name} ({username})\n\n"
        f"{message.text}"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"adm_reply:{message.from_user.id}")
    kb.adjust(1)
    for admin_id in settings.admin_ids:
        try:
            await message.bot.send_message(admin_id, card, reply_markup=kb.as_markup())
        except Exception:
            pass

    await state.clear()
    await message.answer("–ü–µ—Ä–µ–¥–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥—è—Ç—Å—è —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç—è—Ç ( –æ–±—ã—á–Ω–æ 1-5 –º–∏–Ω—É—Ç—ã üëå")

@router.message(F.text == "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def my_progress(message: types.Message):
    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ. –ù–∞–∂–º–∏ /start")
        return
    sid = row["id"]

    # –æ—á–∫–∏ –∏ —Ä–∞–Ω–≥
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)

    # —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved'",
            (sid,),
        )
        lessons = (await cur.fetchone())["c"]

    txt = (
        f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        f"‚Ä¢ –£—Ä–æ–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ: <b>{lessons}</b>\n"
        f"‚Ä¢ –ë–∞–ª–ª—ã: <b>{total}</b>\n"
        f"‚Ä¢ –†–∞–Ω–≥: <b>{rank_name}</b>"
    )
    if next_thr is not None:
        txt += f"\n‚Ä¢ üî• –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{next_thr - total}</b> –æ—á–∫–æ–≤!"

    await message.answer(txt)

@router.message(F.text == "üèÖ –ú–æ–π —Ä–∞–Ω–≥")
async def my_rank(message: types.Message):
    # –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ tg_id
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()

    if not row:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ /start")
        return

    sid = row["id"]

    # —Å—É–º–º–∞—Ä–Ω—ã–µ –±–∞–ª–ª—ã –∏ —Ä–∞–Ω–≥
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)

    txt = f"üèÖ –¢–≤–æ–π —Ä–∞–Ω–≥: <b>{rank_name}</b>\nüéØ –ë–∞–ª–ª—ã: <b>{total}</b>"
    if next_thr is not None:
        txt += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: <b>{next_thr - total}</b>"

    await message.answer(txt)

@router.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")
async def pay(message: types.Message):
    settings = get_settings()
    await _get_or_create_student(message.from_user.id, message.from_user.username)
    txt = (
        "üé∂ üé∂ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
        f"–ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å üòÖ\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∑–∞ <b>4999</b> (—ç—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –ø–∞—Ä–∞ –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ ‚òïÔ∏è)"
    )
    # Check if already has confirmed payment
    async with get_db() as db:
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM payments p JOIN students s ON s.id=p.student_id WHERE s.tg_id=?",
            (message.from_user.id,),
        )
        r = await cur.fetchone()
        if r and r["c"] > 0:
            await message.answer("–£–≥–æ–≤–æ—Ä–∏–ª, –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å ‚úÖ", reply_markup=student_main_kb())
            return

        # Check pending request
        cur = await db.execute(
            "SELECT pr.id FROM payment_requests pr JOIN students s ON s.id=pr.student_id "
            "WHERE s.tg_id=? AND pr.status='pending'",
            (message.from_user.id,),
        )
        pend = await cur.fetchone()
        include_button = True
        if pend:
            include_button = False
            txt += "\n\n–í–∞—É, —Å–ø–∞—Å–∏–±–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —è –¥–æ–π–¥—É –¥–æ —Ç–≤–æ–µ–π –æ–ø–ª–∞—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏—à–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úÖ"

    await message.answer(
        txt,
        reply_markup=payment_inline(
            settings.payment_link, include_i_paid=include_button, student_id=message.from_user.id
        ),
    )


@router.callback_query(F.data.startswith("paid_ipaid:"))
async def cb_paid_paid(cb: types.CallbackQuery):
    try:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–¥–æ–º –∫—É—Ä—Å–∞ >>>
        _, course_code, tg_id_str = cb.data.split(":")
        tg_id = int(tg_id_str)
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    if cb.from_user.id != tg_id:
        await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞", show_alert=True)
        return

    course = get_course(course_code)
    if not course:
        await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    settings = get_settings()
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        r = await cur.fetchone()
        if not r:
            await cb.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        sid = r["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ –≠–¢–û–¢ –∫—É—Ä—Å
        cur = await db.execute("SELECT 1 FROM payments WHERE student_id=? AND course_code=?", (sid, course_code))
        if await cur.fetchone():
            await cb.answer("–≠—Ç–æ—Ç –∫—É—Ä—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω ‚úÖ", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞
        await db.execute(
            "INSERT INTO payment_requests(student_id, amount, status, course_code, created_at) VALUES(?,?,?,?,?)",
            (sid, course.price, 'pending', course.code, now_utc_str()),
        )
        await db.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    card = (
        f"üí≥ <b>–ó–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª</b>\n"
        f"–£—á–µ–Ω–∏–∫: @{cb.from_user.username or 'no_username'} (id {cb.from_user.id})\n"
        f"–°—É–º–º–∞: {course.price} ‚Ç∏"
    )
    ik = InlineKeyboardBuilder()
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º tg_id –∏ course_code >>>
    ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{course.code}:{tg_id}")
    ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"adm_pay_no:{course.code}:{tg_id}")
    ik.adjust(1)
    for admin_id in settings.admin_ids:
        try:
            await cb.bot.send_message(admin_id, card, reply_markup=ik.as_markup())
        except Exception:
            pass

    await cb.message.edit_text(cb.message.text + "\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    await cb.answer()

    await cb.message.edit_text(cb.message.text + "\n\n–î–∞-–î–∞, –≤–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é —â–µ–¥—Ä—ã–π —á–µ–ª–æ–≤–µ–∫, —Å–µ–∫—É–Ω–¥—É, –º–Ω–µ –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å  ‚úÖ")
    await cb.answer()


# ‚¨áÔ∏è –ö–ù–û–ü–ö–ê –ú–ï–ù–Æ ¬´üìö –ù–æ–≤—ã–π —É—Ä–æ–∫¬ª ‚Äî —Ç–æ–Ω–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞
async def _issue_new_lesson(bot: Bot, tg_id: int, chat_id: int, course_code: str) -> None:
    settings = get_settings()
    course = get_course(course_code)
    if not course:
        await bot.send_message(chat_id, "–¢–∞–∫–æ–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    async with get_db() as db:
        # 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        cur = await db.execute("SELECT id, approved FROM students WHERE tg_id=?", (tg_id,))
        s = await cur.fetchone()
        if not s or not s["approved"]:
            await bot.send_message(chat_id, "‚è≥ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –µ—â–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
            return
        sid = s["id"]

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ª—é–±–æ–µ)
        cur = await db.execute(
            "SELECT id FROM progress WHERE student_id=? AND status IN ('sent','returned','submitted')", (sid,))
        if await cur.fetchone():
            await bot.send_message(chat_id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–¥–∞–π –µ–≥–æ.")
            return

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏ –æ–ø–ª–∞—Ç—É –¥–ª—è –≠–¢–û–ì–û –∫—É—Ä—Å–∞
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:%")
        )
        approved_cnt = (await cur.fetchone())["c"]

        cur = await db.execute("SELECT 1 FROM payments WHERE student_id=? AND course_code=?", (sid, course_code))
        is_paid = await cur.fetchone()

        if approved_cnt >= course.free_lessons and not is_paid:
            payment_text = (
                f"üö´ –î–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —É—Ä–æ–∫–∞–º –∫—É—Ä—Å–∞ ¬´{course.title}¬ª –ø–ª–∞—Ç–Ω—ã–π.\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞: {course.price} ‚Ç∏.\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            await bot.send_message(
                chat_id,
                payment_text,
                reply_markup=payment_inline(
                    payment_link=settings.payment_link,
                    course_code_to_pay=course_code,
                    student_id=tg_id
                ),
            )
            return

        # 4. –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        course_path = settings.lessons_path / course.code
        cur = await db.execute(
            "SELECT lesson_code FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:L%")
        )
        rows = await cur.fetchall()
        last_num = 0
        for r in rows:
            l_code = (r["lesson_code"] or "").split(":")[-1]
            n = parse_l_num(l_code)
            if n and n > last_num:
                last_num = n

        next_lesson_folder = next_l_after(course_path, last_num)

        if not next_lesson_folder:
            await bot.send_message(chat_id,
                                   f"–ù–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ ¬´{course.title}¬ª –ø–æ–∫–∞ –Ω–µ—Ç. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è üëå")
            return

        # 5. –°–æ–∑–¥–∞–µ–º progress –≤ –ë–î —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º —É—Ä–æ–∫–∞
        full_lesson_code = f"{course.code}:{next_lesson_folder}"

        from datetime import datetime, timedelta, timezone
        sent_at = now_utc_str()
        deadline = (datetime.now(timezone.utc) + timedelta(days=3)).replace(microsecond=0).isoformat().replace("+00:00",
                                                                                                               "Z")
        remind = (datetime.now(timezone.utc) + timedelta(hours=24)).replace(microsecond=0).isoformat().replace("+00:00",
                                                                                                               "Z")

        await db.execute(
            "INSERT INTO progress(student_id, lesson_code, status, sent_at, deadline_at, remind_at, updated_at) "
            "VALUES(?,?,?,?,?,?,?)",
            (sid, full_lesson_code, "sent", sent_at, deadline, remind, sent_at),
        )
        cur = await db.execute("SELECT last_insert_rowid() AS id")
        pid = (await cur.fetchone())["id"]
        await db.commit()

    # 6. –í—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–∞
    await bot.send_message(chat_id, f"–ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ ¬´{next_lesson_folder}¬ª –∏–∑ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª...")
    await send_next_t_block(bot, chat_id, pid, first=True)

# ===== –£—Ä–æ–∫ –ø–æ –∫–æ–¥—É (FSM –≤–º–µ—Å—Ç–æ message.conf) =====
@router.message(F.text == "üéµ –£—Ä–æ–∫–∏ –ø–æ –∫–æ–¥—É") # <<< –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
async def btn_lesson_by_code(message: types.Message, state: FSMContext):
    # –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    await state.set_state(LessonCodeForm.waiting_code)
    await message.answer(
        "–í–≤–µ–¥–∏ –∫–æ–¥ —É—Ä–æ–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
        reply_markup=_cancel_kb() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–û—Ç–º–µ–Ω–∞"
    )

@router.message(LessonCodeForm.waiting_code, F.text.regexp(r"^[A-Za-z0-9_\-]{3,}$"))
async def lesson_code_entered(message: types.Message, state: FSMContext):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥ –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    code = message.text.strip()
    await _process_lesson_code(message, code)
    await state.clear()



    # --- —Å–¥–∞—á–∞ –¢–ï–ö–°–¢–û–ú (–Ω–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏, –≤–Ω–µ FSM –ø–æ–º–æ—â–∏) ---


# ===== Utilities =====
async def _get_or_create_student(tg_id: int, username: str | None):
    async with get_db() as db:
        await db.execute(
            "INSERT INTO students(tg_id, username, created_at, last_seen) VALUES(?,?,?,?) "
            "ON CONFLICT(tg_id) DO UPDATE SET username=excluded.username, last_seen=excluded.last_seen",
            (tg_id, username or "", now_utc_str(), now_utc_str()),
        )
        await db.commit()


# bot/routers/student.py
# ...
# <<< –í–°–¢–ê–í–¨ –≠–¢–û–¢ –ö–û–î –í –§–ê–ô–õ student.py >>>

async def _process_lesson_code(message: types.Message, code: str):
    settings = get_settings()
    # –ò—â–µ–º —É—Ä–æ–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ by_code_path
    path = settings.by_code_path / code

    if not path.exists() or not path.is_dir():
        await message.answer("–¢–∞–∫–æ–π –∫–æ–¥ —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    async with get_db() as db:
        cur = await db.execute("SELECT id, approved FROM students WHERE tg_id=?", (message.from_user.id,))
        s_row = await cur.fetchone()
        if not s_row or not s_row["approved"]:
            await message.answer("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω, –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º –ø–æ –∫–æ–¥—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–∑–∂–µ.")
            return
        sid = s_row["id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ª—é–±–æ–µ)
        cur = await db.execute(
            "SELECT id FROM progress WHERE student_id=? AND status IN ('sent','returned','submitted')", (sid,))
        if await cur.fetchone():
            await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–¥–∞–π –µ–≥–æ.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —É—Ä–æ–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "by_code"
        full_lesson_code = f"by_code:{code}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω
        cur = await db.execute(
            "SELECT 1 FROM progress WHERE student_id=? AND lesson_code=? AND status='approved'",
            (sid, full_lesson_code)
        )
        if await cur.fetchone():
            await message.answer("–¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ –∫–æ–¥—É.")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        from datetime import datetime, timedelta
        sent_at = now_utc_str()

        await db.execute(
            "INSERT INTO progress(student_id, lesson_code, status, sent_at, updated_at) VALUES(?,?,?,?,?)",
            (sid, full_lesson_code, "sent", sent_at, sent_at),
        )
        cur = await db.execute("SELECT last_insert_rowid() AS id")
        pid = (await cur.fetchone())["id"]
        await db.commit()

    # –í—ã–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–∞
    await message.answer(f"–û—Ç–∫—Ä—ã–≤–∞—é —É—Ä–æ–∫ –ø–æ –∫–æ–¥—É ¬´{code}¬ª...")
    await send_next_t_block(message.bot, message.chat.id, pid, first=True)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ StateFilter(None)
@router.message(StateFilter(None), F.photo)
async def handle_unhandled_photo(m: types.Message):
    """–û—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."""
    await m.answer(
        "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@router.callback_query(F.data.startswith("show_course:"))
async def show_course_lessons(cb: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    ‚úÖ - –ø—Ä–æ–π–¥–µ–Ω
    ‚ñ∂Ô∏è - —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    üîí - –∑–∞–∫—Ä—ã—Ç
    """
    course_code = cb.data.split(":")[1]
    course = get_course(course_code)

    if not course:
        await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await cb.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª...")

    settings = get_settings()
    sid = None

    # 1. –ù–∞—Ö–æ–¥–∏–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (cb.from_user.id,))
        s_row = await cur.fetchone()
        if s_row:
            sid = s_row["id"]

    if not sid:
        await cb.message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ù–∞–∂–º–∏ /start")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ –∏–∑ –ø–∞–ø–æ–∫
    course_path = settings.lessons_path / course.code
    all_lessons = list_l_lessons(course_path)

    # 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ü–†–û–ô–î–ï–ù–ù–´–• —É—Ä–æ–∫–æ–≤ –∏–∑ –ë–î
    async with get_db() as db:
        cur = await db.execute(
            "SELECT lesson_code FROM progress WHERE student_id=? AND status='approved' AND lesson_code LIKE ?",
            (sid, f"{course.code}:%")
        )
        rows = await cur.fetchall()
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫—É—Ä—Å–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ L-–∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä "L01"
        passed_lessons = {row["lesson_code"].split(":")[-1] for row in rows}

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    next_lesson_unlocked = True

    for lesson_folder_name in all_lessons:
        status_icon = ""
        callback_data = ""

        if lesson_folder_name in passed_lessons:
            status_icon = "‚úÖ"
            callback_data = f"lesson:review:{course.code}:{lesson_folder_name}" # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫
        elif next_lesson_unlocked:
            status_icon = "‚ñ∂Ô∏è"
            callback_data = f"lesson:start:{course.code}:{lesson_folder_name}" # –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫
            next_lesson_unlocked = False # –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        else:
            status_icon = "üîí"
            callback_data = "lesson:locked" # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb.button(text=f"{status_icon} {lesson_folder_name}", callback_data=callback_data)

    kb.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

    await cb.message.edit_text(
        f"–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª:",
        reply_markup=kb.as_markup()
    )

# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "‚úÖ –ü–û–í–¢–û–†–ò–¢–¨ –£–†–û–ö" >>>
@router.callback_query(F.data.startswith("lesson:review:"))
async def lesson_review(cb: types.CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —É—Ä–æ–∫–∞ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."""
    try:
        _, _, course_code, lesson_folder = cb.data.split(":")
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞.", show_alert=True)
        return

    # TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞
    await cb.answer(f"–ü–æ–≤—Ç–æ—Ä —É—Ä–æ–∫–∞ ¬´{lesson_folder}¬ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "üîí –£–†–û–ö –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" >>>
@router.callback_query(F.data == "lesson:locked")
async def lesson_locked(cb: types.CallbackQuery):
    """–°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
    await cb.answer("–≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.", show_alert=True)