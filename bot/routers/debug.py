# bot/routers/debug.py
from __future__ import annotations
import logging, json
from aiogram import Router, types

router = Router(name="debug")

# 1) –õ–æ–≤–∏–º –õ–Æ–ë–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ —Ç–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã
@router.message()
async def debug_unhandled_message(message: types.Message):
    try:
        logging.warning("UNHANDLED MESSAGE: %s", message.model_dump_json())
    except Exception:
        logging.warning("UNHANDLED MESSAGE (fallback): %s", message)

# 2) –õ–æ–≤–∏–º –õ–Æ–ë–´–ï callback_query (–∫–Ω–æ–ø–∫–∏), –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ
@router.callback_query()
async def debug_unhandled_callback(cb: types.CallbackQuery):
    logging.warning("UNHANDLED CALLBACK: data=%r chat=%s from=%s",
                    cb.data, getattr(cb.message, 'chat', None), cb.from_user.id)
    await cb.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –∂—É—Ä–Ω–∞–ª.", show_alert=False)

# 3) –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –∏–∑ –ª—é–±—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ)
try:
    from aiogram.types.error_event import ErrorEvent

    @router.errors()
    async def debug_errors(event: ErrorEvent):
        logging.exception("HANDLER ERROR on update=%s", event.update, exc_info=event.exception)
        # –ú—è–≥–∫–æ —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, callback –±–µ–∑ message
        msg = getattr(event.update, "message", None)
        if isinstance(msg, types.Message):
            await msg.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –£–∂–µ —á–∏–Ω–∏–º üîß")
        # –≤–µ—Ä–Ω—É—Ç—å True/None ‚Äî —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ —Å—á–∏—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π
        return True
except Exception:
    # –ï—Å–ª–∏ –≤ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ aiogram –Ω–µ—Ç ErrorEvent ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç –±–ª–æ–∫.
    pass
