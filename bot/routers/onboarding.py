from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboards.student import student_main_kb
from bot.config import get_settings, now_utc_str
from bot.services.db import get_db
from bot.services import points

from bot.keyboards.admin import admin_main_reply_kb
from aiogram.types import ReplyKeyboardRemove
from logging import getLogger
logger = getLogger("maestro")



router = Router(name="onboarding")


class Onb(StatesGroup):
    waiting_start = State()
    first_name = State()
    last_name = State()
    birth_or_age = State()
    has_guitar = State()
    experience = State()
    goal = State()
    phone = State()
    rules = State()
    confirm = State()


WELCOME_TEXT = (
     "ü¶ù <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ</b>, –µ–Ω–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –≥–∏—Ç–∞—Ä–µ.\n"
    "–ó–¥–µ—Å—å –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏, –∑–∞–¥–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
    "–ê –º–æ–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏ ‚Äî –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¥–æ–º–∞—à–∫–∏ –∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –ì–æ—Ç–æ–≤?\n"
    "–ñ–º–∏ ¬´–ü–æ–≥–Ω–∞–ª–∏¬ª!"
)


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    settings = get_settings()

    # upsert student
    async with get_db() as db:
        await db.execute(
            "INSERT INTO students(tg_id, username, created_at, last_seen) "
            "VALUES(?,?,?,?) "
            "ON CONFLICT(tg_id) DO UPDATE SET "
            "username=excluded.username, last_seen=excluded.last_seen",
            (
                message.from_user.id,
                (message.from_user.username or ""),
                now_utc_str(),
                now_utc_str(),
            ),
        )
        await db.commit()


        # check admin
        if message.from_user.id in settings.admin_ids:
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_main_reply_kb())
            return

        # check onboarding_done
        cur = await db.execute(
            "SELECT onboarding_done, approved FROM students WHERE tg_id=?",
            (message.from_user.id,),
        )
        row = await cur.fetchone()
        if row and row["onboarding_done"]:
            if row["approved"]:
                await message.answer("–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é üëá", reply_markup=student_main_kb())
            else:
                await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ, –ú–æ–∏ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã —É–∂–µ –µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç, –ø–æ–¥–æ–∂–¥–¥–∏ –Ω–µ–º–Ω–æ–≥–æ")
            return

    # start onboarding
    ib = InlineKeyboardBuilder()
    ib.button(text="üëâ –ü–æ–≥–Ω–∞–ª–∏", callback_data="onb_go")
    ib.button(text="‚ÑπÔ∏è –ö—Ç–æ —Ç–∞–∫–∏–µ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã?", callback_data="about_maestroffs")
    await message.answer(WELCOME_TEXT, reply_markup=ib.as_markup())
    await state.set_state(Onb.waiting_start)

@router.callback_query(F.data == "about_maestroffs")
async def cb_about_maestroffs(cb: types.CallbackQuery):
    txt = (
        "ü¶ù –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ—ã ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –ú–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–∞.\n"
        "–û–Ω–∏:\n"
        "‚Ä¢ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Ç–≤–æ—é –¥–æ–º–∞—à–∫—É –∏ –¥–∞—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏;\n"
        "‚Ä¢ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ ¬´–ü–æ–º–æ—â–∏¬ª;\n"
        "‚Ä¢ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—à–∫–∏.\n\n"
        "–ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–µ—à—å—Å—è ‚Äî –∂–º–∏ ¬´üÜò –ü–æ–º–æ—â—å¬ª –≤ —É—Ä–æ–∫–µ, –æ–¥–∏–Ω –∏–∑ –º–∞–µ—Å—Ç—Ä–æ—Ñ—Ñ–æ–≤ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è."
    )
    ib = InlineKeyboardBuilder()
    ib.button(text="üëâ –ü–æ–≥–Ω–∞–ª–∏", callback_data="onb_go")
    await cb.answer()
    await cb.message.answer(txt)


@router.callback_query(F.data == "onb_go")
async def onb_go(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (—Ç–æ–ª—å–∫–æ –∏–º—è)")
    await state.set_state(Onb.first_name)
    await cb.answer()


@router.message(Onb.first_name)
async def onb_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=(message.text or "").strip())
    await message.answer("–ö–ª–∞—Å—Å! –•–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤—å —Ñ–∞–º–∏–ª–∏—é (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´-¬ª)")
    await state.set_state(Onb.last_name)


@router.message(Onb.last_name)
async def onb_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=(message.text or "").strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12)")
    await state.set_state(Onb.birth_or_age)


@router.message(Onb.birth_or_age)
async def onb_birth(message: types.Message, state: FSMContext):
    await state.update_data(birth_or_age=(message.text or "").strip())
    kb = InlineKeyboardBuilder()
    kb.button(text="üé∏ –ï—Å—Ç—å", callback_data="g_has:1")
    kb.button(text="–ü–æ–∫–∞ –Ω–µ—Ç, –ø–ª–∞–Ω–∏—Ä—É—é", callback_data="g_has:0")
    kb.adjust(1)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≥–∏—Ç–∞—Ä–∞? üé∏", reply_markup=kb.as_markup())
    await state.set_state(Onb.has_guitar)


@router.callback_query(Onb.has_guitar, F.data.startswith("g_has:"))
async def onb_has_guitar(cb: types.CallbackQuery, state: FSMContext):
    has = int(cb.data.split(":")[1])
    await state.update_data(has_guitar=has)
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —É–∂–µ –∏–≥—Ä–∞–µ—à—å? (–º–æ–∂–Ω–æ 0)")
    await state.set_state(Onb.experience)
    await cb.answer()


@router.message(Onb.experience)
async def onb_experience(message: types.Message, state: FSMContext):
    txt = (message.text or "").strip()
    try:
        exp = int("".join(ch for ch in txt if (ch.isdigit() or ch == "-")))
    except Exception:
        exp = 0
    await state.update_data(experience_months=max(0, exp))
    await message.answer("–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å –∑–∞ 1-3 –º–µ—Å—è—Ü–∞ ")
    await state.set_state(Onb.goal)


@router.message(Onb.goal)
async def onb_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=(message.text or "").strip())
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7 ‚Ä¶)")
    await state.set_state(Onb.phone)


@router.message(Onb.phone)
async def onb_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=(message.text or "").strip())
    rules = (
        "üìú –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ —Å—Ä–æ–∫;\n"
        "‚Äî —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–∞–µ–º—Å—è;\n"
        "‚Äî –∫–∞–π—Ñ—É–µ–º –æ—Ç –º—É–∑—ã–∫–∏ üé∂\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, –∏ –ø–æ–ª–µ—Ç–µ–ª–∏!\n"
        "_ –ù–∞–º –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É, –±—É–∫–≤–∞–ª—å–Ω–æ 2-5 –º–∏–Ω—É—Ç –∏ –æ—Ç–∫—Ä–æ–µ–º –¥–æ—Å—Ç—É–ø"
    )

    ib = InlineKeyboardBuilder()
    ib.button(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data="rules_ok")
    await message.answer(rules, reply_markup=ib.as_markup())
    await state.set_state(Onb.rules)


@router.callback_query(Onb.rules, F.data == "rules_ok")
async def onb_rules_ok(cb: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # persist
    async with get_db() as db:
        # parse age / birth_date
        age = None
        birth_date = None
        txt = (data.get("birth_or_age") or "").strip()
        if txt.isdigit():
            age = int(txt)
        else:
            birth_date = txt or None

        await db.execute(
            "UPDATE students SET first_name=?, last_name=?, birth_date=?, age=?, has_guitar=?, "
            "experience_months=?, goal=?, phone=?, onboarding_done=1, consent=1, last_seen=? "
            "WHERE tg_id=?",
            (
                data.get("first_name"),
                data.get("last_name"),
                birth_date,
                age,
                int(data.get("has_guitar") or 0),
                int(data.get("experience_months") or 0),
                data.get("goal"),
                data.get("phone"),
                now_utc_str(),
                cb.from_user.id,
            ),
        )
        await db.commit()

        # Fetch student id
        cur = await db.execute(
            "SELECT id FROM students WHERE tg_id=?", (cb.from_user.id,)
        )
        row = await cur.fetchone()
        student_id = row["id"] if row else None

        # award onboarding bonus (+50), idempotent via UNIQUE(student_id, source)
        # +50 –∑–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
        if student_id:
            try:
                await points.add(student_id, "onboarding_bonus", 50)
            except Exception:
                pass

        # --- –†–∞—Å—Å—á—ë—Ç —Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ --- #
        #total = await points.total(student_id)
        #rank_name, next_thr = get_rank_by_points(total)

        #async with get_db() as db:
         #   await db.execute(
          #      "UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
           #     (rank_name, total, now_utc_str(), student_id),
            #)
            #await db.commit()

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ —Ä–∞–Ω–≥
            #msg = f"üèÖ –¢–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞–Ω–≥: <b>{rank_name}</b>\n–ë–∞–ª–ª—ã: <b>{total}</b>"
           # if next_thr is not None:
           #     msg += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: <b>{next_thr - total}</b>"
          #  await cb.message.answer(msg)



    await cb.message.answer(
        "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã –¥–∞–¥–∏–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()
    # (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ onb_ok/onb_rej ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)

    # Notify admins
    settings = get_settings()
    if settings.admin_ids:
        card = (
            "üÜï –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞\n"
            f"–ò–º—è: {data.get('first_name','')} {data.get('last_name','')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç/—Ä–æ–∂–¥.: {data.get('birth_or_age','')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}\n"
            f"–ì–∏—Ç–∞—Ä–∞: {'–µ—Å—Ç—å' if int(data.get('has_guitar') or 0) else '–Ω–µ—Ç'}\n"
            f"–û–ø—ã—Ç: {int(data.get('experience_months') or 0)} –º–µ—Å\n"
            f"–¶–µ–ª—å: {data.get('goal','')}\n"
            f"@{cb.from_user.username or 'no_username'} ‚Ä¢ tg_id: {cb.from_user.id}\n"
        )
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
        for admin_id in settings.admin_ids:
            try:
                ik = InlineKeyboardBuilder()

                ik.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"onb_ok:{student_id}")
                ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"onb_rej:{student_id}")
                ik.adjust(2)
                await cb.bot.send_message(admin_id, card, reply_markup=ik.as_markup())
            except Exception:
                pass