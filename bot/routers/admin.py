from __future__ import annotations

import random
import asyncio
import re
from typing import List

from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config import get_settings, now_utc_str, local_dt_str
from bot.keyboards.admin import admin_main_reply_kb
from bot.services import points
from bot.services.db import get_db
from bot.services.ranks import get_rank_by_points
from bot.config import get_course
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.keyboards.student import student_main_kb
from bot.services.db import get_db, DB_PATH
from aiogram import Router, types, F
from aiogram.filters import StateFilter, Command


class BroadcastForm(StatesGroup):
    waiting_text = State()


router = Router(name="admin")


_admins = set(get_settings().admin_ids or [])
router.message.filter(F.from_user.id.in_(_admins), StateFilter("*"))
router.callback_query.filter(F.from_user.id.in_(_admins), StateFilter("*"))


# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º–µ–Ω–Ω–æ)
@router.message(Command("ping"))
async def admin_ping(m: types.Message):
    await m.answer("admin ok")

# –ü—Ä–∏–º–µ—Ä –ª–æ–≤–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ —ç–º–æ–¥–∑–∏/–ø—Ä–µ—Ñ–∏–∫—Å—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.message(F.text.func(lambda t: t and t.startswith("üìä")))
async def admin_stats(m: types.Message):
    await m.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–∫")  # —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞

MOTIVATION_TEXTS = [
    "–ö—Ä–∞—Å–∞–≤—á–∏–∫! –î–µ—Ä–∂–∏–º —Ç–µ–º–ø üí™",
    "–° –∫–∞–∂–¥—ã–º —É—Ä–æ–∫–æ–º —Ç—ã —Å–∏–ª—å–Ω–µ–µ üé∏",
    "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –µ–¥–µ–º –¥–∞–ª—å—à–µ! üöÄ",
]

# ----------------- –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã -----------------

def render_broadcast(tpl: str, srow) -> str:
    first = (srow["first_name"] or "").strip()
    last = (srow["last_name"] or "").strip()
    username = (srow["username"] or "").strip()
    name = first or (username and f"@{username}") or "–¥—Ä—É–≥"

    vars = {
        "id": srow["id"],
        "tg_id": srow["tg_id"],
        "username": username,
        "first_name": first,
        "last_name": last,
        "name": name,
    }
    def repl(m: re.Match):
        key = m.group(1)
        return str(vars.get(key, ""))
    # –∑–∞–º–µ–Ω—è–µ–º {key} –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è; –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ ‚Üí –ø—É—Å—Ç–æ
    return re.sub(r"\{(\w+)\}", repl, tpl)

def _is_admin(uid: int) -> bool:
    return uid in get_settings().admin_ids

async def _send_chunked(bot: Bot, chat_id: int, lines: List[str], limit: int = 4000):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚â§ limit (TG ~4096)."""
    if not lines:
        return
    chunk, total = [], 0
    for line in lines:
        add = len(line) + 1
        if total + add > limit:
            await bot.send_message(chat_id, "\n".join(chunk))
            chunk, total = [line], add
        else:
            chunk.append(line); total += add
    if chunk:
        await bot.send_message(chat_id, "\n".join(chunk))

# –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –±–µ–π–¥–∂–µ–π –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
async def _admin_counts():
    """
    queue=submitted —Ä–∞–±–æ—Ç, pay_pending=–æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç,
    onb_pending=–∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, students_total=–≤—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
    """
    async with get_db() as db:
        # –æ—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='submitted'")
        queue = (await cur.fetchone())["c"]

        # –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É (pending)
        cur = await db.execute("SELECT COUNT(*) AS c FROM payment_requests WHERE status='pending'")
        pay_pending = (await cur.fetchone())["c"]

        # –∞–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        cur = await db.execute(
            "SELECT COUNT(*) AS c FROM students WHERE onboarding_done=1 AND COALESCE(approved,0)=0"
        )
        onb_pending = (await cur.fetchone())["c"]

        # –≤—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤
        cur = await db.execute("SELECT COUNT(*) AS c FROM students")
        students_total = (await cur.fetchone())["c"]

    return queue, pay_pending, onb_pending, students_total


# ----------------- –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞ -----------------
@router.message(Command("admin"))
async def admin_mode_on(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    queue, pay_pending, onb_pending, students_total = await _admin_counts()
    await m.answer(
        "üîß –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω.",
        reply_markup=admin_main_reply_kb(queue, pay_pending, onb_pending, students_total),
    )

@router.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")
async def admin_mode_off(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await m.answer("–ì–æ—Ç–æ–≤–æ. –ö–ª–∞–≤–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=ReplyKeyboardRemove())

# ----------------- ReplyKeyboard: –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å -----------------
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def msg_adm_stats(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("SELECT COUNT(*) AS c FROM students"); students = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status IN ('sent','returned','submitted')"); active = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='submitted'"); queued = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE status='approved' AND approved_at >= datetime('now','-7 day') || 'Z'"); approved7 = (await cur.fetchone())["c"]
        cur = await db.execute("SELECT COALESCE(SUM(amount),0) AS s FROM payments WHERE paid_at >= datetime('now','-30 day') || 'Z'"); sum30 = (await cur.fetchone())["s"]
    txt = ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
           f"‚Äî –£—á–µ–Ω–∏–∫–∏: {students}\n"
           f"‚Äî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active}\n"
           f"‚Äî –í –æ—á–µ—Ä–µ–¥–∏ (submitted): {queued}\n"
           f"‚Äî –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞ 7–¥: {approved7}\n"
           f"‚Äî –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ 30–¥: {sum30} ‚Ç∏")
    await m.answer(txt)

@router.message(F.text.startswith("üóÇ –û—á–µ—Ä–µ–¥—å"))
async def msg_adm_queue(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("""
            SELECT p.id, p.lesson_code, p.task_code, p.submitted_at, s.tg_id, s.username
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.status='submitted' ORDER BY p.submitted_at DESC
        """)
        rows = await cur.fetchall()
    if not rows:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è.")
        return
    await m.answer("–û—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç (submitted):")
    for r in rows:
        card = (f"PID: {r['id']}\n"
                f"–£—á–µ–Ω–∏–∫: @{r['username'] or 'no_username'} (id {r['tg_id']})\n"
                f"–£—Ä–æ–∫/—Ä–∞–∑–¥–µ–ª: {r['lesson_code']}/{r['task_code']}\n"
                f"–°–¥–∞–Ω–æ: {r['submitted_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"p_ok:{r['id']}")
        ik.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å", callback_data=f"p_back:{r['id']}")
        ik.adjust(2)
        await m.bot.send_message(m.chat.id, card, reply_markup=ik.as_markup())

@router.message(F.text.startswith("üë• –£—á–µ–Ω–∏–∫–∏"))
async def msg_adm_students(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name, onboarding_done, created_at
            FROM students ORDER BY id DESC LIMIT 30
        """)
        rows = await cur.fetchall()
    if not rows:
        await m.answer("–£—á–µ–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await m.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–µ–Ω–∏–∫–∏:")
    for r in rows:
        card = (f"id:{r['id']} ‚Ä¢ tg_id:{r['tg_id']} @{r['username'] or '‚Äî'}\n"
                f"{r['first_name'] or ''} {r['last_name'] or ''} ‚Ä¢ onb:{r['onboarding_done']} ‚Ä¢ {r['created_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚ÑπÔ∏è –ê–Ω–∫–µ—Ç–∞", callback_data=f"stu_info:{r['id']}")
        ik.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"stu_del:{r['id']}")
        ik.adjust(2)
        await m.bot.send_message(m.chat.id, card, reply_markup=ik.as_markup())

@router.message(F.text == "üí≥ –ü–ª–∞—Ç–µ–∂–∏")
async def msg_adm_payments(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_payments(m.bot, m.chat.id)

@router.message(F.text.startswith("üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"))
async def msg_adm_pay_pending(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_pay_requests(m.bot, m.chat.id)

@router.message(F.text.startswith("üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è)"))
async def msg_adm_onb_pending(m: types.Message):
    if not _is_admin(m.from_user.id):
        return
    await _show_onboarding_pending(m.bot, m.chat.id)

# ----------------- callbacks: –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é -----------------
@router.callback_query(F.data == "adm_payments")
async def cb_adm_payments(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üí≥ –ü–ª–∞—Ç–µ–∂–∏:")
    await _show_payments(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data == "adm_pay_pending")
async def cb_adm_pay_pending(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üßæ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:")
    await _show_pay_requests(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data == "adm_onb_pending")
async def cb_adm_onb_pending(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    await cb.answer()
    await cb.message.edit_text("üìù –ê–Ω–∫–µ—Ç—ã (–º–æ–¥–µ—Ä–∞—Ü–∏—è):")
    await _show_onboarding_pending(cb.message.bot, cb.message.chat.id)

@router.callback_query(F.data.startswith("stu_info:"))
async def stu_info(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    async with get_db() as db:
        cur = await db.execute("SELECT * FROM students WHERE id=?", (sid,))
        s = await cur.fetchone()
    if not s:
        await cb.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ"); return
    card = (
        "üë§ –ê–Ω–∫–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞\n"
        f"–ò–º—è: {s['first_name'] or ''} {s['last_name'] or ''}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {s['age'] or '‚Äî'} (—Ä–æ–∂–¥.: {s['birth_date'] or '‚Äî'})\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {s['phone'] or '‚Äî'}\n"
        f"–ì–∏—Ç–∞—Ä–∞: {'–µ—Å—Ç—å' if (s['has_guitar'] or 0) else '–Ω–µ—Ç'}\n"
        f"–û–ø—ã—Ç: {s['experience_months'] or 0} –º–µ—Å\n"
        f"–¶–µ–ª—å: {s['goal'] or '‚Äî'}\n"
        f"@{s['username'] or '‚Äî'} ‚Ä¢ tg_id: {s['tg_id']}\n"
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {s['created_at'] or '‚Äî'}"
    )
    await cb.message.edit_text(card)
    await cb.answer()

@router.callback_query(F.data.startswith("stu_del:"))
async def stu_del(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    ik = InlineKeyboardBuilder()
    ik.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"stu_del_go:{sid}")
    ik.button(text="–û—Ç–º–µ–Ω–∞", callback_data="adm_students")
    await cb.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ id:{sid}? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–ª–∞—Ç–µ–∂–∏.",
        reply_markup=ik.as_markup(),
    )
    await cb.answer()

@router.callback_query(F.data.startswith("stu_del_go:"))
async def stu_del_go(cb: types.CallbackQuery):
    sid = int(cb.data.split(":")[1])
    async with get_db() as db:
        await db.execute("DELETE FROM students WHERE id=?", (sid,))
        await db.commit()
    await cb.message.edit_text("–£–¥–∞–ª–µ–Ω–æ.")
    await cb.answer()

# ----- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç -----
@router.callback_query(F.data.startswith("p_ok:"))
async def p_ok(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])

    # ‚Üì‚Üì‚Üì –ù–ê–®–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1 ‚Üì‚Üì‚Üì
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    async with get_db() as db:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        cur = await db.execute("SELECT status, task_code FROM progress WHERE id=?", (pid,))
        prow = await cur.fetchone()
        if not prow:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–µ—Ä–Ω–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
            await cb.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # ... (–≤—Å—è –≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞)
        status = (prow["status"] or "")
        if status == "approved":
            await cb.message.edit_text(f"{original_text}\n\n‚úÖ –£–∂–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ.")
            await cb.answer("–£–∂–µ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ")
            return
        if status != "submitted":
            await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
            await cb.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
            return

        # –∞–ø—Ä—É–≤
        now = now_utc_str()
        await db.execute(
            "UPDATE progress SET status='approved', approved_at=?, updated_at=? WHERE id=?",
            (now, now, pid),
        )

        # —Å—Ç—É–¥–µ–Ω—Ç
        cur = await db.execute("""
            SELECT s.id AS sid, s.tg_id AS tg_id
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.id = ?
        """, (pid,))
        row = await cur.fetchone()
        if not row:
            await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
        sid, tg_id = row["sid"], row["tg_id"]

        # +100 –±–∞–ª–ª–æ–≤ –∑–∞ —É—Ä–æ–∫ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
        try:
            await points.add(sid, f"lesson_approved:{pid}", 100)
        except Exception:
            pass

        # —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ
        cur = await db.execute("SELECT COUNT(*) AS c FROM progress WHERE student_id=? AND status='approved'", (sid,))
        appr = (await cur.fetchone())["c"]

        bonus = None
        if appr == 8:
            bonus = ("module1_bonus:s{sid}", 500, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–¢—ã –∑–∞–∫—Ä—ã–ª 1-–π –º–æ–¥—É–ª—å ‚Äî 8 —É—Ä–æ–∫–æ–≤ üí™\n\nüéØ –ë–æ–Ω—É—Å: +500 –±–∞–ª–ª–æ–≤")
        elif appr == 16:
            bonus = ("module2_bonus:s{sid}", 500, "üèÜ –§–∏–Ω–∞–ª!\n–¢—ã –ø—Ä–æ—à—ë–ª 16 —É—Ä–æ–∫–æ–≤.\n\nüéØ –ë–æ–Ω—É—Å: +500 –±–∞–ª–ª–æ–≤\n–ë–µ–π–¥–∂: ¬´–í—ã–ø—É—Å–∫–Ω–∏–∫ Maestro¬ª üèÖ")
        if bonus:
            try:
                await points.add(sid, bonus[0], bonus[1])
            except Exception:
                pass

        await db.commit()

    # –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–∞–Ω–≥–∞
    total = await points.total(sid)
    async with get_db() as db:
        cur = await db.execute("SELECT rank FROM students WHERE id=?", (sid,))
        prev_rank = (await cur.fetchone())["rank"] or ""
    rank_name, next_thr = get_rank_by_points(total)

    now = now_utc_str()
    async with get_db() as db:
        if rank_name != prev_rank:
            await db.execute("UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
                             (rank_name, total, now, sid))
        else:
            await db.execute("UPDATE students SET rank_points=?, updated_at=? WHERE id=?",
                             (total, now, sid))
        await db.commit()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
    rank_up_text = (f"üèÖ –ù–æ–≤—ã–π —Ä–∞–Ω–≥: <b>{rank_name}</b>!\n–¢–≤–æ–∏ –±–∞–ª–ª—ã: <b>{total}</b>"
                    f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞: <b>{next_thr - total}</b>") if (rank_name != prev_rank and next_thr is not None) else None
    accept_text = "‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! +100 –±–∞–ª–ª–æ–≤ üéØ"
    if appr == 8 or appr == 16:
        accept_text += f"\n\n{bonus[2]}"
    accept_text += f"\n–¢–≤–æ–π —Å—á—ë—Ç: <b>{total}</b> –±–∞–ª–ª–æ–≤"
    final_text = f"{rank_up_text}\n\n{accept_text}" if rank_up_text else accept_text

    # ...
    try:  # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ try
        await cb.message.bot.send_message(tg_id, final_text)

        kb = InlineKeyboardBuilder()
        kb.button(text="üìö –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"stu:take_next:{sid}")
        kb.adjust(1)
        await cb.message.bot.send_message(tg_id, random.choice(MOTIVATION_TEXTS), reply_markup=kb.as_markup())

        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –£—á–µ–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        await cb.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ")

    except Exception as e:  # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É
        # –ï—Å–ª–∏ —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –∞–¥–º–∏–Ω—É
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É {tg_id}: {e}")
        await cb.message.edit_text(
            f"{original_text}\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. (–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
        await cb.answer("–ü—Ä–∏–Ω—è—Ç–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å", show_alert=True)


# –§–∞–π–ª: Bot/routers/admin.py

@router.callback_query(F.data.startswith("p_back:"))
async def p_back(cb: types.CallbackQuery):
    pid = int(cb.data.split(":")[1])

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É...")

    async with get_db() as db:
        cur = await db.execute("SELECT status FROM progress WHERE id=?", (pid,))
        prow = await cur.fetchone()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    if not prow:
        await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
        await cb.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if prow["status"] == "returned":
        await cb.message.edit_text(f"{original_text}\n\n‚ö†Ô∏è –£–∂–µ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.")
        await cb.answer("–£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É ‚ö†Ô∏è")
        return
    if prow["status"] == "approved":
        await cb.message.edit_text(f"{original_text}\n\n‚úÖ –†–∞–±–æ—Ç–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞.")
        await cb.answer("–†–∞–±–æ—Ç–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", show_alert=True)
        return
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à–Ω–µ–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–ª—è–µ–º
    if prow["status"] not in ("submitted", "returned"):
        await cb.message.edit_text(original_text, reply_markup=cb.message.reply_markup)
        await cb.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", show_alert=True)
        return

    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    async with get_db() as db:
        await db.execute("UPDATE progress SET status='returned', returned_at=?, updated_at=? WHERE id=?",
                         (now_utc_str(), now_utc_str(), pid))
        cur = await db.execute("""
            SELECT s.tg_id AS tg_id
            FROM progress p JOIN students s ON s.id = p.student_id
            WHERE p.id = ?
        """, (pid,))
        row = await cur.fetchone()
        await db.commit()

    if row and row["tg_id"]:
        await cb.message.bot.send_message(row["tg_id"], "‚Ü©Ô∏è –†–∞–±–æ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ò—Å–ø—Ä–∞–≤—å –∏ —Å–¥–∞–≤–∞–π —Å–Ω–æ–≤–∞ üí™")

    # 4. –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    await cb.message.edit_text(f"{original_text}\n\n‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ. –£—á–µ–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await cb.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
# ----- –ø–ª–∞—Ç–µ–∂–∏ -----
async def _show_payments(bot: Bot, chat_id: int):
    settings = get_settings(); tz = settings.timezone
    async with get_db() as db:
        cur = await db.execute("""
            SELECT p.id, s.username, s.tg_id, p.amount, p.method, p.note, p.paid_at
            FROM payments p JOIN students s ON s.id = p.student_id
            ORDER BY COALESCE(p.paid_at,'') DESC, p.id DESC
            LIMIT 20
        """); pays = await cur.fetchall()
        cur = await db.execute("""
            SELECT pr.id, pr.amount, pr.created_at, s.username, s.tg_id
            FROM payment_requests pr JOIN students s ON s.id = pr.student_id
            WHERE pr.status='pending'
            ORDER BY pr.created_at DESC
        """); reqs = await cur.fetchall()
        cur = await db.execute("""
            SELECT COALESCE(SUM(amount),0) AS s
            FROM payments
            WHERE paid_at >= datetime('now','-30 day') || 'Z'
        """); sum30 = (await cur.fetchone())["s"]

    await bot.send_message(chat_id, f"üí≥ –ü–ª–∞—Ç–µ–∂–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)\n–ò—Ç–æ–≥–æ –∑–∞ 30 –¥–Ω–µ–π: {sum30} ‚Ç∏")

    if pays:
        lines = []
        for p in pays:
            paid = local_dt_str(p["paid_at"], tz) if p["paid_at"] else "‚Äî"
            user = p["username"] or "no_username"
            method = p["method"] or "manual"
            note = (f" ‚Ä¢ {p['note']}" if (p["note"] or "").strip() else "")
            lines.append(f"{paid} ‚Ä¢ @{user} ({p['tg_id']}) ‚Äî {p['amount']} ‚Ç∏ [{method}]{note}")
        await _send_chunked(bot, chat_id, lines)
    else:
        await bot.send_message(chat_id, "–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    if reqs:
        await bot.send_message(chat_id, "–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        for r in reqs:
            ik = InlineKeyboardBuilder()
            ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{r['tg_id']}")
            ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"adm_pay_no:{r['tg_id']}")
            ik.adjust(2)
            created = local_dt_str(r["created_at"], tz) if r["created_at"] else "‚Äî"
            await bot.send_message(
                chat_id,
                f"@{r['username'] or 'no_username'} ({r['tg_id']}) ‚Äî {r['amount']} ‚Ç∏, {created}",
                reply_markup=ik.as_markup(),
            )
    else:
        await bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")

async def _show_pay_requests(bot: Bot, chat_id: int):
    async with get_db() as db:
        cur = await db.execute("""
            SELECT pr.id, pr.amount, pr.created_at, s.username, s.tg_id
            FROM payment_requests pr JOIN students s ON s.id = pr.student_id
            WHERE pr.status='pending' ORDER BY pr.created_at ASC
        """); reqs = await cur.fetchall()
    if not reqs:
        await bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        return
    await bot.send_message(chat_id, "–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
    for r in reqs:
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"adm_pay_ok:{r['tg_id']}")
        ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  callback_data=f"adm_pay_no:{r['tg_id']}")
        ik.adjust(2)
        await bot.send_message(chat_id,
            f"@{r['username'] or 'no_username'} ({r['tg_id']}) ‚Äî {r['amount']} ‚Ç∏, {r['created_at']}",
            reply_markup=ik.as_markup())

async def _show_onboarding_pending(bot: Bot, chat_id: int):
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name, created_at
            FROM students
            WHERE onboarding_done = 1 AND COALESCE(approved, 0) = 0
            ORDER BY created_at ASC
        """); rows = await cur.fetchall()
    if not rows:
        await bot.send_message(chat_id, "–ù–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return
    await bot.send_message(chat_id, "–ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:")
    for r in rows:
        card = (f"id:{r['id']} ‚Ä¢ tg_id:{r['tg_id']} @{r['username'] or '‚Äî'}\n"
                f"{r['first_name'] or ''} {r['last_name'] or ''} ‚Ä¢ {r['created_at']}")
        ik = InlineKeyboardBuilder()
        ik.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"onb_ok:{r['id']}")
        ik.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"onb_rej:{r['id']}")
        ik.adjust(2)
        await bot.send_message(chat_id, card, reply_markup=ik.as_markup())

# ----- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã -----
@router.callback_query(F.data.startswith("adm_pay_ok:"))
async def adm_pay_ok(cb: types.CallbackQuery):
    try:
        _, course_code, tg_id_str = cb.data.split(":")
        tg_id = int(tg_id_str)
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    course = get_course(course_code)
    if not course:
        await cb.answer(f"–ö—É—Ä—Å —Å –∫–æ–¥–æ–º {course_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ–ø–ª–∞—Ç—É...")

    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        srow = await cur.fetchone()
        if not srow:
            await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        sid = srow["id"]

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        now = now_utc_str()
        await db.execute(
            "INSERT INTO payments(student_id, amount, course_code, method, note, paid_at, created_at) VALUES(?,?,?,?,?,?,?)",
            (sid, course.price, course.code, "manual", f"confirmed by {cb.from_user.id}", now, now),
        )
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await db.execute(
            "UPDATE payment_requests SET status='confirmed', resolved_at=? WHERE student_id=? AND course_code=? AND status='pending'",
            (now, sid, course.code)
        )
        await db.commit()

    await cb.message.edit_text(f"{original_text}\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ ¬´{course.title}¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await cb.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

    try:
        await cb.bot.send_message(tg_id, f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É ¬´{course.title}¬ª –æ—Ç–∫—Ä—ã—Ç! –ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ {tg_id} –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

@router.callback_query(F.data.startswith("adm_pay_no:"))
async def adm_pay_no(cb: types.CallbackQuery):
    try:
        _, course_code, tg_id_str = cb.data.split(":")
        tg_id = int(tg_id_str)
    except (ValueError, IndexError):
        await cb.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    course = get_course(course_code)
    if not course:
        await cb.answer(f"–ö—É—Ä—Å —Å –∫–æ–¥–æ–º {course_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û—Ç–∫–ª–æ–Ω—è—é –∑–∞—è–≤–∫—É...")

    async with get_db() as db:
        cur = await db.execute("SELECT id FROM students WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        if not row:
            await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        sid = row["id"]

        await db.execute("UPDATE payment_requests SET status='rejected', resolved_at=? WHERE student_id=? AND course_code=? AND status='pending'",
                         (now_utc_str(), sid, course.code))
        await db.commit()

    await cb.message.edit_text(f"{original_text}\n\n‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å ¬´{course.title}¬ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await cb.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    try:
        await cb.bot.send_message(tg_id, f"‚ùóÔ∏è –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫—É—Ä—Å–∞ ¬´{course.title}¬ª –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ ¬´üÜò –ü–æ–º–æ—â—å¬ª.")
    except Exception:
        pass

# ----- –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ -----
@router.callback_query(F.data.startswith("onb_ok:"))
async def onb_ok(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return

    sid = int(cb.data.split(":")[1])
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û–¥–æ–±—Ä—è—é –∞–Ω–∫–µ—Ç—É...")

    # 1) –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –∏ –¥–æ—Å—Ç–∞—Ç—å tg_id
    async with get_db() as db:
        await db.execute("UPDATE students SET approved=1, updated_at=? WHERE id=?",
                         (now_utc_str(), sid))
        await db.commit()
        cur = await db.execute("SELECT tg_id, COALESCE(rank,'') AS rank FROM students WHERE id=?", (sid,))
        row = await cur.fetchone()

    if not row:
        await cb.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return

    tg_id = row["tg_id"]
    prev_rank = row["rank"] or ""

    # 2) –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å +50 –∑–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –ø–æ UNIQUE(student_id, source))
    try:
        await points.add(sid, "onboarding_bonus", 50)
    except Exception:
        pass

    # 3) –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å rank/rank_points
    total = await points.total(sid)
    rank_name, next_thr = get_rank_by_points(total)
    async with get_db() as db:
        if rank_name != prev_rank:
            await db.execute(
                "UPDATE students SET rank=?, rank_points=?, updated_at=? WHERE id=?",
                (rank_name, total, now_utc_str(), sid),
            )
        else:
            await db.execute(
                "UPDATE students SET rank_points=?, updated_at=? WHERE id=?",
                (total, now_utc_str(), sid),
            )
        await db.commit()

    # 4) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await cb.message.edit_text(f"{original_text}\n\n‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    await cb.answer("–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ", show_alert=True)

    # —Å—Ç—É–¥–µ–Ω—Ç—É ‚Äî —Å—Ç–∞—Ç—É—Å, –±–∞–ª–ª—ã, —Ä–∞–Ω–≥ + –º–µ–Ω—é
    msg = f"‚úÖ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.\n–ù–∞—á–∏—Å–ª–µ–Ω–æ: +50 –±–∞–ª–ª–æ–≤.\n"
    msg += f"üèÖ –¢–≤–æ–π —Ä–∞–Ω–≥: <b>{rank_name}</b> ‚Ä¢ –ë–∞–ª–ª—ã: <b>{total}</b>"
    if next_thr is not None:
        msg += f"\n‚¨ÜÔ∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞: <b>{next_thr - total}</b>"
    await cb.bot.send_message(tg_id, msg)
    await cb.bot.send_message(tg_id, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é üëá", reply_markup=student_main_kb())


@router.callback_query(F.data.startswith("onb_rej:"))
async def onb_rej(cb: types.CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer(); return
    sid = int(cb.data.split(":")[1])
    original_text = cb.message.text
    await cb.message.edit_text(f"{original_text}\n\n‚è≥ –û—Ç–∫–ª–æ–Ω—è—é –∞–Ω–∫–µ—Ç—É...")

    async with get_db() as db:
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ¬´–≤—ã–∫–∏–¥—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ¬ª: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        await db.execute(
            "UPDATE students SET approved=0, onboarding_done=0, updated_at=? WHERE id=?",
            (now_utc_str(), sid),
        )
        await db.commit()
        cur = await db.execute("SELECT tg_id FROM students WHERE id=?", (sid,))
        row = await cur.fetchone()

    await cb.message.edit_text(f"{original_text}\n\n‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await cb.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå", show_alert=True)

    if row and row["tg_id"]:
        # –º–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª ‚Äî –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π onb_go
        ik = InlineKeyboardBuilder()
        ik.button(text="üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", callback_data="onb_go")
        ik.adjust(1)
        await cb.bot.send_message(
            row["tg_id"],
            "‚ùå –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –µ—ë –∑–∞–Ω–æ–≤–æ ‚Äî –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç.",
            reply_markup=ik.as_markup(),
        )
@router.message(F.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞")
async def msg_broadcast_start(m: types.Message, state: FSMContext):
    if not _is_admin(m.from_user.id):
        return
    await state.set_state(BroadcastForm.waiting_text)
    await m.answer(
        "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã: {name}, {first_name}, {last_name}, {username}, {tg_id}.\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–ü—Ä–∏–≤–µ—Ç, {name}! –ó–∞–≤—Ç—Ä–∞ —É—Ä–æ–∫ –≤ 19:00¬ª\n\n"
        "–ù–∞–ø–∏—à–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏."
    )

@router.message(BroadcastForm.waiting_text, F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def msg_broadcast_cancel(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É.")

@router.message(BroadcastForm.waiting_text)
async def msg_broadcast_run(m: types.Message, state: FSMContext):
    if not _is_admin(m.from_user.id):
        return
    tpl = m.text.strip()
    if not tpl:
        await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return

    # –±–µ—Ä—ë–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    async with get_db() as db:
        cur = await db.execute("""
            SELECT id, tg_id, username, first_name, last_name
            FROM students
            WHERE tg_id IS NOT NULL
        """)
        students = await cur.fetchall()

    ok = fail = 0
    await m.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({len(students)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)‚Ä¶")

    for s in students:
        try:
            text = render_broadcast(tpl, s)  # ‚Üê –ü–û–î–°–¢–ê–í–õ–Ø–ï–ú {name}, {first_name} –∏ —Ç.–¥.
            await m.bot.send_message(s["tg_id"], text)
            ok += 1
        except Exception:
            fail += 1
        await asyncio.sleep(0.05)

    await state.clear()
    await m.answer(f"–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {fail}.")

@router.message(Command("db"))
async def db_health(m: types.Message):
    try:
        async with get_db() as db:
            tables = []
            for t in ("students","test_results","points"):
                try:
                    cur = await db.execute(f"SELECT COUNT(*) FROM {t}")
                    n = (await cur.fetchone())[0]
                    tables.append(f"{t}={n}")
                except Exception as e:
                    tables.append(f"{t}=ERR({e})")
        await m.answer(f"DB={DB_PATH}\n" + "\n".join(tables))
    except Exception as e:
        await m.answer(f"DB open failed: {e}")