from __future__ import annotations
import asyncio
from datetime import datetime, timezone, timedelta
from pathlib import Path
from aiogram import Bot

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ---
# –ú—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–∏–Ω –±–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
from bot.services.db import get_db
from bot.config import get_settings, now_utc_str
from bot.services.lessons import list_l_lessons, parse_l_num
from . import points  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è points.py
# ---------------------------


# –¢–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏
REMINDER_TEXTS = [
    "üëã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ù–µ –∑–∞–±—É–¥—å –µ–≥–æ —Å–¥–∞—Ç—å!",
    "‚ö° –ü–æ—Ä–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ ‚Äî –∂–¥—É —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É.",
    "üî• –¢—ã –±–ª–∏–∑–æ–∫ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é. –°–¥–∞–π –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ –±–∞–ª–ª—ã!",
]
# –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî –ø–µ—Ä–µ—Å—Ç–∞—ë–º —Å–ª–∞—Ç—å (–≥–∞—Å–∏–º remind_at)
MAX_REMIND_COUNT = len(REMINDER_TEXTS)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (MVP: 24 —á–∞—Å–∞)
REMIND_INTERVAL_HOURS = 24

# –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–∞ –≤–æ—Ä–∫–µ—Ä–∞
LOOP_SLEEP_SECONDS = 600


async def _send_progress_reminders(bot: Bot) -> None:
    """
    –®–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 'sent'/'returned',
    —É –∫–æ—Ç–æ—Ä—ã—Ö remind_at <= now. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ reminded –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏.
    """
    now_iso = now_utc_str()

    async with get_db() as db:
        cur = await db.execute(
            """
            SELECT p.id, p.student_id, p.remind_at, p.reminded, p.status,
                   s.tg_id
            FROM progress p
            JOIN students s ON s.id = p.student_id
            WHERE p.status IN ('sent','returned')
              AND p.remind_at IS NOT NULL
              AND p.remind_at <= ?
            """,
            (now_iso,),
        )
        rows = await cur.fetchall()

        for r in rows:
            pid = r["id"]
            tg_id = r["tg_id"]
            reminded = (r["reminded"] or 0)

            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É, –ø–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —à–ª—ë–º
            if reminded >= MAX_REMIND_COUNT:
                # –ì–∞—Å–∏–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await db.execute(
                    "UPDATE progress SET remind_at=NULL, updated_at=? WHERE id=?",
                    (now_iso, pid),
                )
                continue

            text = REMINDER_TEXTS[min(reminded, MAX_REMIND_COUNT - 1)]

            try:
                await bot.send_message(tg_id, text)
            except Exception:
                # –Ω–µ –≤–∞–ª–∏–º—Å—è –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö/–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                pass

            # –°–¥–≤–∏–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–∫–Ω–æ + —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            next_at = (
                datetime.now(timezone.utc) + timedelta(hours=REMIND_INTERVAL_HOURS)
            ).replace(microsecond=0).isoformat().replace("+00:00", "Z")

            await db.execute(
                "UPDATE progress SET remind_at=?, reminded=COALESCE(reminded,0)+1, updated_at=? WHERE id=?",
                (next_at, now_iso, pid),
            )

        await db.commit()


async def _notify_waiting_lessons(bot: Bot) -> None:
    """
    –ï—Å–ª–∏ —É —É—á–µ–Ω–∏–∫–∞ —Å—Ç–æ–∏—Ç waiting_lessons=1 –∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π L-—É—Ä–æ–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º.
    –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º last_known_max_lesson.
    """
    settings = get_settings()
    lessons_dir = Path(settings.lessons_path)

    lessons = list_l_lessons(lessons_dir)
    current_max = 0
    for code in lessons:
        n = parse_l_num(code) or 0
        if n > current_max:
            current_max = n

    if current_max <= 0:
        return

    async with get_db() as db:
        cur = await db.execute(
            "SELECT id, tg_id, last_known_max_lesson FROM students WHERE waiting_lessons=1"
        )
        students_rows = await cur.fetchall()

        for s in students_rows:
            last_known = s["last_known_max_lesson"] or 0
            if current_max > last_known:
                try:
                    await bot.send_message(
                        s["tg_id"],
                        "–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —É—Ä–æ–∫–∏! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ üé∏"
                    )
                except Exception:
                    pass

                await db.execute(
                    "UPDATE students SET waiting_lessons=0, last_known_max_lesson=? WHERE id=?",
                    (current_max, s["id"]),
                )

        await db.commit()


async def _auto_approve_submitted_lessons(bot: Bot) -> None:
    now_iso = now_utc_str()

    async with get_db() as db:
        # –ò—â–µ–º —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–¥–∞–Ω—ã –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        # –∏ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã.
        cur = await db.execute(
            """
            SELECT p.id, s.tg_id, s.id AS sid
            FROM progress p
            JOIN students s ON s.id = p.student_id
            WHERE p.status = 'submitted'
              AND p.submitted_at <= datetime('now', '-10 minutes') || 'Z'
            """
        )
        rows = await cur.fetchall()

        for r in rows:
            pid, tg_id, sid = r['id'], r['tg_id'], r['sid']

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'approved'
            await db.execute(
                "UPDATE progress SET status='approved', approved_at=?, updated_at=? WHERE id=?",
                (now_iso, now_iso, pid),
            )

            # –ù–∞—á–∏—Å–ª—è–µ–º 100 –±–∞–ª–ª–æ–≤
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
                await points.add(sid, f"lesson_approved_auto:{pid}", 100)
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
            await bot.send_message(tg_id, "‚úÖ –¢–≤–æ—è —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞. –î–µ—Ä–∂–∏ 100 –±–∞–ª–ª–æ–≤!")

        await db.commit()

async def reminder_loop(bot: Bot):
    # ...
    while True:
        try:
            await _send_progress_reminders(bot)
            # –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ü–∏–∫–ª
            await _auto_approve_submitted_lessons(bot)
            #await _notify_waiting_lessons(bot)
        except Exception as e:
            # ... (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
            print("[reminder_loop] error:", e)

        await asyncio.sleep(LOOP_SLEEP_SECONDS)