# bot/middlewares/block_until_done.py
from aiogram.types import Message
from aiogram.dispatcher.middlewares.base import BaseMiddleware  # aiogram v3
from typing import Callable, Dict, Any, Awaitable
from bot.services.db import get_db
from aiogram.fsm.context import FSMContext


# –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
ALLOWED_TEXTS = {
    "üÜò –ü–æ–º–æ—â—å", "SOS", "–°–û–°",
    "üèÖ –ú–æ–π —Ä–∞–Ω–≥", "ü•á –ú–æ–π —Ä–∞–Ω–≥", "–ú–æ–π —Ä–∞–Ω–≥",
    "üèÜ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "‚ÑπÔ∏è –û –∫—É—Ä—Å–µ", "–û –∫—É—Ä—Å–µ",
    "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "–û–ø–ª–∞—Ç–∏—Ç—å",
    "‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫", "–°–¥–∞—Ç—å —É—Ä–æ–∫",
    "üìö –ù–æ–≤—ã–π —É—Ä–æ–∫",
}

class BlockUntilDoneMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        msg: Message = event

        # 0) –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–¥–∞—á–∏ (FSM SubmitForm.waiting_work) ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        state: FSMContext | None = data.get("state")
        if state is not None:
            try:
                cur_state = await state.get_state()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –∫–ª–∞—Å—Å SubmitForm (–±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
                if cur_state and cur_state.endswith("SubmitForm:waiting_work"):
                    return await handler(event, data)
            except Exception:
                pass

        state: FSMContext | None = data.get("state")
        if state:
            cur = await state.get_state()
            if cur:
                return await handler(event, data)

        # 1) –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if msg.text and msg.text.startswith(("/", ".")):
            return await handler(event, data)

        # 2) –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if msg.text and msg.text.strip() in ALLOWED_TEXTS:
            return await handler(event, data)

        # 3) –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —É—Ä–æ–∫ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ
        async with get_db() as db:
            cur = await db.execute(
                """
                SELECT p.id, p.task_code
                FROM progress p
                JOIN students s ON s.id = p.student_id
                WHERE s.tg_id=? AND p.status IN ('sent','returned')
                ORDER BY p.id DESC
                LIMIT 1
                """,
                (msg.from_user.id,),
            )
            prow = await cur.fetchone()

        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not prow:
            return await handler(event, data)

        # –ê–∫—Ç–∏–≤–Ω—ã–π –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω (–Ω–µ DONE) ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
        if (prow["task_code"] or "") != "DONE":
            await msg.answer(
                "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è, –Ω–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –°–¥–∞—Ç—å —É—Ä–æ–∫¬ª. "
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –∂–º–∏ ¬´üÜò –ü–æ–º–æ—â—å¬ª."
            )
            return

        # –£—Ä–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ DONE (–∑–∞–≤–µ—Ä—à—ë–Ω) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
        return await handler(event, data)
